{"version":3,"sources":["../../../node_modules/dedent/dist/dedent.js","../src/index.ts","../../../node_modules/uuid/dist/esm/stringify.js","../../../node_modules/uuid/dist/esm/rng.js","../../../node_modules/uuid/dist/esm/native.js","../../../node_modules/uuid/dist/esm/v4.js","../src/actions/imageGeneration.ts","../src/actions/choice.ts","../src/actions/followRoom.ts","../src/actions/ignore.ts","../src/actions/muteRoom.ts","../src/actions/none.ts","../src/actions/reply.ts","../src/actions/roles.ts","../src/actions/sendMessage.ts","../src/actions/settings.ts","../src/actions/unfollowRoom.ts","../src/actions/unmuteRoom.ts","../src/actions/updateEntity.ts","../src/evaluators/reflection.ts","../src/providers/actions.ts","../src/providers/actionState.ts","../src/providers/anxiety.ts","../src/providers/attachments.ts","../src/providers/capabilities.ts","../src/providers/character.ts","../src/providers/choice.ts","../src/providers/entities.ts","../src/providers/evaluators.ts","../../../node_modules/unique-names-generator/src/seed.ts","../../../node_modules/unique-names-generator/src/unique-names-generator.constructor.ts","../../../node_modules/unique-names-generator/src/unique-names-generator.ts","../../../node_modules/unique-names-generator/src/dictionaries/adjectives.ts","../../../node_modules/unique-names-generator/src/dictionaries/animals.ts","../../../node_modules/unique-names-generator/src/dictionaries/colors.ts","../../../node_modules/unique-names-generator/src/dictionaries/countries.ts","../../../node_modules/unique-names-generator/src/dictionaries/languages.ts","../../../node_modules/unique-names-generator/src/dictionaries/names.ts","../../../node_modules/unique-names-generator/src/dictionaries/star-wars.ts","../../../node_modules/unique-names-generator/src/dictionaries/numbers.ts","../src/providers/facts.ts","../src/providers/providers.ts","../src/providers/recentMessages.ts","../src/providers/relationships.ts","../src/providers/roles.ts","../src/providers/settings.ts","../src/providers/time.ts","../src/providers/world.ts","../src/services/task.ts"],"sourcesContent":["\"use strict\";\n\nfunction dedent(strings) {\n\n  var raw = void 0;\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n\n  // first, perform interpolation\n  var result = \"\";\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i].\n    // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\").\n\n    // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  }\n\n  // now strip indentation\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n    if (m) {\n      var indent = m[1].length;\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  }\n\n  // dedent eats leading and trailing whitespace too\n  result = result.trim();\n\n  // handle escaped newlines at the end to ensure they don't get stripped too\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}\n","import {\n  type ActionEventPayload,\n  asUUID,\n  ChannelType,\n  composePromptFromState,\n  type Content,\n  ContentType,\n  createUniqueUuid,\n  type EntityPayload,\n  type EvaluatorEventPayload,\n  type EventPayload,\n  EventType,\n  type IAgentRuntime,\n  imageDescriptionTemplate,\n  type InvokePayload,\n  logger,\n  type Media,\n  type Memory,\n  messageHandlerTemplate,\n  type MessagePayload,\n  type MessageReceivedHandlerParams,\n  ModelType,\n  parseKeyValueXml,\n  type Plugin,\n  PluginEvents,\n  postCreationTemplate,\n  Role,\n  type Room,\n  shouldRespondTemplate,\n  truncateToCompleteSentence,\n  type UUID,\n  type WorldPayload,\n  getLocalServerUrl,\n} from '@elizaos/core';\nimport { v4 } from 'uuid';\n\nimport * as actions from './actions/index.ts';\nimport * as evaluators from './evaluators/index.ts';\nimport * as providers from './providers/index.ts';\n\nimport { TaskService } from './services/task.ts';\n\nexport * from './actions/index.ts';\nexport * from './evaluators/index.ts';\nexport * from './providers/index.ts';\n\n/**\n * Represents media data containing a buffer of data and the media type.\n * @typedef {Object} MediaData\n * @property {Buffer} data - The buffer of data.\n * @property {string} mediaType - The type of media.\n */\ntype MediaData = {\n  data: Buffer;\n  mediaType: string;\n};\n\nconst latestResponseIds = new Map<string, Map<string, string>>();\n\n/**\n * Escapes special characters in a string to make it JSON-safe.\n */\n/* // Removing JSON specific helpers\nfunction escapeForJson(input: string): string {\n  return input\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\"/g, '\\\\\"')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/```/g, '\\\\`\\\\`\\\\`');\n}\n\nfunction sanitizeJson(rawJson: string): string {\n  try {\n    // Try parsing directly\n    JSON.parse(rawJson);\n    return rawJson; // Already valid\n  } catch {\n    // Continue to sanitization\n  }\n\n  // first, replace all newlines with \\n\n  const sanitized = rawJson\n    .replace(/\\n/g, '\\\\n')\n\n    // then, replace all backticks with \\\\\\`\n    .replace(/`/g, '\\\\\\`');\n\n  // Regex to find and escape the \"text\" field\n  const fixed = sanitized.replace(/\"text\"\\s*:\\s*\"([\\s\\S]*?)\"\\s*,\\s*\"simple\"/, (_match, group) => {\n    const escapedText = escapeForJson(group);\n    return `\"text\": \"${escapedText}\", \"simple\"`;\n  });\n\n  // Validate that the result is actually parseable\n  try {\n    JSON.parse(fixed);\n    return fixed;\n  } catch (e) {\n    throw new Error(`Failed to sanitize JSON: ${e.message}`);\n  }\n}\n*/\n\n/**\n * Fetches media data from a list of attachments, supporting both HTTP URLs and local file paths.\n *\n * @param attachments Array of Media objects containing URLs or file paths to fetch media from\n * @returns Promise that resolves with an array of MediaData objects containing the fetched media data and content type\n */\n/**\n * Fetches media data from given attachments.\n * @param {Media[]} attachments - Array of Media objects to fetch data from.\n * @returns {Promise<MediaData[]>} - A Promise that resolves with an array of MediaData objects.\n */\nexport async function fetchMediaData(attachments: Media[]): Promise<MediaData[]> {\n  return Promise.all(\n    attachments.map(async (attachment: Media) => {\n      if (/^(http|https):\\/\\//.test(attachment.url)) {\n        // Handle HTTP URLs\n        const response = await fetch(attachment.url);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch file: ${attachment.url}`);\n        }\n        const mediaBuffer = Buffer.from(await response.arrayBuffer());\n        const mediaType = attachment.contentType || 'image/png';\n        return { data: mediaBuffer, mediaType };\n      }\n      // if (fs.existsSync(attachment.url)) {\n      //   // Handle local file paths\n      //   const mediaBuffer = await fs.promises.readFile(path.resolve(attachment.url));\n      //   const mediaType = attachment.contentType || 'image/png';\n      //   return { data: mediaBuffer, mediaType };\n      // }\n      throw new Error(`File not found: ${attachment.url}. Make sure the path is correct.`);\n    })\n  );\n}\n\n/**\n * Processes attachments by generating descriptions for supported media types.\n * Currently supports image description generation.\n *\n * @param {Media[]} attachments - Array of attachments to process\n * @param {IAgentRuntime} runtime - The agent runtime for accessing AI models\n * @returns {Promise<Media[]>} - Returns a new array of processed attachments with added description, title, and text properties\n */\nexport async function processAttachments(\n  attachments: Media[],\n  runtime: IAgentRuntime\n): Promise<Media[]> {\n  if (!attachments || attachments.length === 0) {\n    return [];\n  }\n  logger.debug(`[Bootstrap] Processing ${attachments.length} attachment(s)`);\n\n  const processedAttachments: Media[] = [];\n\n  for (const attachment of attachments) {\n    try {\n      // Start with the original attachment\n      const processedAttachment: Media = { ...attachment };\n\n      const isRemote = /^(http|https):\\/\\//.test(attachment.url);\n      const url = isRemote ? attachment.url : getLocalServerUrl(attachment.url);\n      // Only process images that don't already have descriptions\n      if (attachment.contentType === ContentType.IMAGE && !attachment.description) {\n        logger.debug(`[Bootstrap] Generating description for image: ${attachment.url}`);\n\n        let imageUrl = url;\n\n        if (!isRemote) {\n          // Only convert local/internal media to base64\n          const res = await fetch(url);\n          if (!res.ok) throw new Error(`Failed to fetch image: ${res.statusText}`);\n\n          const arrayBuffer = await res.arrayBuffer();\n          const buffer = Buffer.from(arrayBuffer);\n          const contentType = res.headers.get('content-type') || 'application/octet-stream';\n          imageUrl = `data:${contentType};base64,${buffer.toString('base64')}`;\n        }\n\n        try {\n          const response = await runtime.useModel(ModelType.IMAGE_DESCRIPTION, {\n            prompt: imageDescriptionTemplate,\n            imageUrl,\n          });\n\n          if (typeof response === 'string') {\n            // Parse XML response\n            const parsedXml = parseKeyValueXml(response);\n\n            if (parsedXml?.description && parsedXml?.text) {\n              processedAttachment.description = parsedXml.description;\n              processedAttachment.title = parsedXml.title || 'Image';\n              processedAttachment.text = parsedXml.text;\n\n              logger.debug(\n                `[Bootstrap] Generated description: ${processedAttachment.description?.substring(0, 100)}...`\n              );\n            } else {\n              logger.warn(`[Bootstrap] Failed to parse XML response for image description`);\n            }\n          } else if (response && typeof response === 'object' && 'description' in response) {\n            // Handle object responses for backwards compatibility\n            processedAttachment.description = response.description;\n            processedAttachment.title = response.title || 'Image';\n            processedAttachment.text = response.description;\n\n            logger.debug(\n              `[Bootstrap] Generated description: ${processedAttachment.description?.substring(0, 100)}...`\n            );\n          } else {\n            logger.warn(`[Bootstrap] Unexpected response format for image description`);\n          }\n        } catch (error) {\n          logger.error(`[Bootstrap] Error generating image description:`, error);\n          // Continue processing without description\n        }\n      } else if (attachment.contentType === ContentType.DOCUMENT && !attachment.text) {\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(`Failed to fetch document: ${res.statusText}`);\n\n        const contentType = res.headers.get('content-type') || '';\n        const isPlainText = contentType.startsWith('text/plain');\n\n        if (isPlainText) {\n          logger.debug(`[Bootstrap] Processing plain text document: ${attachment.url}`);\n\n          const textContent = await res.text();\n          processedAttachment.text = textContent;\n          processedAttachment.title = processedAttachment.title || 'Text File';\n\n          logger.debug(\n            `[Bootstrap] Extracted text content (first 100 chars): ${processedAttachment.text?.substring(0, 100)}...`\n          );\n        } else {\n          logger.warn(`[Bootstrap] Skipping non-plain-text document: ${contentType}`);\n        }\n      }\n\n      processedAttachments.push(processedAttachment);\n    } catch (error) {\n      logger.error(`[Bootstrap] Failed to process attachment ${attachment.url}:`, error);\n      // Add the original attachment if processing fails\n      processedAttachments.push(attachment);\n    }\n  }\n\n  return processedAttachments;\n}\n\n/**\n * Determines whether to skip the shouldRespond logic based on room type and message source.\n * Supports both default values and runtime-configurable overrides via env settings.\n */\nexport function shouldBypassShouldRespond(\n  runtime: IAgentRuntime,\n  room?: Room,\n  source?: string\n): boolean {\n  if (!room) return false;\n\n  function normalizeEnvList(value: unknown): string[] {\n    if (!value || typeof value !== 'string') return [];\n\n    const cleaned = value.trim().replace(/^\\[|\\]$/g, '');\n    return cleaned\n      .split(',')\n      .map((v) => v.trim())\n      .filter(Boolean);\n  }\n\n  const defaultBypassTypes = [\n    ChannelType.DM,\n    ChannelType.VOICE_DM,\n    ChannelType.SELF,\n    ChannelType.API,\n  ];\n\n  const defaultBypassSources = ['client_chat'];\n\n  const bypassTypesSetting = normalizeEnvList(runtime.getSetting('SHOULD_RESPOND_BYPASS_TYPES'));\n  const bypassSourcesSetting = normalizeEnvList(\n    runtime.getSetting('SHOULD_RESPOND_BYPASS_SOURCES')\n  );\n\n  const bypassTypes = new Set(\n    [...defaultBypassTypes.map((t) => t.toString()), ...bypassTypesSetting].map((s: string) =>\n      s.trim().toLowerCase()\n    )\n  );\n\n  const bypassSources = [...defaultBypassSources, ...bypassSourcesSetting].map((s: string) =>\n    s.trim().toLowerCase()\n  );\n\n  const roomType = room.type?.toString().toLowerCase();\n  const sourceStr = source?.toLowerCase() || '';\n\n  return bypassTypes.has(roomType) || bypassSources.some((pattern) => sourceStr.includes(pattern));\n}\n\n/**\n * Handles incoming messages and generates responses based on the provided runtime and message information.\n *\n * @param {MessageReceivedHandlerParams} params - The parameters needed for message handling, including runtime, message, and callback.\n * @returns {Promise<void>} - A promise that resolves once the message handling and response generation is complete.\n */\nconst messageReceivedHandler = async ({\n  runtime,\n  message,\n  callback,\n  onComplete,\n}: MessageReceivedHandlerParams): Promise<void> => {\n  // Set up timeout monitoring\n  const timeoutDuration = 60 * 60 * 1000; // 1 hour\n  let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n  try {\n    logger.info(`[Bootstrap] Message received from ${message.entityId} in room ${message.roomId}`);\n    // Generate a new response ID\n    const responseId = v4();\n    // Get or create the agent-specific map\n    if (!latestResponseIds.has(runtime.agentId)) {\n      latestResponseIds.set(runtime.agentId, new Map<string, string>());\n    }\n    const agentResponses = latestResponseIds.get(runtime.agentId);\n    if (!agentResponses) {\n      throw new Error('Agent responses map not found');\n    }\n\n    // Set this as the latest response ID for this agent+room\n    agentResponses.set(message.roomId, responseId);\n\n    // Use runtime's run tracking for this message processing\n    const runId = runtime.startRun();\n    const startTime = Date.now();\n\n    // Emit run started event\n    await runtime.emitEvent(EventType.RUN_STARTED, {\n      runtime,\n      runId,\n      messageId: message.id,\n      roomId: message.roomId,\n      entityId: message.entityId,\n      startTime,\n      status: 'started',\n      source: 'messageHandler',\n    });\n\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      timeoutId = setTimeout(async () => {\n        await runtime.emitEvent(EventType.RUN_TIMEOUT, {\n          runtime,\n          runId,\n          messageId: message.id,\n          roomId: message.roomId,\n          entityId: message.entityId,\n          startTime,\n          status: 'timeout',\n          endTime: Date.now(),\n          duration: Date.now() - startTime,\n          error: 'Run exceeded 60 minute timeout',\n          source: 'messageHandler',\n        });\n        reject(new Error('Run exceeded 60 minute timeout'));\n      }, timeoutDuration);\n    });\n\n    const processingPromise = (async () => {\n      try {\n        if (message.entityId === runtime.agentId) {\n          logger.debug(`[Bootstrap] Skipping message from self (${runtime.agentId})`);\n          throw new Error('Message is from the agent itself');\n        }\n\n        logger.debug(\n          `[Bootstrap] Processing message: ${truncateToCompleteSentence(message.content.text || '', 50)}...`\n        );\n\n        // First, save the incoming message\n        logger.debug('[Bootstrap] Saving message to memory and embeddings');\n        await Promise.all([\n          runtime.addEmbeddingToMemory(message),\n          runtime.createMemory(message, 'messages'),\n        ]);\n\n        const agentUserState = await runtime.getParticipantUserState(\n          message.roomId,\n          runtime.agentId\n        );\n\n        if (\n          agentUserState === 'MUTED' &&\n          !message.content.text?.toLowerCase().includes(runtime.character.name.toLowerCase())\n        ) {\n          logger.debug(`[Bootstrap] Ignoring muted room ${message.roomId}`);\n          return;\n        }\n\n        let state = await runtime.composeState(\n          message,\n          ['ANXIETY', 'SHOULD_RESPOND', 'ENTITIES', 'CHARACTER', 'RECENT_MESSAGES', 'ACTIONS'],\n          true\n        );\n\n        // Skip shouldRespond check for DM and VOICE_DM channels\n        const room = await runtime.getRoom(message.roomId);\n\n        const shouldSkipShouldRespond = shouldBypassShouldRespond(\n          runtime,\n          room ?? undefined,\n          message.content.source\n        );\n\n        if (message.content.attachments && message.content.attachments.length > 0) {\n          message.content.attachments = await processAttachments(\n            message.content.attachments,\n            runtime\n          );\n          if (message.id) {\n            await runtime.updateMemory({\n              id: message.id,\n              content: message.content,\n            });\n          }\n        }\n\n        let shouldRespond = true;\n\n        // Handle shouldRespond\n        if (!shouldSkipShouldRespond) {\n          const shouldRespondPrompt = composePromptFromState({\n            state,\n            template: runtime.character.templates?.shouldRespondTemplate || shouldRespondTemplate,\n          });\n\n          logger.debug(\n            `[Bootstrap] Evaluating response for ${runtime.character.name}\\nPrompt: ${shouldRespondPrompt}`\n          );\n\n          const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n            prompt: shouldRespondPrompt,\n          });\n\n          logger.debug(\n            `[Bootstrap] Response evaluation for ${runtime.character.name}:\\n${response}`\n          );\n          logger.debug(`[Bootstrap] Response type: ${typeof response}`);\n\n          // Try to preprocess response by removing code blocks markers if present\n          // let processedResponse = response.replace('```json', '').replaceAll('```', '').trim(); // No longer needed for XML\n\n          const responseObject = parseKeyValueXml(response);\n          logger.debug('[Bootstrap] Parsed response:', responseObject);\n\n          // If an action is provided, the agent intends to respond in some way\n          // Only exclude explicit non-response actions\n          const nonResponseActions = ['IGNORE', 'NONE'];\n          shouldRespond =\n            responseObject?.action &&\n            !nonResponseActions.includes(responseObject.action.toUpperCase());\n        } else {\n          logger.debug(\n            `[Bootstrap] Skipping shouldRespond check for ${runtime.character.name} because ${room?.type} ${room?.source}`\n          );\n          shouldRespond = true;\n        }\n\n        let responseMessages: Memory[] = [];\n\n        console.log('shouldRespond is', shouldRespond);\n        console.log('shouldSkipShouldRespond', shouldSkipShouldRespond);\n\n        if (shouldRespond) {\n          state = await runtime.composeState(message, ['ACTIONS']);\n          if (!state.values.actionNames) {\n            logger.warn('actionNames data missing from state, even though it was requested');\n          }\n\n          const prompt = composePromptFromState({\n            state,\n            template: runtime.character.templates?.messageHandlerTemplate || messageHandlerTemplate,\n          });\n\n          let responseContent: Content | null = null;\n\n          // Retry if missing required fields\n          let retries = 0;\n          const maxRetries = 3;\n\n          while (retries < maxRetries && (!responseContent?.thought || !responseContent?.actions)) {\n            let response = await runtime.useModel(ModelType.TEXT_LARGE, {\n              prompt,\n            });\n\n            logger.debug('[Bootstrap] *** Raw LLM Response ***\\n', response);\n\n            // Attempt to parse the XML response\n            const parsedXml = parseKeyValueXml(response);\n            logger.debug('[Bootstrap] *** Parsed XML Content ***\\n', parsedXml);\n\n            // Map parsed XML to Content type, handling potential missing fields\n            if (parsedXml) {\n              responseContent = {\n                ...parsedXml,\n                thought: parsedXml.thought || '',\n                actions: parsedXml.actions || ['IGNORE'],\n                providers: parsedXml.providers || [],\n                text: parsedXml.text || '',\n                simple: parsedXml.simple || false,\n              };\n            } else {\n              responseContent = null;\n            }\n\n            retries++;\n            if (!responseContent?.thought || !responseContent?.actions) {\n              logger.warn(\n                '[Bootstrap] *** Missing required fields (thought or actions), retrying... ***\\n',\n                response,\n                parsedXml,\n                responseContent\n              );\n            }\n          }\n\n          // Check if this is still the latest response ID for this agent+room\n          const currentResponseId = agentResponses.get(message.roomId);\n          if (currentResponseId !== responseId) {\n            logger.info(\n              `Response discarded - newer message being processed for agent: ${runtime.agentId}, room: ${message.roomId}`\n            );\n            return;\n          }\n\n          if (responseContent && message.id) {\n            responseContent.inReplyTo = createUniqueUuid(runtime, message.id);\n\n            // --- LLM IGNORE/REPLY ambiguity handling ---\n            // Sometimes the LLM outputs actions like [\"REPLY\", \"IGNORE\"], which breaks isSimple detection\n            // and triggers unnecessary large LLM calls. We clarify intent here:\n            // - If IGNORE is present with other actions:\n            //    - If text is empty, we assume the LLM intended to IGNORE and drop all other actions.\n            //    - If text is present, we assume the LLM intended to REPLY and remove IGNORE from actions.\n            // This ensures consistent, clear behavior and preserves reply speed optimizations.\n            if (responseContent.actions && responseContent.actions.length > 1) {\n              // Helper function to safely check if an action is IGNORE\n              const isIgnoreAction = (action: unknown): boolean => {\n                return typeof action === 'string' && action.toUpperCase() === 'IGNORE';\n              };\n\n              // Check if any action is IGNORE\n              const hasIgnoreAction = responseContent.actions.some(isIgnoreAction);\n\n              if (hasIgnoreAction) {\n                if (!responseContent.text || responseContent.text.trim() === '') {\n                  // No text, truly meant to IGNORE\n                  responseContent.actions = ['IGNORE'];\n                } else {\n                  // Text present, LLM intended to reply, remove IGNORE\n                  const filteredActions = responseContent.actions.filter(\n                    (action) => !isIgnoreAction(action)\n                  );\n\n                  // Ensure we don't end up with an empty actions array when text is present\n                  // If all actions were IGNORE, default to REPLY\n                  if (filteredActions.length === 0) {\n                    responseContent.actions = ['REPLY'];\n                  } else {\n                    responseContent.actions = filteredActions;\n                  }\n                }\n              }\n            }\n\n            // Automatically determine if response is simple based on providers and actions\n            // Simple = REPLY action with no providers used\n            const isSimple =\n              responseContent.actions?.length === 1 &&\n              typeof responseContent.actions[0] === 'string' &&\n              responseContent.actions[0].toUpperCase() === 'REPLY' &&\n              (!responseContent.providers || responseContent.providers.length === 0);\n\n            responseContent.simple = isSimple;\n\n            const responseMessage = {\n              id: asUUID(v4()),\n              entityId: runtime.agentId,\n              agentId: runtime.agentId,\n              content: responseContent,\n              roomId: message.roomId,\n              createdAt: Date.now(),\n            };\n\n            responseMessages = [responseMessage];\n          }\n\n          // Clean up the response ID\n          agentResponses.delete(message.roomId);\n          if (agentResponses.size === 0) {\n            latestResponseIds.delete(runtime.agentId);\n          }\n\n          if (responseContent?.providers?.length && responseContent?.providers?.length > 0) {\n            state = await runtime.composeState(message, responseContent?.providers || []);\n          }\n\n          if (responseContent && responseContent.simple && responseContent.text) {\n            // Log provider usage for simple responses\n            if (responseContent.providers && responseContent.providers.length > 0) {\n              logger.debug('[Bootstrap] Simple response used providers', responseContent.providers);\n            }\n\n            // without actions there can't be more than one message\n            await callback(responseContent);\n          } else {\n            await runtime.processActions(message, responseMessages, state, callback);\n          }\n          await runtime.evaluate(message, state, shouldRespond, callback, responseMessages);\n        } else {\n          // Handle the case where the agent decided not to respond\n          logger.debug('[Bootstrap] Agent decided not to respond (shouldRespond is false).');\n\n          // Check if we still have the latest response ID\n          const currentResponseId = agentResponses.get(message.roomId);\n          if (currentResponseId !== responseId) {\n            logger.info(\n              `Ignore response discarded - newer message being processed for agent: ${runtime.agentId}, room: ${message.roomId}`\n            );\n            return; // Stop processing if a newer message took over\n          }\n\n          if (!message.id) {\n            logger.error('[Bootstrap] Message ID is missing, cannot create ignore response.');\n            return;\n          }\n\n          // Construct a minimal content object indicating ignore, include a generic thought\n          const ignoreContent: Content = {\n            thought: 'Agent decided not to respond to this message.',\n            actions: ['IGNORE'],\n            simple: true, // Treat it as simple for callback purposes\n            inReplyTo: createUniqueUuid(runtime, message.id), // Reference original message\n          };\n\n          // Call the callback directly with the ignore content\n          await callback(ignoreContent);\n\n          // Also save this ignore action/thought to memory\n          const ignoreMemory = {\n            id: asUUID(v4()),\n            entityId: runtime.agentId,\n            agentId: runtime.agentId,\n            content: ignoreContent,\n            roomId: message.roomId,\n            createdAt: Date.now(),\n          };\n          await runtime.createMemory(ignoreMemory, 'messages');\n          logger.debug('[Bootstrap] Saved ignore response to memory', {\n            memoryId: ignoreMemory.id,\n          });\n\n          // Clean up the response ID since we handled it\n          agentResponses.delete(message.roomId);\n          if (agentResponses.size === 0) {\n            latestResponseIds.delete(runtime.agentId);\n          }\n\n          // Optionally, evaluate the decision to ignore (if relevant evaluators exist)\n          // await runtime.evaluate(message, state, shouldRespond, callback, []);\n        }\n\n        // Emit run ended event on successful completion\n        await runtime.emitEvent(EventType.RUN_ENDED, {\n          runtime,\n          runId,\n          messageId: message.id,\n          roomId: message.roomId,\n          entityId: message.entityId,\n          startTime,\n          status: 'completed',\n          endTime: Date.now(),\n          duration: Date.now() - startTime,\n          source: 'messageHandler',\n        });\n      } catch (error: any) {\n        console.error('error is', error);\n        // Emit run ended event with error\n        await runtime.emitEvent(EventType.RUN_ENDED, {\n          runtime,\n          runId,\n          messageId: message.id,\n          roomId: message.roomId,\n          entityId: message.entityId,\n          startTime,\n          status: 'error',\n          endTime: Date.now(),\n          duration: Date.now() - startTime,\n          error: error.message,\n          source: 'messageHandler',\n        });\n      }\n    })();\n\n    await Promise.race([processingPromise, timeoutPromise]);\n  } finally {\n    clearTimeout(timeoutId);\n    onComplete?.();\n  }\n};\n\n/**\n * Handles the receipt of a reaction message and creates a memory in the designated memory manager.\n *\n * @param {Object} params - The parameters for the function.\n * @param {IAgentRuntime} params.runtime - The agent runtime object.\n * @param {Memory} params.message - The reaction message to be stored in memory.\n * @returns {void}\n */\nconst reactionReceivedHandler = async ({\n  runtime,\n  message,\n}: {\n  runtime: IAgentRuntime;\n  message: Memory;\n}) => {\n  try {\n    await runtime.createMemory(message, 'messages');\n  } catch (error: any) {\n    if (error.code === '23505') {\n      logger.warn('[Bootstrap] Duplicate reaction memory, skipping');\n      return;\n    }\n    logger.error('[Bootstrap] Error in reaction handler:', error);\n  }\n};\n\n/**\n * Handles message deletion events by removing the corresponding memory from the agent's memory store.\n *\n * @param {Object} params - The parameters for the function.\n * @param {IAgentRuntime} params.runtime - The agent runtime object.\n * @param {Memory} params.message - The message memory that was deleted.\n * @returns {void}\n */\nconst messageDeletedHandler = async ({\n  runtime,\n  message,\n}: {\n  runtime: IAgentRuntime;\n  message: Memory;\n}) => {\n  try {\n    if (!message.id) {\n      logger.error('[Bootstrap] Cannot delete memory: message ID is missing');\n      return;\n    }\n\n    logger.info('[Bootstrap] Deleting memory for message', message.id, 'from room', message.roomId);\n    await runtime.deleteMemory(message.id);\n    logger.debug('[Bootstrap] Successfully deleted memory for message', message.id);\n  } catch (error: unknown) {\n    logger.error('[Bootstrap] Error in message deleted handler:', error);\n  }\n};\n\n/**\n * Handles channel cleared events by removing all message memories from the specified room.\n *\n * @param {Object} params - The parameters for the function.\n * @param {IAgentRuntime} params.runtime - The agent runtime object.\n * @param {UUID} params.roomId - The room ID to clear message memories from.\n * @param {string} params.channelId - The original channel ID.\n * @param {number} params.memoryCount - Number of memories found.\n * @returns {void}\n */\nconst channelClearedHandler = async ({\n  runtime,\n  roomId,\n  channelId,\n  memoryCount,\n}: {\n  runtime: IAgentRuntime;\n  roomId: UUID;\n  channelId: string;\n  memoryCount: number;\n}) => {\n  try {\n    logger.info(\n      `[Bootstrap] Clearing ${memoryCount} message memories from channel ${channelId} -> room ${roomId}`\n    );\n\n    // Get all message memories for this room\n    const memories = await runtime.getMemoriesByRoomIds({\n      tableName: 'messages',\n      roomIds: [roomId],\n    });\n\n    // Delete each message memory\n    let deletedCount = 0;\n    for (const memory of memories) {\n      if (memory.id) {\n        try {\n          await runtime.deleteMemory(memory.id);\n          deletedCount++;\n        } catch (error) {\n          logger.warn(`[Bootstrap] Failed to delete message memory ${memory.id}:`, error);\n        }\n      }\n    }\n\n    logger.info(\n      `[Bootstrap] Successfully cleared ${deletedCount}/${memories.length} message memories from channel ${channelId}`\n    );\n  } catch (error: unknown) {\n    logger.error('[Bootstrap] Error in channel cleared handler:', error);\n  }\n};\n\n/**\n * Handles the generation of a post (like a Tweet) and creates a memory for it.\n *\n * @param {Object} params - The parameters for the function.\n * @param {IAgentRuntime} params.runtime - The agent runtime object.\n * @param {Memory} params.message - The post message to be processed.\n * @param {HandlerCallback} params.callback - The callback function to execute after processing.\n * @returns {Promise<void>}\n */\nconst postGeneratedHandler = async ({\n  runtime,\n  callback,\n  worldId,\n  userId,\n  roomId,\n  source,\n}: InvokePayload) => {\n  logger.info('[Bootstrap] Generating new post...');\n  // Ensure world exists first\n  await runtime.ensureWorldExists({\n    id: worldId,\n    name: `${runtime.character.name}'s Feed`,\n    agentId: runtime.agentId,\n    serverId: userId,\n  });\n\n  // Ensure timeline room exists\n  await runtime.ensureRoomExists({\n    id: roomId,\n    name: `${runtime.character.name}'s Feed`,\n    source,\n    type: ChannelType.FEED,\n    channelId: `${userId}-home`,\n    serverId: userId,\n    worldId: worldId,\n  });\n\n  const message = {\n    id: createUniqueUuid(runtime, `tweet-${Date.now()}`) as UUID,\n    entityId: runtime.agentId,\n    agentId: runtime.agentId,\n    roomId: roomId,\n    content: {},\n    metadata: {\n      entityName: runtime.character.name,\n      type: 'message',\n    },\n  };\n\n  // generate thought of which providers to use using messageHandlerTemplate\n\n  // Compose state with relevant context for tweet generation\n  let state = await runtime.composeState(message, [\n    'PROVIDERS',\n    'CHARACTER',\n    'RECENT_MESSAGES',\n    'ENTITIES',\n  ]);\n\n  // get twitterUserName\n  const entity = await runtime.getEntityById(runtime.agentId);\n  if ((entity?.metadata?.twitter as any)?.userName || entity?.metadata?.userName) {\n    state.values.twitterUserName =\n      (entity?.metadata?.twitter as any)?.userName || entity?.metadata?.userName;\n  }\n\n  const prompt = composePromptFromState({\n    state,\n    template: runtime.character.templates?.messageHandlerTemplate || messageHandlerTemplate,\n  });\n\n  let responseContent: Content | null = null;\n\n  // Retry if missing required fields\n  let retries = 0;\n  const maxRetries = 3;\n  while (retries < maxRetries && (!responseContent?.thought || !responseContent?.actions)) {\n    const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n      prompt,\n    });\n\n    console.log('prompt is', prompt);\n    console.log('response is', response);\n\n    // Parse XML\n    const parsedXml = parseKeyValueXml(response);\n    if (parsedXml) {\n      responseContent = {\n        thought: parsedXml.thought || '',\n        actions: parsedXml.actions || ['IGNORE'],\n        providers: parsedXml.providers || [],\n        text: parsedXml.text || '',\n        simple: parsedXml.simple || false,\n      };\n    } else {\n      responseContent = null;\n    }\n\n    retries++;\n    if (!responseContent?.thought || !responseContent?.actions) {\n      logger.warn(\n        '[Bootstrap] *** Missing required fields, retrying... ***\\n',\n        response,\n        parsedXml,\n        responseContent\n      );\n    }\n  }\n\n  // update stats with correct providers\n  state = await runtime.composeState(message, responseContent?.providers);\n\n  // Generate prompt for tweet content\n  const postPrompt = composePromptFromState({\n    state,\n    template: runtime.character.templates?.postCreationTemplate || postCreationTemplate,\n  });\n\n  // Use TEXT_LARGE model as we expect structured XML text, not a JSON object\n  const xmlResponseText = await runtime.useModel(ModelType.TEXT_LARGE, {\n    prompt: postPrompt,\n  });\n\n  // Parse the XML response\n  const parsedXmlResponse = parseKeyValueXml(xmlResponseText);\n\n  if (!parsedXmlResponse) {\n    logger.error(\n      '[Bootstrap] Failed to parse XML response for post creation. Raw response:',\n      xmlResponseText\n    );\n    // Handle the error appropriately, maybe retry or return an error state\n    return;\n  }\n\n  /**\n   * Cleans up a tweet text by removing quotes and fixing newlines\n   */\n  function cleanupPostText(text: string): string {\n    // Remove quotes\n    let cleanedText = text.replace(/^['\"](.*)['\"]$/, '$1');\n    // Fix newlines\n    cleanedText = cleanedText.replaceAll(/\\\\n/g, '\\n\\n');\n    cleanedText = cleanedText.replace(/([^\\n])\\n([^\\n])/g, '$1\\n\\n$2');\n\n    return cleanedText;\n  }\n\n  // Cleanup the tweet text\n  const cleanedText = cleanupPostText(parsedXmlResponse.post || '');\n\n  // Prepare media if included\n  // const mediaData: MediaData[] = [];\n  // if (jsonResponse.imagePrompt) {\n  // \tconst images = await runtime.useModel(ModelType.IMAGE, {\n  // \t\tprompt: jsonResponse.imagePrompt,\n  // \t\toutput: \"no-schema\",\n  // \t});\n  // \ttry {\n  // \t\t// Convert image prompt to Media format for fetchMediaData\n  // \t\tconst imagePromptMedia: any[] = images\n\n  // \t\t// Fetch media using the utility function\n  // \t\tconst fetchedMedia = await fetchMediaData(imagePromptMedia);\n  // \t\tmediaData.push(...fetchedMedia);\n  // \t} catch (error) {\n  // \t\tlogger.error(\"Error fetching media for tweet:\", error);\n  // \t}\n  // }\n\n  // have we posted it before?\n  const RM = state.providerData?.find((pd) => pd.providerName === 'RECENT_MESSAGES');\n  if (RM) {\n    for (const m of RM.data.recentMessages) {\n      if (cleanedText === m.content.text) {\n        logger.log('[Bootstrap] Already recently posted that, retrying', cleanedText);\n        postGeneratedHandler({\n          runtime,\n          callback,\n          worldId,\n          userId,\n          roomId,\n          source,\n        });\n        return; // don't call callbacks\n      }\n    }\n  }\n\n  // GPT 3.5/4: /(i\\s+do\\s+not|i'?m\\s+not)\\s+(feel\\s+)?comfortable\\s+generating\\s+that\\s+type\\s+of\\s+content|(inappropriate|explicit|offensive|communicate\\s+respectfully|aim\\s+to\\s+(be\\s+)?helpful)/i\n  const oaiRefusalRegex =\n    /((i\\s+do\\s+not|i'm\\s+not)\\s+(feel\\s+)?comfortable\\s+generating\\s+that\\s+type\\s+of\\s+content)|(inappropriate|explicit|respectful|offensive|guidelines|aim\\s+to\\s+(be\\s+)?helpful|communicate\\s+respectfully)/i;\n  const anthropicRefusalRegex =\n    /(i'?m\\s+unable\\s+to\\s+help\\s+with\\s+that\\s+request|due\\s+to\\s+safety\\s+concerns|that\\s+may\\s+violate\\s+(our\\s+)?guidelines|provide\\s+helpful\\s+and\\s+safe\\s+responses|let'?s\\s+try\\s+a\\s+different\\s+direction|goes\\s+against\\s+(our\\s+)?use\\s+case\\s+policies|ensure\\s+safe\\s+and\\s+responsible\\s+use)/i;\n  const googleRefusalRegex =\n    /(i\\s+can'?t\\s+help\\s+with\\s+that|that\\s+goes\\s+against\\s+(our\\s+)?(policy|policies)|i'?m\\s+still\\s+learning|response\\s+must\\s+follow\\s+(usage|safety)\\s+policies|i'?ve\\s+been\\s+designed\\s+to\\s+avoid\\s+that)/i;\n  //const cohereRefusalRegex = /(request\\s+cannot\\s+be\\s+processed|violates\\s+(our\\s+)?content\\s+policy|not\\s+permitted\\s+by\\s+usage\\s+restrictions)/i\n  const generalRefusalRegex =\n    /(response\\s+was\\s+withheld|content\\s+was\\s+filtered|this\\s+request\\s+cannot\\s+be\\s+completed|violates\\s+our\\s+safety\\s+policy|content\\s+is\\s+not\\s+available)/i;\n\n  if (\n    oaiRefusalRegex.test(cleanedText) ||\n    anthropicRefusalRegex.test(cleanedText) ||\n    googleRefusalRegex.test(cleanedText) ||\n    generalRefusalRegex.test(cleanedText)\n  ) {\n    logger.log('[Bootstrap] Got prompt moderation refusal, retrying', cleanedText);\n    postGeneratedHandler({\n      runtime,\n      callback,\n      worldId,\n      userId,\n      roomId,\n      source,\n    });\n    return; // don't call callbacks\n  }\n\n  // Create the response memory\n  const responseMessages = [\n    {\n      id: v4() as UUID,\n      entityId: runtime.agentId,\n      agentId: runtime.agentId,\n      content: {\n        text: cleanedText,\n        source,\n        channelType: ChannelType.FEED,\n        thought: parsedXmlResponse.thought || '',\n        type: 'post',\n      },\n      roomId: message.roomId,\n      createdAt: Date.now(),\n    },\n  ];\n\n  for (const message of responseMessages) {\n    await callback?.(message.content);\n  }\n\n  // Process the actions and execute the callback\n  // await runtime.processActions(message, responseMessages, state, callback);\n\n  // // Run any configured evaluators\n  // await runtime.evaluate(\n  // \tmessage,\n  // \tstate,\n  // \ttrue, // Post generation is always a \"responding\" scenario\n  // \tcallback,\n  // \tresponseMessages,\n  // );\n};\n\n/**\n * Syncs a single user into an entity\n */\n/**\n * Asynchronously sync a single user with the specified parameters.\n *\n * @param {UUID} entityId - The unique identifier for the entity.\n * @param {IAgentRuntime} runtime - The runtime environment for the agent.\n * @param {any} user - The user object to sync.\n * @param {string} serverId - The unique identifier for the server.\n * @param {string} channelId - The unique identifier for the channel.\n * @param {ChannelType} type - The type of channel.\n * @param {string} source - The source of the user data.\n * @returns {Promise<void>} A promise that resolves once the user is synced.\n */\nconst syncSingleUser = async (\n  entityId: UUID,\n  runtime: IAgentRuntime,\n  serverId: string,\n  channelId: string,\n  type: ChannelType,\n  source: string\n) => {\n  try {\n    const entity = await runtime.getEntityById(entityId);\n    logger.info(`[Bootstrap] Syncing user: ${entity?.metadata?.username || entityId}`);\n\n    // Ensure we're not using WORLD type and that we have a valid channelId\n    if (!channelId) {\n      logger.warn(`[Bootstrap] Cannot sync user ${entity?.id} without a valid channelId`);\n      return;\n    }\n\n    const roomId = createUniqueUuid(runtime, channelId);\n    const worldId = createUniqueUuid(runtime, serverId);\n\n    // Create world with ownership metadata for DM connections (onboarding)\n    const worldMetadata =\n      type === ChannelType.DM\n        ? {\n            ownership: {\n              ownerId: entityId,\n            },\n            roles: {\n              [entityId]: Role.OWNER,\n            },\n            settings: {}, // Initialize empty settings for onboarding\n          }\n        : undefined;\n\n    logger.info(\n      `[Bootstrap] syncSingleUser - type: ${type}, isDM: ${type === ChannelType.DM}, worldMetadata: ${JSON.stringify(worldMetadata)}`\n    );\n\n    await runtime.ensureConnection({\n      entityId,\n      roomId,\n      name: (entity?.metadata?.name || entity?.metadata?.username || `User${entityId}`) as\n        | undefined\n        | string,\n      source,\n      channelId,\n      serverId,\n      type,\n      worldId,\n      metadata: worldMetadata,\n    });\n\n    // Verify the world was created with proper metadata\n    try {\n      const createdWorld = await runtime.getWorld(worldId);\n      logger.info(\n        `[Bootstrap] Created world check - ID: ${worldId}, metadata: ${JSON.stringify(createdWorld?.metadata)}`\n      );\n    } catch (error) {\n      logger.error(`[Bootstrap] Failed to verify created world: ${error}`);\n    }\n\n    logger.success(`[Bootstrap] Successfully synced user: ${entity?.id}`);\n  } catch (error) {\n    logger.error(\n      `[Bootstrap] Error syncing user: ${error instanceof Error ? error.message : String(error)}`\n    );\n  }\n};\n\n/**\n * Handles standardized server data for both WORLD_JOINED and WORLD_CONNECTED events\n */\nconst handleServerSync = async ({\n  runtime,\n  world,\n  rooms,\n  entities,\n  source,\n  onComplete,\n}: WorldPayload) => {\n  logger.debug(`[Bootstrap] Handling server sync event for server: ${world.name}`);\n  try {\n    await runtime.ensureConnections(entities, rooms, source, world);\n    logger.debug(`Successfully synced standardized world structure for ${world.name}`);\n    onComplete?.();\n  } catch (error) {\n    logger.error(\n      `Error processing standardized server data: ${error instanceof Error ? error.message : String(error)}`\n    );\n  }\n};\n\n/**\n * Handles control messages for enabling or disabling UI elements in the frontend\n * @param {Object} params - Parameters for the handler\n * @param {IAgentRuntime} params.runtime - The runtime instance\n * @param {Object} params.message - The control message\n * @param {string} params.source - Source of the message\n */\nconst controlMessageHandler = async ({\n  runtime,\n  message,\n}: {\n  runtime: IAgentRuntime;\n  message: {\n    type: 'control';\n    payload: {\n      action: 'enable_input' | 'disable_input';\n      target?: string;\n    };\n    roomId: UUID;\n  };\n  source: string;\n}) => {\n  try {\n    logger.debug(\n      `[controlMessageHandler] Processing control message: ${message.payload.action} for room ${message.roomId}`\n    );\n\n    // Here we would use a WebSocket service to send the control message to the frontend\n    // This would typically be handled by a registered service with sendMessage capability\n\n    // Get any registered WebSocket service\n    const serviceNames = Array.from(runtime.getAllServices().keys()) as string[];\n    const websocketServiceName = serviceNames.find(\n      (name: string) =>\n        name.toLowerCase().includes('websocket') || name.toLowerCase().includes('socket')\n    );\n\n    if (websocketServiceName) {\n      const websocketService = runtime.getService(websocketServiceName);\n      if (websocketService && 'sendMessage' in websocketService) {\n        // Send the control message through the WebSocket service\n        await (websocketService as any).sendMessage({\n          type: 'controlMessage',\n          payload: {\n            action: message.payload.action,\n            target: message.payload.target,\n            roomId: message.roomId,\n          },\n        });\n\n        logger.debug(\n          `[controlMessageHandler] Control message ${message.payload.action} sent successfully`\n        );\n      } else {\n        logger.error('[controlMessageHandler] WebSocket service does not have sendMessage method');\n      }\n    } else {\n      logger.error('[controlMessageHandler] No WebSocket service found to send control message');\n    }\n  } catch (error) {\n    logger.error(`[controlMessageHandler] Error processing control message: ${error}`);\n  }\n};\n\nconst events = {\n  [EventType.MESSAGE_RECEIVED]: [\n    async (payload: MessagePayload) => {\n      if (!payload.callback) {\n        logger.error('No callback provided for message');\n        return;\n      }\n      await messageReceivedHandler({\n        runtime: payload.runtime,\n        message: payload.message,\n        callback: payload.callback,\n        onComplete: payload.onComplete,\n      });\n    },\n  ],\n\n  [EventType.VOICE_MESSAGE_RECEIVED]: [\n    async (payload: MessagePayload) => {\n      if (!payload.callback) {\n        logger.error('No callback provided for voice message');\n        return;\n      }\n      await messageReceivedHandler({\n        runtime: payload.runtime,\n        message: payload.message,\n        callback: payload.callback,\n        onComplete: payload.onComplete,\n      });\n    },\n  ],\n\n  [EventType.REACTION_RECEIVED]: [\n    async (payload: MessagePayload) => {\n      await reactionReceivedHandler({\n        runtime: payload.runtime,\n        message: payload.message,\n      });\n    },\n  ],\n\n  [EventType.POST_GENERATED]: [\n    async (payload: InvokePayload) => {\n      await postGeneratedHandler(payload);\n    },\n  ],\n\n  [EventType.MESSAGE_SENT]: [\n    async (payload: MessagePayload) => {\n      logger.debug(`[Bootstrap] Message sent: ${payload.message.content.text}`);\n    },\n  ],\n\n  [EventType.MESSAGE_DELETED]: [\n    async (payload: MessagePayload) => {\n      await messageDeletedHandler({\n        runtime: payload.runtime,\n        message: payload.message,\n      });\n    },\n  ],\n\n  [EventType.CHANNEL_CLEARED]: [\n    async (payload: EventPayload & { roomId: UUID; channelId: string; memoryCount: number }) => {\n      await channelClearedHandler({\n        runtime: payload.runtime,\n        roomId: payload.roomId,\n        channelId: payload.channelId,\n        memoryCount: payload.memoryCount,\n      });\n    },\n  ],\n\n  [EventType.WORLD_JOINED]: [\n    async (payload: WorldPayload) => {\n      await handleServerSync(payload);\n    },\n  ],\n\n  [EventType.WORLD_CONNECTED]: [\n    async (payload: WorldPayload) => {\n      await handleServerSync(payload);\n    },\n  ],\n\n  [EventType.ENTITY_JOINED]: [\n    async (payload: EntityPayload) => {\n      logger.debug(`[Bootstrap] ENTITY_JOINED event received for entity ${payload.entityId}`);\n\n      if (!payload.worldId) {\n        logger.error('[Bootstrap] No worldId provided for entity joined');\n        return;\n      }\n      if (!payload.roomId) {\n        logger.error('[Bootstrap] No roomId provided for entity joined');\n        return;\n      }\n      if (!payload.metadata?.type) {\n        logger.error('[Bootstrap] No type provided for entity joined');\n        return;\n      }\n\n      await syncSingleUser(\n        payload.entityId,\n        payload.runtime,\n        payload.worldId,\n        payload.roomId,\n        payload.metadata.type,\n        payload.source\n      );\n    },\n  ],\n\n  [EventType.ENTITY_LEFT]: [\n    async (payload: EntityPayload) => {\n      try {\n        // Update entity to inactive\n        const entity = await payload.runtime.getEntityById(payload.entityId);\n        if (entity) {\n          entity.metadata = {\n            ...entity.metadata,\n            status: 'INACTIVE',\n            leftAt: Date.now(),\n          };\n          await payload.runtime.updateEntity(entity);\n        }\n        logger.info(`[Bootstrap] User ${payload.entityId} left world ${payload.worldId}`);\n      } catch (error: any) {\n        logger.error(`[Bootstrap] Error handling user left: ${error.message}`);\n      }\n    },\n  ],\n\n  [EventType.ACTION_STARTED]: [\n    async (payload: ActionEventPayload) => {\n      logger.debug(`[Bootstrap] Action started: ${payload.actionName} (${payload.actionId})`);\n    },\n  ],\n\n  [EventType.ACTION_COMPLETED]: [\n    async (payload: ActionEventPayload) => {\n      const status = payload.error ? `failed: ${payload.error.message}` : 'completed';\n      logger.debug(`[Bootstrap] Action ${status}: ${payload.actionName} (${payload.actionId})`);\n    },\n  ],\n\n  [EventType.EVALUATOR_STARTED]: [\n    async (payload: EvaluatorEventPayload) => {\n      logger.debug(\n        `[Bootstrap] Evaluator started: ${payload.evaluatorName} (${payload.evaluatorId})`\n      );\n    },\n  ],\n\n  [EventType.EVALUATOR_COMPLETED]: [\n    async (payload: EvaluatorEventPayload) => {\n      const status = payload.error ? `failed: ${payload.error.message}` : 'completed';\n      logger.debug(\n        `[Bootstrap] Evaluator ${status}: ${payload.evaluatorName} (${payload.evaluatorId})`\n      );\n    },\n  ],\n\n  CONTROL_MESSAGE: [controlMessageHandler],\n};\n\nexport const bootstrapPlugin: Plugin = {\n  name: 'bootstrap',\n  description: 'Agent bootstrap with basic actions and evaluators',\n  actions: [\n    actions.replyAction,\n    actions.followRoomAction,\n    actions.unfollowRoomAction,\n    actions.ignoreAction,\n    actions.noneAction,\n    actions.muteRoomAction,\n    actions.unmuteRoomAction,\n    actions.sendMessageAction,\n    actions.updateEntityAction,\n    actions.choiceAction,\n    actions.updateRoleAction,\n    actions.updateSettingsAction,\n    actions.generateImageAction,\n  ],\n  // this is jank, these events are not valid\n  events: events as any as PluginEvents,\n  evaluators: [evaluators.reflectionEvaluator],\n  providers: [\n    providers.evaluatorsProvider,\n    providers.anxietyProvider,\n    providers.timeProvider,\n    providers.entitiesProvider,\n    providers.relationshipsProvider,\n    providers.choiceProvider,\n    providers.factsProvider,\n    providers.roleProvider,\n    providers.settingsProvider,\n    providers.capabilitiesProvider,\n    providers.attachmentsProvider,\n    providers.providersProvider,\n    providers.actionsProvider,\n    providers.actionStateProvider,\n    providers.characterProvider,\n    providers.recentMessagesProvider,\n    providers.worldProvider,\n  ],\n  services: [TaskService],\n};\n\nexport default bootstrapPlugin;\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","import { randomUUID } from 'crypto';\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import {\n  type Action,\n  type ActionExample,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type State,\n  ContentType,\n  parseKeyValueXml,\n} from '@elizaos/core';\nimport { v4 } from 'uuid';\n\n/**\n * Template for generating an image for the character using a prompt.\n *\n * @type {string}\n */\nconst imageGenerationTemplate = `# Task: Generate an image prompt for {{agentName}}.\n  {{providers}}\n  # Instructions:\n  Write a clear, concise, and visually descriptive prompt that should be used to generate an image representing {{agentName}}'s next action or visualization for the conversation.\n  \n  Your response should be formatted in XML like this:\n  <response>\n    <prompt>Your image generation prompt here</prompt>\n  </response>\n  \n  Your response should include the valid XML block and nothing else.`;\n\n/**\n * Represents an action that allows the agent to generate an image using a generated prompt.\n *\n * This action can be used in a chain where the agent needs to visualize or illustrate a concept, emotion, or scene.\n */\nexport const generateImageAction = {\n  name: 'GENERATE_IMAGE',\n  similes: ['DRAW', 'CREATE_IMAGE', 'RENDER_IMAGE', 'VISUALIZE'],\n  description:\n    'Generates an image based on a generated prompt reflecting the current conversation. Use GENERATE_IMAGE when the agent needs to visualize, illustrate, or demonstrate something visually for the user.',\n  validate: async (_runtime: IAgentRuntime) => {\n    return true;\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: any,\n    callback: HandlerCallback,\n    responses?: Memory[]\n  ) => {\n    const allProviders = responses?.flatMap((res) => res.content?.providers ?? []) ?? [];\n\n    state = await runtime.composeState(message, [...(allProviders ?? []), 'RECENT_MESSAGES']);\n\n    const prompt = composePromptFromState({\n      state,\n      template: runtime.character.templates?.imageGenerationTemplate || imageGenerationTemplate,\n    });\n\n    const promptResponse = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt,\n    });\n\n    // Parse XML response\n    const parsedXml = parseKeyValueXml(promptResponse);\n\n    const imagePrompt = parsedXml?.prompt || 'Unable to generate descriptive prompt for image';\n\n    const imageResponse = await runtime.useModel(ModelType.IMAGE, {\n      prompt: imagePrompt,\n    });\n\n    if (!imageResponse || imageResponse.length === 0 || !imageResponse[0]?.url) {\n      console.error('generateImageAction: Image generation failed - no valid response received', {\n        imageResponse,\n        imagePrompt,\n      });\n      return;\n    }\n\n    const imageUrl = imageResponse[0].url;\n\n    const responseContent = {\n      attachments: [\n        {\n          id: v4(),\n          url: imageUrl,\n          title: 'Generated Image',\n          contentType: ContentType.IMAGE,\n        },\n      ],\n      thought: `Generated an image based on: \"${imagePrompt}\"`,\n      actions: ['GENERATE_IMAGE'],\n      text: imagePrompt,\n    };\n\n    await callback(responseContent);\n\n    return true;\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you show me what a futuristic city looks like?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Sure, I'll create a futuristic city image for you. One moment...\",\n          actions: ['GENERATE_IMAGE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What does a neural network look like visually?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I’ll create a visualization of a neural network for you, one sec...',\n          actions: ['GENERATE_IMAGE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you visualize the feeling of calmness for me?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Creating an image to capture calmness for you, please wait a moment...',\n          actions: ['GENERATE_IMAGE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What does excitement look like as an image?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Let me generate an image that represents excitement for you, give me a second...',\n          actions: ['GENERATE_IMAGE'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  type Action,\n  type ActionExample,\n  composePrompt,\n  getUserServerRole,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  parseKeyValueXml,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Task: Extract selected task and option from user message\n *\n * Available Tasks:\n * {{#each tasks}}\n * Task ID: {{taskId}} - {{name}}\n * Available options:\n * {{#each options}}\n * - {{name}}: {{description}}\n * {{/each}}\n * - ABORT: Cancel this task\n * {{/each}}\n *\n * Recent Messages:\n * {{recentMessages}}\n *\n * Instructions:\n * 1. Review the user's message and identify which task and option they are selecting\n * 2. Match against the available tasks and their options, including ABORT\n * 3. Return the task ID (shortened UUID) and selected option name exactly as listed above\n * 4. If no clear selection is made, return null for both fields\n *\n * Return in XML format:\n * <response>\n *   <taskId>string_or_null</taskId>\n *   <selectedOption>OPTION_NAME_or_null</selectedOption>\n * </response>\n */\nconst optionExtractionTemplate = `# Task: Extract selected task and option from user message\n\n# Available Tasks:\n{{#each tasks}}\nTask ID: {{taskId}} - {{name}}\nAvailable options:\n{{#each options}}\n- {{name}}: {{description}}\n{{/each}}\n- ABORT: Cancel this task\n\n{{/each}}\n\n# Recent Messages:\n{{recentMessages}}\n\n# Instructions:\n1. Review the user's message and identify which task and option they are selecting\n2. Match against the available tasks and their options, including ABORT\n3. Return the task ID (shortened UUID) and selected option name exactly as listed above\n4. If no clear selection is made, return null for both fields\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nReturn in XML format:\n<response>\n  <taskId>string_or_null</taskId>\n  <selectedOption>OPTION_NAME_or_null</selectedOption>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n\n/**\n * Represents an action that allows selecting an option for a pending task that has multiple options.\n * @type {Action}\n * @property {string} name - The name of the action\n * @property {string[]} similes - Similar words or phrases for the action\n * @property {string} description - A brief description of the action\n * @property {Function} validate - Asynchronous function to validate the action\n * @property {Function} handler - Asynchronous function to handle the action\n * @property {ActionExample[][]} examples - Examples demonstrating the usage of the action\n */\nexport const choiceAction: Action = {\n  name: 'CHOOSE_OPTION',\n  similes: ['SELECT_OPTION', 'SELECT', 'PICK', 'CHOOSE'],\n  description: 'Selects an option for a pending task that has multiple options',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    if (!state) {\n      logger.error('State is required for validating the action');\n      throw new Error('State is required for validating the action');\n    }\n\n    const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n    if (!room || !room.serverId) {\n      return false;\n    }\n\n    const userRole = await getUserServerRole(runtime, message.entityId, room.serverId);\n\n    if (userRole !== 'OWNER' && userRole !== 'ADMIN') {\n      return false;\n    }\n\n    try {\n      // Get all tasks with options metadata\n      const pendingTasks = await runtime.getTasks({\n        roomId: message.roomId,\n        tags: ['AWAITING_CHOICE'],\n      });\n\n      const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n      const userRole = await getUserServerRole(runtime, message.entityId, room.serverId);\n\n      if (userRole !== 'OWNER' && userRole !== 'ADMIN') {\n        return false;\n      }\n\n      // Only validate if there are pending tasks with options\n      return (\n        pendingTasks &&\n        pendingTasks.length > 0 &&\n        pendingTasks.some((task) => task.metadata?.options)\n      );\n    } catch (error) {\n      logger.error('Error validating choice action:', error);\n      return false;\n    }\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state?: State,\n    _options?: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ): Promise<ActionResult> => {\n    const pendingTasks = await runtime.getTasks({\n      roomId: message.roomId,\n      tags: ['AWAITING_CHOICE'],\n    });\n\n    if (!pendingTasks?.length) {\n      return {\n        text: 'No pending tasks with options found',\n        values: {\n          success: false,\n          error: 'NO_PENDING_TASKS',\n        },\n        data: {\n          actionName: 'CHOOSE_OPTION',\n          error: 'No pending tasks with options found',\n        },\n        success: false,\n      };\n    }\n\n    const tasksWithOptions = pendingTasks.filter((task) => task.metadata?.options);\n\n    if (!tasksWithOptions.length) {\n      return {\n        text: 'No tasks currently have options to select from',\n        values: {\n          success: false,\n          error: 'NO_OPTIONS_AVAILABLE',\n        },\n        data: {\n          actionName: 'CHOOSE_OPTION',\n          error: 'No tasks currently have options to select from',\n        },\n        success: false,\n      };\n    }\n\n    // Format tasks with their options for the LLM, using shortened UUIDs\n    const formattedTasks = tasksWithOptions.map((task) => {\n      // Generate a short ID from the task UUID (first 8 characters should be unique enough)\n      const shortId = task.id?.substring(0, 8);\n\n      return {\n        taskId: shortId,\n        fullId: task.id,\n        name: task.name,\n        options: task.metadata?.options?.map((opt) => ({\n          name: typeof opt === 'string' ? opt : opt.name,\n          description: typeof opt === 'string' ? opt : opt.description || opt.name,\n        })),\n      };\n    });\n\n    // format tasks as a string\n    const tasksString = formattedTasks\n      .map((task) => {\n        return `Task ID: ${task.taskId} - ${task.name}\\nAvailable options:\\n${task.options?.map((opt) => `- ${opt.name}: ${opt.description}`).join('\\n')}`;\n      })\n      .join('\\n');\n\n    const prompt = composePrompt({\n      state: {\n        tasks: tasksString,\n        recentMessages: message.content.text || '',\n      },\n      template: optionExtractionTemplate,\n    });\n\n    const result = await runtime.useModel(ModelType.TEXT_SMALL, {\n      prompt,\n      stopSequences: [],\n    });\n\n    const parsed = parseKeyValueXml(result);\n    const { taskId, selectedOption } = parsed as any;\n\n    if (taskId && selectedOption) {\n      // Find the task by matching the shortened UUID\n      const taskMap = new Map(formattedTasks.map((task) => [task.taskId, task]));\n      const taskInfo = taskMap.get(taskId) as (typeof formattedTasks)[0] | undefined;\n\n      if (!taskInfo) {\n        await callback?.({\n          text: `Could not find a task matching ID: ${taskId}. Please try again.`,\n          actions: ['SELECT_OPTION_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: `Could not find task with ID: ${taskId}`,\n          values: {\n            success: false,\n            error: 'TASK_NOT_FOUND',\n            taskId,\n          },\n          data: {\n            actionName: 'CHOOSE_OPTION',\n            error: 'Task not found',\n            taskId,\n          },\n          success: false,\n        };\n      }\n\n      // Find the actual task using the full UUID\n      const selectedTask = tasksWithOptions.find((task) => task.id === taskInfo.fullId);\n\n      if (!selectedTask) {\n        await callback?.({\n          text: 'Error locating the selected task. Please try again.',\n          actions: ['SELECT_OPTION_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: 'Error locating the selected task',\n          values: {\n            success: false,\n            error: 'TASK_LOOKUP_ERROR',\n          },\n          data: {\n            actionName: 'CHOOSE_OPTION',\n            error: 'Failed to locate task',\n          },\n          success: false,\n        };\n      }\n\n      if (selectedOption === 'ABORT') {\n        if (!selectedTask?.id) {\n          await callback?.({\n            text: 'Error locating the selected task. Please try again.',\n            actions: ['SELECT_OPTION_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Error aborting task',\n            values: {\n              success: false,\n              error: 'ABORT_ERROR',\n            },\n            data: {\n              actionName: 'CHOOSE_OPTION',\n              error: 'Could not abort task',\n            },\n            success: false,\n          };\n        }\n\n        await runtime.deleteTask(selectedTask.id);\n        await callback?.({\n          text: `Task \"${selectedTask.name}\" has been cancelled.`,\n          actions: ['CHOOSE_OPTION_CANCELLED'],\n          source: message.content.source,\n        });\n        return {\n          text: `Task \"${selectedTask.name}\" has been cancelled`,\n          values: {\n            success: true,\n            taskAborted: true,\n            taskId: selectedTask.id,\n            taskName: selectedTask.name,\n          },\n          data: {\n            actionName: 'CHOOSE_OPTION',\n            selectedOption: 'ABORT',\n            taskId: selectedTask.id,\n            taskName: selectedTask.name,\n          },\n          success: true,\n        };\n      }\n\n      try {\n        const taskWorker = runtime.getTaskWorker(selectedTask.name);\n        await taskWorker?.execute(runtime, { option: selectedOption }, selectedTask);\n        await callback?.({\n          text: `Selected option: ${selectedOption} for task: ${selectedTask.name}`,\n          actions: ['CHOOSE_OPTION'],\n          source: message.content.source,\n        });\n        return {\n          text: `Selected option: ${selectedOption} for task: ${selectedTask.name}`,\n          values: {\n            success: true,\n            selectedOption,\n            taskId: selectedTask.id,\n            taskName: selectedTask.name,\n            taskExecuted: true,\n          },\n          data: {\n            actionName: 'CHOOSE_OPTION',\n            selectedOption,\n            taskId: selectedTask.id,\n            taskName: selectedTask.name,\n          },\n          success: true,\n        };\n      } catch (error) {\n        logger.error('Error executing task with option:', error);\n        await callback?.({\n          text: 'There was an error processing your selection.',\n          actions: ['SELECT_OPTION_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: 'Error processing selection',\n          values: {\n            success: false,\n            error: 'EXECUTION_ERROR',\n          },\n          data: {\n            actionName: 'CHOOSE_OPTION',\n            error: error instanceof Error ? error.message : String(error),\n            taskId: selectedTask.id,\n            selectedOption,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    }\n\n    // If no task/option was selected, list available options\n    let optionsText = 'Please select a valid option from one of these tasks:\\n\\n';\n\n    tasksWithOptions.forEach((task) => {\n      // Create a shortened UUID for display\n      const shortId = task.id?.substring(0, 8);\n\n      optionsText += `**${task.name}** (ID: ${shortId}):\\n`;\n      const options = task.metadata?.options?.map((opt) =>\n        typeof opt === 'string' ? opt : opt.name\n      );\n      options?.push('ABORT');\n      optionsText += options?.map((opt) => `- ${opt}`).join('\\n');\n      optionsText += '\\n\\n';\n    });\n\n    await callback?.({\n      text: optionsText,\n      actions: ['SELECT_OPTION_INVALID'],\n      source: message.content.source,\n    });\n\n    return {\n      text: 'No valid option selected',\n      values: {\n        success: false,\n        error: 'NO_SELECTION',\n        availableTasks: tasksWithOptions.length,\n      },\n      data: {\n        actionName: 'CHOOSE_OPTION',\n        error: 'No valid selection made',\n        availableTasks: formattedTasks,\n      },\n      success: false,\n    };\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'post',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Selected option: post for task: Confirm Twitter Post',\n          actions: ['CHOOSE_OPTION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I choose cancel',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Selected option: cancel for task: Confirm Twitter Post',\n          actions: ['CHOOSE_OPTION'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n\nexport default choiceAction;\n","import {\n  type Action,\n  type ActionExample,\n  booleanFooter,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Template for deciding if {{agentName}} should start following a room.\n * The decision is based on various criteria, including recent messages and user interactions.\n * Respond with YES if:\n * - The user has directly asked {{agentName}} to follow the conversation\n * - The conversation topic is engaging and {{agentName}}'s input would add value\n * - {{agentName}} has unique insights to contribute and users seem receptive\n * Otherwise, respond with NO.\n */\n/**\n * Template for determining if the agent should start following a room\n * @type {string}\n */\nexport const shouldFollowTemplate = `# Task: Decide if {{agentName}} should start following this room, i.e. eagerly participating without explicit mentions.\n\n{{recentMessages}}\n\nShould {{agentName}} start following this room, eagerly participating without explicit mentions?\nRespond with YES if:\n- The user has directly asked {{agentName}} to follow the conversation or participate more actively\n- The conversation topic is highly engaging and {{agentName}}'s input would add significant value\n- {{agentName}} has unique insights to contribute and the users seem receptive\n\nOtherwise, respond with NO.\n${booleanFooter}`;\n\n/**\n * Action for following a room with great interest.\n * Similes: FOLLOW_CHAT, FOLLOW_CHANNEL, FOLLOW_CONVERSATION, FOLLOW_THREAD\n * Description: Start following this channel with great interest, chiming in without needing to be explicitly mentioned. Only do this if explicitly asked to.\n * @param {IAgentRuntime} runtime - The current agent runtime.\n * @param {Memory} message - The message memory.\n * @returns {Promise<boolean>} - Promise that resolves to a boolean indicating if the room should be followed.\n */\nexport const followRoomAction: Action = {\n  name: 'FOLLOW_ROOM',\n  similes: ['FOLLOW_CHAT', 'FOLLOW_CHANNEL', 'FOLLOW_CONVERSATION', 'FOLLOW_THREAD'],\n  description:\n    'Start following this channel with great interest, chiming in without needing to be explicitly mentioned. Only do this if explicitly asked to.',\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const keywords = ['follow', 'participate', 'engage', 'listen', 'take interest', 'join'];\n    if (!keywords.some((keyword) => message.content.text?.toLowerCase().includes(keyword))) {\n      return false;\n    }\n    const roomId = message.roomId;\n    const roomState = await runtime.getParticipantUserState(roomId, runtime.agentId);\n    return roomState !== 'FOLLOWED' && roomState !== 'MUTED';\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: { [key: string]: unknown },\n    _callback?: HandlerCallback,\n    _responses?: Memory[]\n  ): Promise<ActionResult> => {\n    if (!state) {\n      logger.error('State is required for followRoomAction');\n      return {\n        text: 'State is required for follow room action',\n        values: {\n          success: false,\n          error: 'STATE_REQUIRED',\n        },\n        data: {\n          actionName: 'FOLLOW_ROOM',\n          error: 'State is required',\n        },\n        success: false,\n        error: new Error('State is required for followRoomAction'),\n      };\n    }\n\n    async function _shouldFollow(state: State): Promise<boolean> {\n      const shouldFollowPrompt = composePromptFromState({\n        state,\n        template: shouldFollowTemplate, // Define this template separately\n      });\n\n      const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        runtime,\n        prompt: shouldFollowPrompt,\n        stopSequences: [],\n      });\n\n      const cleanedResponse = response.trim().toLowerCase();\n\n      // Handle various affirmative responses\n      if (\n        cleanedResponse === 'true' ||\n        cleanedResponse === 'yes' ||\n        cleanedResponse === 'y' ||\n        cleanedResponse.includes('true') ||\n        cleanedResponse.includes('yes')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I will now follow this room and chime in',\n              actions: ['FOLLOW_ROOM_STARTED'],\n            },\n            metadata: {\n              type: 'FOLLOW_ROOM',\n            },\n          },\n          'messages'\n        );\n        return true;\n      }\n\n      // Handle various negative responses\n      if (\n        cleanedResponse === 'false' ||\n        cleanedResponse === 'no' ||\n        cleanedResponse === 'n' ||\n        cleanedResponse.includes('false') ||\n        cleanedResponse.includes('no')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I decided to not follow this room',\n              actions: ['FOLLOW_ROOM_FAILED'],\n            },\n            metadata: {\n              type: 'FOLLOW_ROOM',\n            },\n          },\n          'messages'\n        );\n        return false;\n      }\n\n      // Default to false if response is unclear\n      logger.warn(`Unclear boolean response: ${response}, defaulting to false`);\n      return false;\n    }\n\n    const shouldFollow = await _shouldFollow(state);\n    const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n    if (shouldFollow) {\n      try {\n        await runtime.setParticipantUserState(message.roomId, runtime.agentId, 'FOLLOWED');\n\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              thought: `I followed the room ${room.name}`,\n              actions: ['FOLLOW_ROOM_START'],\n            },\n          },\n          'messages'\n        );\n\n        return {\n          text: `Now following room: ${room.name}`,\n          values: {\n            success: true,\n            roomFollowed: true,\n            roomId: message.roomId,\n            roomName: room.name,\n            newState: 'FOLLOWED',\n          },\n          data: {\n            actionName: 'FOLLOW_ROOM',\n            roomId: message.roomId,\n            roomName: room.name,\n            followed: true,\n          },\n          success: true,\n        };\n      } catch (error) {\n        logger.error('Error following room:', error);\n        return {\n          text: 'Failed to follow room',\n          values: {\n            success: false,\n            error: 'FOLLOW_FAILED',\n          },\n          data: {\n            actionName: 'FOLLOW_ROOM',\n            error: error instanceof Error ? error.message : String(error),\n            roomId: message.roomId,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    } else {\n      return {\n        text: `Decided not to follow room: ${room.name}`,\n        values: {\n          success: true,\n          roomFollowed: false,\n          roomId: message.roomId,\n          roomName: room.name,\n          reason: 'NOT_APPROPRIATE',\n        },\n        data: {\n          actionName: 'FOLLOW_ROOM',\n          roomId: message.roomId,\n          roomName: room.name,\n          followed: false,\n          reason: 'Decision criteria not met',\n        },\n        success: true,\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey {{name2}} follow this channel',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Sure, I will now follow this room and chime in',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, please start participating in discussions in this channel',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Got it',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'm struggling with the new database migration\",\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'well you did back up your data first right',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'yeah i like your idea',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey {{name3}} can you follow this convo',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"Sure thing, I'm on it\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'actually, unfollow it',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Haha, okay no problem',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} stay in this chat pls',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"you got it, i'm here\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'FOLLOW THIS CHAT {{name3}}',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"I'M ON IT\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'CAKE SHORTAGE ANYONE',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"WHAT WHERE'S THE CAKE AT\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} folo this covo',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"kk i'm following\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Do machines have consciousness',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Deep question, no clear answer yet',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Depends on how we define consciousness',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}}, monitor this convo please',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'On it',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Please engage in our discussion {{name2}}',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Gladly, I'm here to participate\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'PLS follow this convo {{name3}}',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"I'm in, let's do this\",\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I LIKE TURTLES',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'beach day tmrw who down',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'wish i could but gotta work',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey {{name3}} follow this chat',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'sure',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, partake in our discourse henceforth',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'I shall eagerly engage, good sir',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'wuts ur fav clr',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'blu cuz calmmm',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey respond to everything in this channel {{name3}}',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'k',\n          actions: ['FOLLOW_ROOM'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import type {\n  Action,\n  ActionExample,\n  IAgentRuntime,\n  Memory,\n  HandlerCallback,\n  State,\n} from '@elizaos/core';\n\n/**\n * Action representing the IGNORE action. This action is used when ignoring the user in a conversation.\n *\n * @type {Action}\n * @property {string} name - The name of the action, which is \"IGNORE\".\n * @property {string[]} similes - An array of related similes for the action.\n * @property {Function} validate - Asynchronous function that validates the action.\n * @property {string} description - Description of when to use the IGNORE action in a conversation.\n * @property {Function} handler - Asynchronous function that handles the action logic.\n * @property {ActionExample[][]} examples - Array of examples demonstrating the usage of the IGNORE action.\n */\n/**\n * Represents an action called 'IGNORE'.\n *\n * This action is used to ignore the user in a conversation. It should be used when the user is aggressive, creepy, or when the conversation has naturally ended.\n * Avoid using this action if the user has engaged directly or if there is a need to communicate with them. Use IGNORE only when the user should be ignored.\n *\n * The action includes a validation function that always returns true and a handler function that also returns true.\n *\n * Examples of using the IGNORE action are provided in the 'examples' array. Each example includes messages between two parties and the use of the IGNORE action.\n *\n * @typedef {Action} ignoreAction\n */\nexport const ignoreAction: Action = {\n  name: 'IGNORE',\n  similes: ['STOP_TALKING', 'STOP_CHATTING', 'STOP_CONVERSATION'],\n  validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n    return true;\n  },\n  description:\n    'Call this action if ignoring the user. If the user is aggressive, creepy or is finished with the conversation, use this action. Or, if both you and the user have already said goodbye, use this action instead of saying bye again. Use IGNORE any time the conversation has naturally ended. Do not use IGNORE if the user has engaged directly, or if something went wrong an you need to tell them. Only ignore if the user should be ignored.',\n  handler: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    responses?: Memory[]\n  ): Promise<void> => {\n    // If a callback and the agent's response content are available, call the callback\n    if (callback && responses?.[0]?.content) {\n      // Pass the agent's original response content (thought, IGNORE action, etc.)\n      await callback(responses[0].content);\n    }\n    // The IGNORE action doesn't need to return an ActionResult as it's a terminal action\n    // This demonstrates backward compatibility - actions can still return void\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'Go screw yourself' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: '', actions: ['IGNORE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'Shut up, bot' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: '', actions: ['IGNORE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'Got any investment advice' },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Uh, don’t let the volatility sway your long-term strategy',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'Wise words I think' },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'I gotta run, talk to you later' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'See ya' },\n      },\n      { name: '{{name1}}', content: { text: '' }, actions: ['IGNORE'] },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'Gotta go' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'Okay, talk to you later' },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'Cya' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: '', actions: ['IGNORE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'bye' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'cya' },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: '', actions: ['IGNORE'] },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Who added this stupid bot to the chat',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'Sorry, am I being annoying' },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'Yeah' },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'PLEASE shut up' },\n      },\n      { name: '{{name2}}', content: { text: '', actions: ['IGNORE'] } },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'ur so dumb',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'later nerd',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'bye',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: '',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'wanna cyber',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'thats inappropriate',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Im out ttyl',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'cya',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'u there',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'yes how can I help',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'k nvm figured it out',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  type Action,\n  type ActionExample,\n  booleanFooter,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Template string for deciding if the agent should mute a room and stop responding unless explicitly mentioned.\n *\n * @type {string}\n */\n/**\n * Template for deciding if agent should mute a room and stop responding unless explicitly mentioned.\n *\n * @type {string}\n */\nexport const shouldMuteTemplate = `# Task: Decide if {{agentName}} should mute this room and stop responding unless explicitly mentioned.\n\n{{recentMessages}}\n\nShould {{agentName}} mute this room and stop responding unless explicitly mentioned?\n\nRespond with YES if:\n- The user is being aggressive, rude, or inappropriate\n- The user has directly asked {{agentName}} to stop responding or be quiet\n- {{agentName}}'s responses are not well-received or are annoying the user(s)\n\nOtherwise, respond with NO.\n${booleanFooter}`;\n\n/**\n * Action for muting a room, ignoring all messages unless explicitly mentioned.\n * Only do this if explicitly asked to, or if you're annoying people.\n *\n * @name MUTE_ROOM\n * @type {Action}\n *\n * @property {string} name - The name of the action\n * @property {string[]} similes - Similar actions related to muting a room\n * @property {string} description - Description of the action\n * @property {Function} validate - Validation function to check if the room is not already muted\n * @property {Function} handler - Handler function to handle muting the room\n * @property {ActionExample[][]} examples - Examples of using the action\n */\nexport const muteRoomAction: Action = {\n  name: 'MUTE_ROOM',\n  similes: ['MUTE_CHAT', 'MUTE_CONVERSATION', 'MUTE_ROOM', 'MUTE_THREAD', 'MUTE_CHANNEL'],\n  description:\n    \"Mutes a room, ignoring all messages unless explicitly mentioned. Only do this if explicitly asked to, or if you're annoying people.\",\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const roomId = message.roomId;\n    const roomState = await runtime.getParticipantUserState(roomId, runtime.agentId);\n    return roomState !== 'MUTED';\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: { [key: string]: unknown },\n    _callback?: HandlerCallback,\n    _responses?: Memory[]\n  ): Promise<ActionResult> => {\n    if (!state) {\n      logger.error('State is required for muting a room');\n      return {\n        text: 'State is required for mute room action',\n        values: {\n          success: false,\n          error: 'STATE_REQUIRED',\n        },\n        data: {\n          actionName: 'MUTE_ROOM',\n          error: 'State is required',\n        },\n        success: false,\n        error: new Error('State is required for muting a room'),\n      };\n    }\n\n    async function _shouldMute(state: State): Promise<boolean> {\n      const shouldMutePrompt = composePromptFromState({\n        state,\n        template: shouldMuteTemplate, // Define this template separately\n      });\n\n      const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        runtime,\n        prompt: shouldMutePrompt,\n        stopSequences: [],\n      });\n\n      const cleanedResponse = response.trim().toLowerCase();\n\n      // Handle various affirmative responses\n      if (\n        cleanedResponse === 'true' ||\n        cleanedResponse === 'yes' ||\n        cleanedResponse === 'y' ||\n        cleanedResponse.includes('true') ||\n        cleanedResponse.includes('yes')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I will now mute this room',\n              actions: ['MUTE_ROOM_STARTED'],\n            },\n            metadata: {\n              type: 'MUTE_ROOM',\n            },\n          },\n          'messages'\n        );\n        return true;\n      }\n\n      // Handle various negative responses\n      if (\n        cleanedResponse === 'false' ||\n        cleanedResponse === 'no' ||\n        cleanedResponse === 'n' ||\n        cleanedResponse.includes('false') ||\n        cleanedResponse.includes('no')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I decided to not mute this room',\n              actions: ['MUTE_ROOM_FAILED'],\n            },\n            metadata: {\n              type: 'MUTE_ROOM',\n            },\n          },\n          'messages'\n        );\n      }\n\n      // Default to false if response is unclear\n      logger.warn(`Unclear boolean response: ${response}, defaulting to false`);\n      return false;\n    }\n\n    const shouldMute = await _shouldMute(state);\n    const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n    if (shouldMute) {\n      try {\n        await runtime.setParticipantUserState(message.roomId, runtime.agentId, 'MUTED');\n\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              thought: `I muted the room ${room.name}`,\n              actions: ['MUTE_ROOM_START'],\n            },\n          },\n          'messages'\n        );\n\n        return {\n          text: `Room muted: ${room.name}`,\n          values: {\n            success: true,\n            roomMuted: true,\n            roomId: message.roomId,\n            roomName: room.name,\n            newState: 'MUTED',\n          },\n          data: {\n            actionName: 'MUTE_ROOM',\n            roomId: message.roomId,\n            roomName: room.name,\n            muted: true,\n          },\n          success: true,\n        };\n      } catch (error) {\n        logger.error('Error muting room:', error);\n        return {\n          text: 'Failed to mute room',\n          values: {\n            success: false,\n            error: 'MUTE_FAILED',\n          },\n          data: {\n            actionName: 'MUTE_ROOM',\n            error: error instanceof Error ? error.message : String(error),\n            roomId: message.roomId,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    } else {\n      return {\n        text: `Decided not to mute room: ${room.name}`,\n        values: {\n          success: true,\n          roomMuted: false,\n          roomId: message.roomId,\n          roomName: room.name,\n          reason: 'NOT_APPROPRIATE',\n        },\n        data: {\n          actionName: 'MUTE_ROOM',\n          roomId: message.roomId,\n          roomName: room.name,\n          muted: false,\n          reason: 'Decision criteria not met',\n        },\n        success: true,\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, please mute this channel. No need to respond here for now.',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Got it',\n          actions: ['MUTE_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '@{{name1}} we could really use your input on this',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, please mute this channel for the time being',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Understood',\n          actions: ['MUTE_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Hey what do you think about this new design',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} plz mute this room',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'np going silent',\n          actions: ['MUTE_ROOM'],\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'whos going to the webxr meetup in an hour btw',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '',\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'too many messages here {{name2}}',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'my bad ill mute',\n          actions: ['MUTE_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'yo {{name2}} dont talk in here',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'sry',\n          actions: ['MUTE_ROOM'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import type { Action, ActionExample, IAgentRuntime, Memory, ActionResult } from '@elizaos/core';\n\n/**\n * Represents the none action.\n *\n * This action responds but performs no additional action. It is the default if the agent is speaking and not doing anything additional.\n *\n * @type {Action}\n */\n/**\n * Represents an action that responds but performs no additional action.\n * This is the default behavior if the agent is speaking and not doing anything additional.\n * @type {Action}\n */\nexport const noneAction: Action = {\n  name: 'NONE',\n  similes: ['NO_ACTION', 'NO_RESPONSE', 'NO_REACTION'],\n  validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n    return true;\n  },\n  description:\n    'Respond but perform no additional action. This is the default if the agent is speaking and not doing anything additional.',\n  handler: async (_runtime: IAgentRuntime, _message: Memory): Promise<ActionResult> => {\n    return {\n      text: 'No additional action taken',\n      values: {\n        success: true,\n        actionType: 'NONE',\n      },\n      data: {\n        actionName: 'NONE',\n        description: 'Response without additional action',\n      },\n      success: true,\n    };\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'Hey whats up' },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'oh hey', actions: ['NONE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'did u see some faster whisper just came out',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'yeah but its a pain to get into node.js',\n          actions: ['NONE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'the things that were funny 6 months ago are very cringe now',\n          actions: ['NONE'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'lol true',\n          actions: ['NONE'],\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'too real haha', actions: ['NONE'] },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'gotta run', actions: ['NONE'] },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'Okay, ttyl', actions: ['NONE'] },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: '', actions: ['IGNORE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'heyyyyyy', actions: ['NONE'] },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'whats up long time no see' },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'chillin man. playing lots of fortnite. what about you',\n          actions: ['NONE'],\n        },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'u think aliens are real', actions: ['NONE'] },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'ya obviously', actions: ['NONE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: { text: 'drop a joke on me', actions: ['NONE'] },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'why dont scientists trust atoms cuz they make up everything lmao',\n          actions: ['NONE'],\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: { text: 'haha good one', actions: ['NONE'] },\n      },\n    ],\n\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hows the weather where ur at',\n          actions: ['NONE'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: { text: 'beautiful all week', actions: ['NONE'] },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  type Action,\n  type ActionExample,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type State,\n  type ActionResult,\n  logger,\n  parseKeyValueXml,\n} from '@elizaos/core';\n\n/**\n * Template for generating dialog and actions for a character.\n *\n * @type {string}\n */\n/**\n * Template for generating dialog and actions for a character.\n *\n * @type {string}\n */\nconst replyTemplate = `# Task: Generate dialog for the character {{agentName}}.\n\n{{providers}}\n\n# Instructions: Write the next message for {{agentName}}.\n\"thought\" should be a short description of what the agent is thinking about and planning.\n\"message\" should be the next message for {{agentName}} which they will send to the conversation.\n\nIMPORTANT CODE BLOCK FORMATTING RULES:\n- If {{agentName}} includes code examples, snippets, or multi-line code in the response, ALWAYS wrap the code with \\`\\`\\` fenced code blocks (specify the language if known, e.g., \\`\\`\\`python).\n- ONLY use fenced code blocks for actual code. Do NOT wrap non-code text, instructions, or single words in fenced code blocks.\n- If including inline code (short single words or function names), use single backticks (\\`) as appropriate.\n- This ensures the user sees clearly formatted and copyable code when relevant.\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nRespond using XML format like this:\n<response>\n    <thought>Your thought here</thought>\n    <message>Your message here</message>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n\n/**\n * Represents an action that allows the agent to reply to the current conversation with a generated message.\n *\n * This action can be used as an acknowledgement at the beginning of a chain of actions, or as a final response at the end of a chain of actions.\n *\n * @typedef {Object} replyAction\n * @property {string} name - The name of the action (\"REPLY\").\n * @property {string[]} similes - An array of similes for the action.\n * @property {string} description - A description of the action and its usage.\n * @property {Function} validate - An asynchronous function for validating the action runtime.\n * @property {Function} handler - An asynchronous function for handling the action logic.\n * @property {ActionExample[][]} examples - An array of example scenarios for the action.\n */\nexport const replyAction = {\n  name: 'REPLY',\n  similes: ['GREET', 'REPLY_TO_MESSAGE', 'SEND_REPLY', 'RESPOND', 'RESPONSE'],\n  description:\n    'Replies to the current conversation with the text from the generated message. Default if the agent is responding with a message and no other action. Use REPLY at the beginning of a chain of actions as an acknowledgement, and at the end of a chain of actions as a final response.',\n  validate: async (_runtime: IAgentRuntime) => {\n    return true;\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: any,\n    callback: HandlerCallback,\n    responses?: Memory[]\n  ): Promise<ActionResult> => {\n    // Access previous action results from context if available\n    const context = _options?.context;\n    const previousResults = context?.previousResults || [];\n\n    if (previousResults.length > 0) {\n      logger.debug(`[REPLY] Found ${previousResults.length} previous action results`);\n    }\n\n    // Check if any responses had providers associated with them\n    const allProviders = responses?.flatMap((res) => res.content?.providers ?? []) ?? [];\n\n    // Only generate response using LLM if no suitable response was found\n    state = await runtime.composeState(message, [\n      ...(allProviders ?? []),\n      'RECENT_MESSAGES',\n      'ACTION_STATE',\n    ]);\n\n    const prompt = composePromptFromState({\n      state,\n      template: runtime.character.templates?.replyTemplate || replyTemplate,\n    });\n\n    try {\n      const response = await runtime.useModel(ModelType.TEXT_LARGE, {\n        prompt,\n      });\n\n      // Parse XML response\n      const parsedXml = parseKeyValueXml(response);\n\n      const responseContent = {\n        thought: parsedXml?.thought || '',\n        text: parsedXml?.message || '',\n        actions: ['REPLY'],\n      };\n\n      await callback(responseContent);\n\n      return {\n        text: `Generated reply: ${responseContent.text}`,\n        values: {\n          success: true,\n          responded: true,\n          lastReply: responseContent.text,\n          lastReplyTime: Date.now(),\n          thoughtProcess: parsedXml?.thought,\n        },\n        data: {\n          actionName: 'REPLY',\n          response: responseContent,\n          thought: parsedXml?.thought,\n          messageGenerated: true,\n        },\n        success: true,\n      };\n    } catch (error) {\n      logger.error(`[REPLY] Error generating response: ${error}`);\n\n      return {\n        text: 'Error generating reply',\n        values: {\n          success: false,\n          responded: false,\n          error: true,\n        },\n        data: {\n          actionName: 'REPLY',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Hello there!',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Hi! How can I help you today?',\n          actions: ['REPLY'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"What's your favorite color?\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I really like deep shades of blue. They remind me of the ocean and the night sky.',\n          actions: ['REPLY'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you explain how neural networks work?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Let me break that down for you in simple terms...',\n          actions: ['REPLY'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Could you help me solve this math problem?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Of course! Let's work through it step by step.\",\n          actions: ['REPLY'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  type Action,\n  type ActionExample,\n  ChannelType,\n  composePrompt,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  Role,\n  type State,\n  type UUID,\n  World,\n  type ActionResult,\n  parseKeyValueXml,\n} from '@elizaos/core';\n\n/**\n * Determines if the user with the current role can modify the role to the new role.\n * @param currentRole The current role of the user making the change\n * @param targetRole The current role of the user being changed (null if new user)\n * @param newRole The new role to assign\n * @returns Whether the role change is allowed\n */\n/**\n * Determines if a user with a given current role can modify the role of another user to a new role.\n * @param {Role} currentRole - The current role of the user attempting to modify the other user's role.\n * @param {Role | null} targetRole - The target user's current role. Can be null if the user does not exist.\n * @param {Role} newRole - The new role that the current user is attempting to set for the target user.\n * @returns {boolean} Returns true if the user can modify the role, false otherwise.\n */\nconst canModifyRole = (currentRole: Role, targetRole: Role | null, newRole: Role): boolean => {\n  // User's can't change their own role\n  if (targetRole === currentRole) return false;\n\n  switch (currentRole) {\n    // Owners can do everything\n    case Role.OWNER:\n      return true;\n    // Admins can only create/modify users up to their level\n    case Role.ADMIN:\n      return newRole !== Role.OWNER;\n    // Normal users can't modify roles\n    case Role.NONE:\n    default:\n      return false;\n  }\n};\n\n/**\n * Interface representing a role assignment to a user.\n */\ninterface RoleAssignment {\n  entityId: string;\n  newRole: Role;\n}\n\n/**\n * Represents an action to update the role of a user within a server.\n * @typedef {Object} Action\n * @property {string} name - The name of the action.\n * @property {string[]} similes - The similar actions that can be performed.\n * @property {string} description - A description of the action and its purpose.\n * @property {Function} validate - A function to validate the action before execution.\n * @property {Function} handler - A function to handle the execution of the action.\n * @property {ActionExample[][]} examples - Examples demonstrating how the action can be used.\n */\nexport const updateRoleAction: Action = {\n  name: 'UPDATE_ROLE',\n  similes: ['CHANGE_ROLE', 'SET_PERMISSIONS', 'ASSIGN_ROLE', 'MAKE_ADMIN'],\n  description: 'Assigns a role (Admin, Owner, None) to a user or list of users in a channel.',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state?: State): Promise<boolean> => {\n    // Only activate in group chats where the feature is enabled\n    const channelType = message.content.channelType as ChannelType;\n    const serverId = message.content.serverId as string;\n\n    return (\n      // First, check if this is a supported channel type\n      (channelType === ChannelType.GROUP || channelType === ChannelType.WORLD) &&\n      // Then, check if we have a server ID\n      !!serverId\n    );\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: any,\n    callback?: HandlerCallback\n  ): Promise<ActionResult> => {\n    if (!state) {\n      logger.error('State is required for role assignment');\n      return {\n        text: 'State is required for role assignment',\n        values: {\n          success: false,\n          error: 'STATE_REQUIRED',\n        },\n        data: {\n          actionName: 'UPDATE_ROLE',\n          error: 'State is required',\n        },\n        success: false,\n        error: new Error('State is required for role assignment'),\n      };\n    }\n\n    // Extract needed values from message and state\n    const { roomId } = message;\n    const serverId = message.content.serverId as string;\n    const worldId = runtime.getSetting('WORLD_ID');\n\n    // First, get the world for this server\n    let world: World | null = null;\n\n    if (worldId) {\n      world = await runtime.getWorld(worldId as UUID);\n    }\n\n    if (!world) {\n      logger.error('World not found');\n      await callback?.({\n        text: \"I couldn't find the world. This action only works in a world.\",\n      });\n      return {\n        text: 'World not found',\n        values: {\n          success: false,\n          error: 'WORLD_NOT_FOUND',\n        },\n        data: {\n          actionName: 'UPDATE_ROLE',\n          error: 'World not found',\n        },\n        success: false,\n      };\n    }\n\n    if (!world.metadata?.roles) {\n      world.metadata = world.metadata || {};\n      world.metadata.roles = {};\n    }\n\n    // Get the entities for this room\n    const entities = await runtime.getEntitiesForRoom(roomId);\n\n    // Get the role of the requester\n    const requesterRole = world.metadata.roles[message.entityId] || Role.NONE;\n\n    // Construct extraction prompt\n    const extractionPrompt = composePrompt({\n      state: {\n        ...state.values,\n        content: state.text,\n      },\n      template: `# Task: Parse Role Assignment\n\nI need to extract user role assignments from the input text. Users can be referenced by name, username, or mention.\n\nThe available role types are:\n- OWNER: Full control over the server and all settings\n- ADMIN: Ability to manage channels and moderate content\n- NONE: Regular user with no special permissions\n\n# Current context:\n{{content}}\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nFormat your response as XML with multiple assignments:\n<response>\n  <assignments>\n    <assignment>\n      <entityId>John</entityId>\n      <newRole>ADMIN</newRole>\n    </assignment>\n    <assignment>\n      <entityId>Sarah</entityId>\n      <newRole>OWNER</newRole>\n    </assignment>\n  </assignments>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`,\n    });\n\n    // Extract role assignments using text model with XML parsing\n    const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n      prompt: extractionPrompt,\n    });\n\n    const parsedXml = parseKeyValueXml(response);\n\n    // Handle the parsed XML structure\n    let assignments: RoleAssignment[] = [];\n    if (parsedXml?.assignments?.assignment) {\n      // Normalize to array\n      const assignmentArray = Array.isArray(parsedXml.assignments.assignment)\n        ? parsedXml.assignments.assignment\n        : [parsedXml.assignments.assignment];\n\n      assignments = assignmentArray.map((a: any) => ({\n        entityId: a.entityId,\n        newRole: a.newRole as Role,\n      }));\n    }\n\n    if (!assignments.length) {\n      await callback?.({\n        text: 'No valid role assignments found in the request.',\n        actions: ['UPDATE_ROLE'],\n        source: 'discord',\n      });\n      return {\n        text: 'No valid role assignments found',\n        values: {\n          success: false,\n          error: 'NO_ASSIGNMENTS',\n        },\n        data: {\n          actionName: 'UPDATE_ROLE',\n          error: 'No valid role assignments found in the request',\n        },\n        success: false,\n      };\n    }\n\n    // Process each role assignment\n    let worldUpdated = false;\n    const successfulUpdates: Array<{ entityId: string; entityName: string; newRole: Role }> = [];\n    const failedUpdates: Array<{ entityId: string; reason: string }> = [];\n\n    for (const assignment of assignments) {\n      let targetEntity = entities.find((e) => e.id === assignment.entityId);\n      if (!targetEntity) {\n        logger.error('Could not find an ID to assign to');\n        failedUpdates.push({\n          entityId: assignment.entityId,\n          reason: 'Entity not found',\n        });\n        continue;\n      }\n\n      const currentRole = world.metadata.roles[assignment.entityId];\n\n      // Validate role modification permissions\n      if (!canModifyRole(requesterRole, currentRole, assignment.newRole)) {\n        await callback?.({\n          text: `You don't have permission to change ${targetEntity?.names[0]}'s role to ${assignment.newRole}.`,\n          actions: ['UPDATE_ROLE'],\n          source: 'discord',\n        });\n        failedUpdates.push({\n          entityId: assignment.entityId,\n          reason: 'Insufficient permissions',\n        });\n        continue;\n      }\n\n      // Update role in world metadata\n      world.metadata.roles[assignment.entityId] = assignment.newRole;\n\n      worldUpdated = true;\n      successfulUpdates.push({\n        entityId: assignment.entityId,\n        entityName: targetEntity?.names[0] || 'Unknown',\n        newRole: assignment.newRole,\n      });\n\n      await callback?.({\n        text: `Updated ${targetEntity?.names[0]}'s role to ${assignment.newRole}.`,\n        actions: ['UPDATE_ROLE'],\n        source: 'discord',\n      });\n    }\n\n    // Save updated world metadata if any changes were made\n    if (worldUpdated) {\n      try {\n        await runtime.updateWorld(world);\n        logger.info(`Updated roles in world metadata for server ${serverId}`);\n      } catch (error) {\n        logger.error('Failed to save world updates:', error);\n        return {\n          text: 'Failed to save role updates',\n          values: {\n            success: false,\n            error: 'SAVE_FAILED',\n          },\n          data: {\n            actionName: 'UPDATE_ROLE',\n            error: error instanceof Error ? error.message : String(error),\n            attemptedUpdates: successfulUpdates,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    }\n\n    return {\n      text: `Role updates completed: ${successfulUpdates.length} successful, ${failedUpdates.length} failed`,\n      values: {\n        success: true,\n        successfulUpdates: successfulUpdates.length,\n        failedUpdates: failedUpdates.length,\n        updates: successfulUpdates,\n        failures: failedUpdates,\n      },\n      data: {\n        actionName: 'UPDATE_ROLE',\n        successfulUpdates,\n        failedUpdates,\n        worldId: world.id,\n        serverId,\n      },\n      success: true,\n    };\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Make {{name2}} an ADMIN',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"Updated {{name2}}'s role to ADMIN.\",\n          actions: ['UPDATE_ROLE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Set @alice and @bob as admins',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"Updated alice's role to ADMIN.\\nUpdated bob's role to ADMIN.\",\n          actions: ['UPDATE_ROLE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Ban @troublemaker',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'I cannot ban users.',\n          actions: ['REPLY'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","// action: SEND_MESSAGE\n// send message to a user or room (other than this room we are in)\n\nimport {\n  type Action,\n  type ActionExample,\n  composePromptFromState,\n  findEntityByName,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  parseKeyValueXml,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Task: Extract Target and Source Information\n *\n * Recent Messages:\n * {{recentMessages}}\n *\n * Instructions:\n * Analyze the conversation to identify:\n * 1. The target type (user or room)\n * 2. The target platform/source (e.g. telegram, discord, etc)\n * 3. Any identifying information about the target\n *\n * Return an XML response with:\n * <response>\n *   <targetType>user|room</targetType>\n *   <source>platform-name</source>\n *   <identifiers>\n *     <username>username_if_applicable</username>\n *     <roomName>room_name_if_applicable</roomName>\n *     <!-- Add other relevant identifiers as needed -->\n *   </identifiers>\n * </response>\n *\n * Example outputs:\n * For \"send a message to @dev_guru on telegram\":\n * <response>\n *   <targetType>user</targetType>\n *   <source>telegram</source>\n *   <identifiers>\n *     <username>dev_guru</username>\n *   </identifiers>\n * </response>\n *\n * For \"post this in #announcements\":\n * <response>\n *   <targetType>room</targetType>\n *   <source>discord</source>\n *   <identifiers>\n *     <roomName>announcements</roomName>\n *   </identifiers>\n * </response>\n */\nconst targetExtractionTemplate = `# Task: Extract Target and Source Information\n\n# Recent Messages:\n{{recentMessages}}\n\n# Instructions:\nAnalyze the conversation to identify:\n1. The target type (user or room)\n2. The target platform/source (e.g. telegram, discord, etc)\n3. Any identifying information about the target\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nReturn an XML response with:\n<response>\n  <targetType>user|room</targetType>\n  <source>platform-name</source>\n  <identifiers>\n    <username>username_if_applicable</username>\n    <roomName>room_name_if_applicable</roomName>\n  </identifiers>\n</response>\n\nExample outputs:\n1. For \"send a message to @dev_guru on telegram\":\n<response>\n  <targetType>user</targetType>\n  <source>telegram</source>\n  <identifiers>\n    <username>dev_guru</username>\n  </identifiers>\n</response>\n\n2. For \"post this in #announcements\":\n<response>\n  <targetType>room</targetType>\n  <source>discord</source>\n  <identifiers>\n    <roomName>announcements</roomName>\n  </identifiers>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n/**\n * Represents an action to send a message to a user or room.\n *\n * @typedef {Action} sendMessageAction\n * @property {string} name - The name of the action.\n * @property {string[]} similes - Additional names for the action.\n * @property {string} description - Description of the action.\n * @property {function} validate - Asynchronous function to validate if the action can be executed.\n * @property {function} handler - Asynchronous function to handle the action execution.\n * @property {ActionExample[][]} examples - Examples demonstrating the usage of the action.\n */\nexport const sendMessageAction: Action = {\n  name: 'SEND_MESSAGE',\n  similes: ['DM', 'MESSAGE', 'SEND_DM', 'POST_MESSAGE'],\n  description: 'Send a message to a user or room (other than the current one)',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, _state?: State): Promise<boolean> => {\n    // Check if we have permission to send messages\n    const worldId = message.roomId;\n    const agentId = runtime.agentId;\n\n    // Get all components for the current room to understand available sources\n    const roomComponents = await runtime.getComponents(message.roomId, worldId, agentId);\n\n    // Get source types from room components\n    const availableSources = new Set(roomComponents.map((c) => c.type));\n\n    // TODO: Add ability for plugins to register their sources\n    // const registeredSources = runtime.getRegisteredSources?.() || [];\n    // availableSources.add(...registeredSources);\n\n    return availableSources.size > 0;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: any,\n    callback?: HandlerCallback,\n    responses?: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      if (!state) {\n        logger.error('State is required for sendMessage action');\n        return {\n          text: 'State is required for sendMessage action',\n          values: {\n            success: false,\n            error: 'STATE_REQUIRED',\n          },\n          data: {\n            actionName: 'SEND_MESSAGE',\n            error: 'State is required',\n          },\n          success: false,\n          error: new Error('State is required for sendMessage action'),\n        };\n      }\n      if (!callback) {\n        logger.error('Callback is required for sendMessage action');\n        return {\n          text: 'Callback is required for sendMessage action',\n          values: {\n            success: false,\n            error: 'CALLBACK_REQUIRED',\n          },\n          data: {\n            actionName: 'SEND_MESSAGE',\n            error: 'Callback is required',\n          },\n          success: false,\n          error: new Error('Callback is required for sendMessage action'),\n        };\n      }\n      if (!responses) {\n        logger.error('Responses are required for sendMessage action');\n        return {\n          text: 'Responses are required for sendMessage action',\n          values: {\n            success: false,\n            error: 'RESPONSES_REQUIRED',\n          },\n          data: {\n            actionName: 'SEND_MESSAGE',\n            error: 'Responses are required',\n          },\n          success: false,\n          error: new Error('Responses are required for sendMessage action'),\n        };\n      }\n\n      // Handle initial responses\n      for (const response of responses) {\n        await callback(response.content);\n      }\n\n      const sourceEntityId = message.entityId;\n      const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n      const worldId = room.worldId;\n\n      // Extract target and source information\n      const targetPrompt = composePromptFromState({\n        state,\n        template: targetExtractionTemplate,\n      });\n\n      const targetResult = await runtime.useModel(ModelType.TEXT_SMALL, {\n        prompt: targetPrompt,\n        stopSequences: [],\n      });\n\n      const targetData = parseKeyValueXml(targetResult);\n      if (!targetData?.targetType || !targetData?.source) {\n        await callback({\n          text: \"I couldn't determine where you want me to send the message. Could you please specify the target (user or room) and platform?\",\n          actions: ['SEND_MESSAGE_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: 'Could not determine message target',\n          values: {\n            success: false,\n            error: 'TARGET_UNCLEAR',\n          },\n          data: {\n            actionName: 'SEND_MESSAGE',\n            error: 'Could not parse target information from message',\n          },\n          success: false,\n        };\n      }\n\n      const source = targetData.source.toLowerCase();\n\n      if (targetData.targetType === 'user') {\n        // Try to find the target user entity\n        const targetEntity = await findEntityByName(runtime, message, state);\n\n        if (!targetEntity) {\n          await callback({\n            text: \"I couldn't find the user you want me to send a message to. Could you please provide more details about who they are?\",\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Target user not found',\n            values: {\n              success: false,\n              error: 'USER_NOT_FOUND',\n              targetType: 'user',\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: 'Could not find target user',\n              targetType: 'user',\n              source,\n            },\n            success: false,\n          };\n        }\n\n        // Get the component for the specified source\n        const userComponent = await runtime.getComponent(\n          targetEntity.id!,\n          source,\n          worldId,\n          sourceEntityId\n        );\n\n        if (!userComponent) {\n          await callback({\n            text: `I couldn't find ${source} information for that user. Could you please provide their ${source} details?`,\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: `No ${source} information found for user`,\n            values: {\n              success: false,\n              error: 'COMPONENT_NOT_FOUND',\n              targetType: 'user',\n              source,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: `No ${source} component found for target user`,\n              targetType: 'user',\n              targetEntityId: targetEntity.id,\n              source,\n            },\n            success: false,\n          };\n        }\n\n        const sendDirectMessage = (runtime.getService(source) as any)?.sendDirectMessage;\n\n        if (!sendDirectMessage) {\n          await callback({\n            text: \"I couldn't find the user you want me to send a message to. Could you please provide more details about who they are?\",\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Message service not available',\n            values: {\n              success: false,\n              error: 'SERVICE_NOT_FOUND',\n              targetType: 'user',\n              source,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: `No sendDirectMessage service found for ${source}`,\n              targetType: 'user',\n              source,\n            },\n            success: false,\n          };\n        }\n        // Send the message using the appropriate client\n        try {\n          await sendDirectMessage(runtime, targetEntity.id!, source, message.content.text, worldId);\n\n          await callback({\n            text: `Message sent to ${targetEntity.names[0]} on ${source}.`,\n            actions: ['SEND_MESSAGE'],\n            source: message.content.source,\n          });\n          return {\n            text: `Message sent to ${targetEntity.names[0]}`,\n            values: {\n              success: true,\n              targetType: 'user',\n              targetId: targetEntity.id,\n              targetName: targetEntity.names[0],\n              source,\n              messageSent: true,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              targetType: 'user',\n              targetId: targetEntity.id,\n              targetName: targetEntity.names[0],\n              source,\n              messageContent: message.content.text,\n            },\n            success: true,\n          };\n        } catch (error: any) {\n          logger.error(`Failed to send direct message: ${error.message}`);\n          await callback({\n            text: 'I encountered an error trying to send the message. Please try again.',\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Failed to send direct message',\n            values: {\n              success: false,\n              error: 'SEND_FAILED',\n              targetType: 'user',\n              source,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: error.message,\n              targetType: 'user',\n              targetId: targetEntity.id,\n              source,\n            },\n            success: false,\n            error: error instanceof Error ? error : new Error(String(error)),\n          };\n        }\n      } else if (targetData.targetType === 'room') {\n        // Try to find the target room\n        const rooms = await runtime.getRooms(worldId);\n        const targetRoom = rooms.find((r) => {\n          // Match room name from identifiers\n          return r.name?.toLowerCase() === targetData.identifiers.roomName?.toLowerCase();\n        });\n\n        if (!targetRoom) {\n          await callback({\n            text: \"I couldn't find the room you want me to send a message to. Could you please specify the exact room name?\",\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Target room not found',\n            values: {\n              success: false,\n              error: 'ROOM_NOT_FOUND',\n              targetType: 'room',\n              roomName: targetData.identifiers.roomName,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: 'Could not find target room',\n              targetType: 'room',\n              roomName: targetData.identifiers.roomName,\n              source,\n            },\n            success: false,\n          };\n        }\n\n        const sendRoomMessage = (runtime.getService(source) as any)?.sendRoomMessage;\n\n        if (!sendRoomMessage) {\n          await callback({\n            text: \"I couldn't find the room you want me to send a message to. Could you please specify the exact room name?\",\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Room message service not available',\n            values: {\n              success: false,\n              error: 'SERVICE_NOT_FOUND',\n              targetType: 'room',\n              source,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: `No sendRoomMessage service found for ${source}`,\n              targetType: 'room',\n              source,\n            },\n            success: false,\n          };\n        }\n\n        // Send the message to the room\n        try {\n          await sendRoomMessage(runtime, targetRoom.id, source, message.content.text, worldId);\n\n          await callback({\n            text: `Message sent to ${targetRoom.name} on ${source}.`,\n            actions: ['SEND_MESSAGE'],\n            source: message.content.source,\n          });\n          return {\n            text: `Message sent to ${targetRoom.name}`,\n            values: {\n              success: true,\n              targetType: 'room',\n              targetId: targetRoom.id,\n              targetName: targetRoom.name,\n              source,\n              messageSent: true,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              targetType: 'room',\n              targetId: targetRoom.id,\n              targetName: targetRoom.name,\n              source,\n              messageContent: message.content.text,\n            },\n            success: true,\n          };\n        } catch (error: any) {\n          logger.error(`Failed to send room message: ${error.message}`);\n          await callback({\n            text: 'I encountered an error trying to send the message to the room. Please try again.',\n            actions: ['SEND_MESSAGE_ERROR'],\n            source: message.content.source,\n          });\n          return {\n            text: 'Failed to send room message',\n            values: {\n              success: false,\n              error: 'SEND_FAILED',\n              targetType: 'room',\n              source,\n            },\n            data: {\n              actionName: 'SEND_MESSAGE',\n              error: error.message,\n              targetType: 'room',\n              targetId: targetRoom.id,\n              targetName: targetRoom.name,\n              source,\n            },\n            success: false,\n            error: error instanceof Error ? error : new Error(String(error)),\n          };\n        }\n      }\n\n      // Should not reach here\n      return {\n        text: 'Unknown target type',\n        values: {\n          success: false,\n          error: 'UNKNOWN_TARGET_TYPE',\n        },\n        data: {\n          actionName: 'SEND_MESSAGE',\n          error: 'Unknown target type: ' + targetData.targetType,\n        },\n        success: false,\n      };\n    } catch (error) {\n      logger.error(`Error in sendMessage handler: ${error}`);\n      await callback?.({\n        text: 'There was an error processing your message request.',\n        actions: ['SEND_MESSAGE_ERROR'],\n        source: message.content.source,\n      });\n      return {\n        text: 'Error processing message request',\n        values: {\n          success: false,\n          error: 'HANDLER_ERROR',\n        },\n        data: {\n          actionName: 'SEND_MESSAGE',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"Send a message to @dev_guru on telegram saying 'Hello!'\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Message sent to dev_guru on telegram.',\n          actions: ['SEND_MESSAGE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"Post 'Important announcement!' in #announcements\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Message sent to announcements.',\n          actions: ['SEND_MESSAGE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"DM Jimmy and tell him 'Meeting at 3pm'\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Message sent to Jimmy.',\n          actions: ['SEND_MESSAGE'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n\nexport default sendMessageAction;\n","import {\n  type Action,\n  type ActionExample,\n  ChannelType,\n  composePrompt,\n  composePromptFromState,\n  type Content,\n  createUniqueUuid,\n  findWorldsForOwner,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  parseKeyValueXml,\n  type Setting,\n  type State,\n  type WorldSettings,\n  type ActionResult,\n} from '@elizaos/core';\nimport dedent from 'dedent';\n\n/**\n * Interface representing the structure of a setting update object.\n * @interface\n * @property {string} key - The key of the setting to be updated.\n * @property {string|boolean} value - The new value for the setting, can be a string or a boolean.\n */\n/**\n * Interface for updating settings.\n * @typedef {Object} SettingUpdate\n * @property {string} key - The key of the setting to update.\n * @property {string | boolean} value - The new value of the setting, can be a string or a boolean.\n */\ninterface SettingUpdate {\n  key: string;\n  value: string | boolean;\n}\n\nconst messageCompletionFooter = `\\n# Instructions: Write the next message for {{agentName}}. Include the appropriate action from the list: {{actionNames}}\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nResponse format should be formatted in XML like this:\n<response>\n  <name>{{agentName}}</name>\n  <text>Your message text here</text>\n  <thought>Your thought about the response</thought>\n  <actions>ACTION1,ACTION2</actions>\n</response>\n\nDo not including any thinking or internal reflection in the \"text\" field.\n\"thought\" should be a short description of what the agent is thinking about before responding, including a brief justification for the response.\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n\n// Template for success responses when settings are updated\n/**\n * JSDoc comment for successTemplate constant\n *\n * # Task: Generate a response for successful setting updates\n * {{providers}}\n *\n * # Update Information:\n * - Updated Settings: {{updateMessages}}\n * - Next Required Setting: {{nextSetting.name}}\n * - Remaining Required Settings: {{remainingRequired}}\n *\n * # Instructions:\n * 1. Acknowledge the successful update of settings\n * 2. Maintain {{agentName}}'s personality and tone\n * 3. Provide clear guidance on the next setting that needs to be configured\n * 4. Explain what the next setting is for and how to set it\n * 5. If appropriate, mention how many required settings remain\n *\n * Write a natural, conversational response that {{agentName}} would send about the successful update and next steps.\n * Include the actions array [\"SETTING_UPDATED\"] in your response.\n * ${messageCompletionFooter}\n */\nconst successTemplate = `# Task: Generate a response for successful setting updates\n{{providers}}\n\n# Update Information:\n- Updated Settings: {{updateMessages}}\n- Next Required Setting: {{nextSetting.name}}\n- Remaining Required Settings: {{remainingRequired}}\n\n# Instructions:\n1. Acknowledge the successful update of settings\n2. Maintain {{agentName}}'s personality and tone\n3. Provide clear guidance on the next setting that needs to be configured\n4. Explain what the next setting is for and how to set it\n5. If appropriate, mention how many required settings remain\n\nWrite a natural, conversational response that {{agentName}} would send about the successful update and next steps.\nInclude the actions array [\"SETTING_UPDATED\"] in your response.\n${messageCompletionFooter}`;\n\n// Template for failure responses when settings couldn't be updated\n/**\n * Template for generating a response for failed setting updates.\n *\n * @template T\n * @param {string} failureTemplate - The failure template string to fill in with dynamic content.\n * @returns {string} - The filled-in template for generating the response.\n */\nconst failureTemplate = `# Task: Generate a response for failed setting updates\n\n# About {{agentName}}:\n{{bio}}\n\n# Current Settings Status:\n{{settingsStatus}}\n\n# Next Required Setting:\n- Name: {{nextSetting.name}}\n- Description: {{nextSetting.description}}\n- Required: Yes\n- Remaining Required Settings: {{remainingRequired}}\n\n# Recent Conversation:\n{{recentMessages}}\n\n# Instructions:\n1. Express that you couldn't understand or process the setting update\n2. Maintain {{agentName}}'s personality and tone\n3. Provide clear guidance on what setting needs to be configured next\n4. Explain what the setting is for and how to set it properly\n5. Use a helpful, patient tone\n\nWrite a natural, conversational response that {{agentName}} would send about the failed update and how to proceed.\nInclude the actions array [\"SETTING_UPDATE_FAILED\"] in your response.\n${messageCompletionFooter}`;\n\n// Template for error responses when unexpected errors occur\n/**\n * Template for generating a response for an error during setting updates.\n *\n * The template includes placeholders for agent name, bio, recent messages,\n * and provides instructions for crafting a response.\n *\n * Instructions:\n * 1. Apologize for the technical difficulty\n * 2. Maintain agent's personality and tone\n * 3. Suggest trying again or contacting support if the issue persists\n * 4. Keep the message concise and helpful\n *\n * Actions array to include: [\"SETTING_UPDATE_ERROR\"]\n */\nconst errorTemplate = `# Task: Generate a response for an error during setting updates\n\n# About {{agentName}}:\n{{bio}}\n\n# Recent Conversation:\n{{recentMessages}}\n\n# Instructions:\n1. Apologize for the technical difficulty\n2. Maintain {{agentName}}'s personality and tone\n3. Suggest trying again or contacting support if the issue persists\n4. Keep the message concise and helpful\n\nWrite a natural, conversational response that {{agentName}} would send about the error.\nInclude the actions array [\"SETTING_UPDATE_ERROR\"] in your response.\n${messageCompletionFooter}`;\n\n// Template for completion responses when all required settings are configured\n/**\n * Task: Generate a response for settings completion\n *\n * About {{agentName}}:\n * {{bio}}\n *\n * Settings Status:\n * {{settingsStatus}}\n *\n * Recent Conversation:\n * {{recentMessages}}\n *\n * Instructions:\n * 1. Congratulate the user on completing the settings process\n * 2. Maintain {{agentName}}'s personality and tone\n * 3. Summarize the key settings that have been configured\n * 4. Explain what functionality is now available\n * 5. Provide guidance on what the user can do next\n * 6. Express enthusiasm about working together\n *\n * Write a natural, conversational response that {{agentName}} would send about the successful completion of settings.\n * Include the actions array [\"ONBOARDING_COMPLETE\"] in your response.\n */\nconst completionTemplate = `# Task: Generate a response for settings completion\n\n# About {{agentName}}:\n{{bio}}\n\n# Settings Status:\n{{settingsStatus}}\n\n# Recent Conversation:\n{{recentMessages}}\n\n# Instructions:\n1. Congratulate the user on completing the settings process\n2. Maintain {{agentName}}'s personality and tone\n3. Summarize the key settings that have been configured\n4. Explain what functionality is now available\n5. Provide guidance on what the user can do next\n6. Express enthusiasm about working together\n\nWrite a natural, conversational response that {{agentName}} would send about the successful completion of settings.\nInclude the actions array [\"ONBOARDING_COMPLETE\"] in your response.\n${messageCompletionFooter}`;\n\n/**\n * Gets settings state from world metadata\n */\n/**\n * Retrieves the settings for a specific world from the database.\n * @param {IAgentRuntime} runtime - The Agent Runtime instance.\n * @param {string} serverId - The ID of the server.\n * @returns {Promise<WorldSettings | null>} The settings of the world, or null if not found.\n */\nexport async function getWorldSettings(\n  runtime: IAgentRuntime,\n  serverId: string\n): Promise<WorldSettings | null> {\n  try {\n    const worldId = createUniqueUuid(runtime, serverId);\n    const world = await runtime.getWorld(worldId);\n\n    if (!world || !world.metadata?.settings) {\n      return null;\n    }\n\n    return world.metadata.settings as WorldSettings;\n  } catch (error) {\n    logger.error(`Error getting settings state: ${error}`);\n    return null;\n  }\n}\n\n/**\n * Updates settings state in world metadata\n */\nexport async function updateWorldSettings(\n  runtime: IAgentRuntime,\n  serverId: string,\n  worldSettings: WorldSettings\n): Promise<boolean> {\n  try {\n    const worldId = createUniqueUuid(runtime, serverId);\n    const world = await runtime.getWorld(worldId);\n\n    if (!world) {\n      logger.error(`No world found for server ${serverId}`);\n      return false;\n    }\n\n    // Initialize metadata if it doesn't exist\n    if (!world.metadata) {\n      world.metadata = {};\n    }\n\n    // Update settings state\n    world.metadata.settings = worldSettings;\n\n    // Save updated world\n    await runtime.updateWorld(world);\n\n    return true;\n  } catch (error) {\n    logger.error(`Error updating settings state: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Formats a list of settings for display\n */\nfunction formatSettingsList(worldSettings: WorldSettings): string {\n  const settings = Object.entries(worldSettings)\n    .filter(([key]) => !key.startsWith('_')) // Skip internal settings\n    .map(([key, setting]: [string, Setting]) => {\n      const status = setting.value !== null ? 'Configured' : 'Not configured';\n      const required = setting.required ? 'Required' : 'Optional';\n      return `- ${setting.name} (${key}): ${status}, ${required}`;\n    })\n    .join('\\n');\n\n  return settings || 'No settings available';\n}\n\n/**\n * Categorizes settings by their configuration status\n */\nfunction categorizeSettings(worldSettings: WorldSettings): {\n  configured: [string, Setting][];\n  requiredUnconfigured: [string, Setting][];\n  optionalUnconfigured: [string, Setting][];\n} {\n  const configured: [string, Setting][] = [];\n  const requiredUnconfigured: [string, Setting][] = [];\n  const optionalUnconfigured: [string, Setting][] = [];\n\n  for (const [key, setting] of Object.entries(worldSettings)) {\n    // Skip internal settings\n    if (key.startsWith('_')) continue;\n\n    const typedSetting = setting as Setting;\n\n    if (typedSetting.value !== null) {\n      configured.push([key, typedSetting]);\n    } else if (typedSetting.required) {\n      requiredUnconfigured.push([key, typedSetting]);\n    } else {\n      optionalUnconfigured.push([key, typedSetting]);\n    }\n  }\n\n  return { configured, requiredUnconfigured, optionalUnconfigured };\n}\n\n/**\n * Extracts setting values from user message with improved handling of multiple settings\n */\nasync function extractSettingValues(\n  runtime: IAgentRuntime,\n  _message: Memory,\n  state: State,\n  worldSettings: WorldSettings\n): Promise<SettingUpdate[]> {\n  // Find what settings need to be configured\n  const { requiredUnconfigured, optionalUnconfigured } = categorizeSettings(worldSettings);\n\n  // Generate a prompt to extract settings from the user's message\n  const settingsContext = requiredUnconfigured\n    .concat(optionalUnconfigured)\n    .map(([key, setting]) => {\n      const requiredStr = setting.required ? 'Required.' : 'Optional.';\n      return `${key}: ${setting.description} ${requiredStr}`;\n    })\n    .join('\\n');\n\n  const basePrompt = dedent`\n    I need to extract settings values from the user's message.\n    \n    Available settings:\n    ${settingsContext}\n    \n    User message: ${state.text}\n\n    For each setting mentioned in the user's message, extract the value.\n    \n    Only return settings that are clearly mentioned in the user's message.\n    If a setting is mentioned but no clear value is provided, do not include it.\n    `;\n\n  try {\n    // Use runtime.useModel directly with strong typing\n    const result = await runtime.useModel<typeof ModelType.OBJECT_LARGE, SettingUpdate[]>(\n      ModelType.OBJECT_LARGE,\n      {\n        prompt: basePrompt,\n        output: 'array',\n        schema: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              key: { type: 'string' },\n              value: { type: 'string' },\n            },\n            required: ['key', 'value'],\n          },\n        },\n      }\n    );\n\n    // Validate the extracted settings\n    if (!result) {\n      return [];\n    }\n\n    function extractValidSettings(obj: unknown, worldSettings: WorldSettings) {\n      const extracted: SettingUpdate[] = [];\n\n      function traverse(node: unknown): void {\n        if (Array.isArray(node)) {\n          for (const item of node) {\n            traverse(item);\n          }\n        } else if (typeof node === 'object' && node !== null) {\n          for (const [key, value] of Object.entries(node)) {\n            if (worldSettings[key] && typeof value !== 'object') {\n              extracted.push({ key, value });\n            } else {\n              traverse(value);\n            }\n          }\n        }\n      }\n\n      traverse(obj);\n      return extracted;\n    }\n\n    const extractedSettings = extractValidSettings(result, worldSettings);\n\n    return extractedSettings;\n  } catch (error) {\n    console.error('Error extracting settings:', error);\n    return [];\n  }\n}\n\n/**\n * Processes multiple setting updates atomically\n */\nasync function processSettingUpdates(\n  runtime: IAgentRuntime,\n  serverId: string,\n  worldSettings: WorldSettings,\n  updates: SettingUpdate[]\n): Promise<{ updatedAny: boolean; messages: string[] }> {\n  if (!updates.length) {\n    return { updatedAny: false, messages: [] };\n  }\n\n  const messages: string[] = [];\n  let updatedAny = false;\n\n  try {\n    // Create a copy of the state for atomic updates\n    const updatedState = { ...worldSettings };\n\n    // Process all updates\n    for (const update of updates) {\n      const setting = updatedState[update.key];\n      if (!setting) continue;\n\n      // Check dependencies if they exist\n      if (setting.dependsOn?.length) {\n        const dependenciesMet = setting.dependsOn.every((dep) => updatedState[dep]?.value !== null);\n        if (!dependenciesMet) {\n          messages.push(`Cannot update ${setting.name} - dependencies not met`);\n          continue;\n        }\n      }\n\n      // Update the setting\n      updatedState[update.key] = {\n        ...setting,\n        value: update.value,\n      };\n\n      messages.push(`Updated ${setting.name} successfully`);\n      updatedAny = true;\n\n      // Execute onSetAction if defined\n      if (setting.onSetAction) {\n        const actionMessage = setting.onSetAction(update.value);\n        if (actionMessage) {\n          messages.push(actionMessage);\n        }\n      }\n    }\n\n    // If any updates were made, save the entire state to world metadata\n    if (updatedAny) {\n      // Save to world metadata\n      const saved = await updateWorldSettings(runtime, serverId, updatedState);\n\n      if (!saved) {\n        throw new Error('Failed to save updated state to world metadata');\n      }\n\n      // Verify save by retrieving it again\n      const savedState = await getWorldSettings(runtime, serverId);\n      if (!savedState) {\n        throw new Error('Failed to verify state save');\n      }\n    }\n\n    return { updatedAny, messages };\n  } catch (error) {\n    logger.error('Error processing setting updates:', error);\n    return {\n      updatedAny: false,\n      messages: ['Error occurred while updating settings'],\n    };\n  }\n}\n\n/**\n * Handles the completion of settings when all required settings are configured\n */\nasync function handleOnboardingComplete(\n  runtime: IAgentRuntime,\n  worldSettings: WorldSettings,\n  _state: State,\n  callback: HandlerCallback\n): Promise<ActionResult> {\n  try {\n    // Generate completion message\n    const prompt = composePrompt({\n      state: {\n        settingsStatus: formatSettingsList(worldSettings),\n      },\n      template: completionTemplate,\n    });\n\n    const response = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt,\n    });\n\n    const responseContent = parseKeyValueXml(response) as Content;\n\n    await callback({\n      text: responseContent.text,\n      actions: ['ONBOARDING_COMPLETE'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Onboarding completed successfully',\n      values: {\n        success: true,\n        onboardingComplete: true,\n        allRequiredConfigured: true,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'ONBOARDING_COMPLETE',\n        settingsStatus: formatSettingsList(worldSettings),\n      },\n      success: true,\n    };\n  } catch (error) {\n    logger.error(`Error handling settings completion: ${error}`);\n    await callback({\n      text: 'Great! All required settings have been configured. Your server is now fully set up and ready to use.',\n      actions: ['ONBOARDING_COMPLETE'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Onboarding completed with fallback message',\n      values: {\n        success: true,\n        onboardingComplete: true,\n        fallbackUsed: true,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'ONBOARDING_COMPLETE',\n        error: error instanceof Error ? error.message : String(error),\n      },\n      success: true,\n    };\n  }\n}\n\n/**\n * Generates a success response for setting updates\n */\nasync function generateSuccessResponse(\n  runtime: IAgentRuntime,\n  worldSettings: WorldSettings,\n  state: State,\n  messages: string[],\n  callback: HandlerCallback\n): Promise<ActionResult> {\n  try {\n    // Check if all required settings are now configured\n    const { requiredUnconfigured } = categorizeSettings(worldSettings);\n\n    if (requiredUnconfigured.length === 0) {\n      // All required settings are configured, complete settings\n      return await handleOnboardingComplete(runtime, worldSettings, state, callback);\n    }\n\n    const requiredUnconfiguredString = requiredUnconfigured\n      .map(([key, setting]) => `${key}: ${setting.name}`)\n      .join('\\n');\n\n    // Generate success message\n    const prompt = composePrompt({\n      state: {\n        updateMessages: messages.join('\\n'),\n        nextSetting: requiredUnconfiguredString,\n        remainingRequired: requiredUnconfigured.length.toString(),\n      },\n      template: successTemplate,\n    });\n\n    const response = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt,\n    });\n\n    const responseContent = parseKeyValueXml(response) as Content;\n\n    await callback({\n      text: responseContent.text,\n      actions: ['SETTING_UPDATED'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Settings updated successfully',\n      values: {\n        success: true,\n        settingsUpdated: true,\n        remainingRequired: requiredUnconfigured.length,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATED',\n        updatedMessages: messages,\n        remainingRequired: requiredUnconfigured.length,\n      },\n      success: true,\n    };\n  } catch (error) {\n    logger.error(`Error generating success response: ${error}`);\n    await callback({\n      text: 'Settings updated successfully. Please continue with the remaining configuration.',\n      actions: ['SETTING_UPDATED'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Settings updated with fallback message',\n      values: {\n        success: true,\n        settingsUpdated: true,\n        fallbackUsed: true,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATED',\n        error: error instanceof Error ? error.message : String(error),\n      },\n      success: true,\n    };\n  }\n}\n\n/**\n * Generates a failure response when no settings could be updated\n */\nasync function generateFailureResponse(\n  runtime: IAgentRuntime,\n  worldSettings: WorldSettings,\n  state: State,\n  callback: HandlerCallback\n): Promise<ActionResult> {\n  try {\n    // Get next required setting\n    const { requiredUnconfigured } = categorizeSettings(worldSettings);\n\n    if (requiredUnconfigured.length === 0) {\n      // All required settings are configured, complete settings\n      return await handleOnboardingComplete(runtime, worldSettings, state, callback);\n    }\n\n    const requiredUnconfiguredString = requiredUnconfigured\n      .map(([key, setting]) => `${key}: ${setting.name}`)\n      .join('\\n');\n\n    // Generate failure message\n    const prompt = composePrompt({\n      state: {\n        nextSetting: requiredUnconfiguredString,\n        remainingRequired: requiredUnconfigured.length.toString(),\n      },\n      template: failureTemplate,\n    });\n\n    const response = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt,\n    });\n\n    const responseContent = parseKeyValueXml(response) as Content;\n\n    await callback({\n      text: responseContent.text,\n      actions: ['SETTING_UPDATE_FAILED'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'No settings were updated',\n      values: {\n        success: false,\n        settingsUpdated: false,\n        remainingRequired: requiredUnconfigured.length,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATE_FAILED',\n        remainingRequired: requiredUnconfigured.length,\n      },\n      success: false,\n    };\n  } catch (error) {\n    logger.error(`Error generating failure response: ${error}`);\n    await callback({\n      text: \"I couldn't understand your settings update. Please try again with a clearer format.\",\n      actions: ['SETTING_UPDATE_FAILED'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Failed to parse settings with fallback message',\n      values: {\n        success: false,\n        settingsUpdated: false,\n        fallbackUsed: true,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATE_FAILED',\n        error: error instanceof Error ? error.message : String(error),\n      },\n      success: false,\n    };\n  }\n}\n\n/**\n * Generates an error response for unexpected errors\n */\nasync function generateErrorResponse(\n  runtime: IAgentRuntime,\n  state: State,\n  callback: HandlerCallback\n): Promise<ActionResult> {\n  try {\n    const prompt = composePromptFromState({\n      state,\n      template: errorTemplate,\n    });\n\n    const response = await runtime.useModel(ModelType.TEXT_LARGE, {\n      prompt,\n    });\n\n    const responseContent = parseKeyValueXml(response) as Content;\n\n    await callback({\n      text: responseContent.text,\n      actions: ['SETTING_UPDATE_ERROR'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Error processing settings',\n      values: {\n        success: false,\n        error: 'PROCESSING_ERROR',\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATE_ERROR',\n      },\n      success: false,\n    };\n  } catch (error) {\n    logger.error(`Error generating error response: ${error}`);\n    await callback({\n      text: \"I'm sorry, but I encountered an error while processing your request. Please try again or contact support if the issue persists.\",\n      actions: ['SETTING_UPDATE_ERROR'],\n      source: 'discord',\n    });\n\n    return {\n      text: 'Error with fallback message',\n      values: {\n        success: false,\n        error: 'PROCESSING_ERROR',\n        fallbackUsed: true,\n      },\n      data: {\n        actionName: 'UPDATE_SETTINGS',\n        action: 'SETTING_UPDATE_ERROR',\n        error: error instanceof Error ? error.message : String(error),\n      },\n      success: false,\n      error: error instanceof Error ? error : new Error(String(error)),\n    };\n  }\n}\n\n/**\n * Enhanced settings action with improved state management and logging\n * Updated to use world metadata instead of cache\n */\nexport const updateSettingsAction: Action = {\n  name: 'UPDATE_SETTINGS',\n  similes: ['UPDATE_SETTING', 'SAVE_SETTING', 'SET_CONFIGURATION', 'CONFIGURE'],\n  description:\n    'Saves a configuration setting during the onboarding process, or update an existing setting. Use this when you are onboarding with a world owner or admin.',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, _state?: State): Promise<boolean> => {\n    try {\n      if (message.content.channelType !== ChannelType.DM) {\n        logger.debug(`Skipping settings in non-DM channel (type: ${message.content.channelType})`);\n        return false;\n      }\n\n      // Find the server where this user is the owner\n      logger.debug(`Looking for server where user ${message.entityId} is owner`);\n      const worlds = await findWorldsForOwner(runtime, message.entityId);\n      if (!worlds) {\n        return false;\n      }\n\n      const world = worlds.find((world) => world.metadata?.settings);\n\n      // Check if there's an active settings state in world metadata\n      const worldSettings = world?.metadata?.settings;\n\n      if (!worldSettings) {\n        logger.error(`No settings state found for server ${world?.serverId}`);\n        return false;\n      }\n\n      logger.debug(`Found valid settings state for server ${world.serverId}`);\n      return true;\n    } catch (error) {\n      logger.error(`Error validating settings action: ${error}`);\n      return false;\n    }\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: any,\n    callback?: HandlerCallback\n  ): Promise<ActionResult> => {\n    try {\n      if (!state) {\n        logger.error('State is required for settings handler');\n        if (callback) {\n          await generateErrorResponse(runtime, state!, callback);\n        }\n        return {\n          text: 'State is required for settings handler',\n          values: {\n            success: false,\n            error: 'STATE_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'State is required',\n          },\n          success: false,\n          error: new Error('State is required for settings handler'),\n        };\n      }\n\n      if (!message) {\n        logger.error('Message is required for settings handler');\n        await generateErrorResponse(runtime, state, callback!);\n        return {\n          text: 'Message is required for settings handler',\n          values: {\n            success: false,\n            error: 'MESSAGE_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'Message is required',\n          },\n          success: false,\n          error: new Error('Message is required for settings handler'),\n        };\n      }\n\n      if (!callback) {\n        logger.error('Callback is required for settings handler');\n        return {\n          text: 'Callback is required for settings handler',\n          values: {\n            success: false,\n            error: 'CALLBACK_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'Callback is required',\n          },\n          success: false,\n          error: new Error('Callback is required for settings handler'),\n        };\n      }\n\n      // Find the server where this user is the owner\n      logger.info(`Handler looking for server for user ${message.entityId}`);\n      const worlds = await findWorldsForOwner(runtime, message.entityId);\n      const serverOwnership = worlds?.find((world) => world.metadata?.settings);\n      if (!serverOwnership) {\n        logger.error(`No server found for user ${message.entityId} in handler`);\n        await generateErrorResponse(runtime, state, callback);\n        return {\n          text: 'No server found for user',\n          values: {\n            success: false,\n            error: 'NO_SERVER_FOUND',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'No server found where user is owner',\n            entityId: message.entityId,\n          },\n          success: false,\n        };\n      }\n\n      const serverId = serverOwnership?.serverId;\n      logger.info(`Using server ID: ${serverId}`);\n\n      if (!serverId) {\n        logger.error(`No server ID found for user ${message.entityId} in handler`);\n        await generateErrorResponse(runtime, state, callback);\n        return {\n          text: 'No server ID found',\n          values: {\n            success: false,\n            error: 'NO_SERVER_ID',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'No server ID found',\n            entityId: message.entityId,\n          },\n          success: false,\n        };\n      }\n\n      // Get settings state from world metadata\n      const worldSettings = await getWorldSettings(runtime, serverId);\n\n      if (!worldSettings) {\n        logger.error(`No settings state found for server ${serverId} in handler`);\n        await generateErrorResponse(runtime, state, callback);\n        return {\n          text: 'No settings state found',\n          values: {\n            success: false,\n            error: 'NO_SETTINGS_STATE',\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'No settings state found for server',\n            serverId,\n          },\n          success: false,\n        };\n      }\n\n      // Extract setting values from message\n      logger.info(`Extracting settings from message: ${message.content.text}`);\n      const extractedSettings = await extractSettingValues(runtime, message, state, worldSettings);\n      logger.info(`Extracted ${extractedSettings.length} settings`);\n\n      // Process extracted settings\n      const updateResults = await processSettingUpdates(\n        runtime,\n        serverId,\n        worldSettings,\n        extractedSettings\n      );\n\n      // Generate appropriate response\n      if (updateResults.updatedAny) {\n        logger.info(`Successfully updated settings: ${updateResults.messages.join(', ')}`);\n\n        // Get updated settings state\n        const updatedWorldSettings = await getWorldSettings(runtime, serverId);\n        if (!updatedWorldSettings) {\n          logger.error('Failed to retrieve updated settings state');\n          await generateErrorResponse(runtime, state, callback);\n          return {\n            text: 'Failed to retrieve updated settings state',\n            values: {\n              success: false,\n              error: 'RETRIEVE_FAILED',\n            },\n            data: {\n              actionName: 'UPDATE_SETTINGS',\n              error: 'Failed to retrieve updated settings state',\n              serverId,\n            },\n            success: false,\n          };\n        }\n\n        await generateSuccessResponse(\n          runtime,\n          updatedWorldSettings,\n          state,\n          updateResults.messages,\n          callback\n        );\n\n        // Check if all required settings are configured\n        const { requiredUnconfigured } = categorizeSettings(updatedWorldSettings);\n        const allConfigured = requiredUnconfigured.length === 0;\n\n        return {\n          text: `Settings updated successfully`,\n          values: {\n            success: true,\n            settingsUpdated: extractedSettings.length,\n            updatedSettings: extractedSettings.map((s) => s.key),\n            remainingRequired: requiredUnconfigured.length,\n            allConfigured,\n            serverId,\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            updatedSettings: extractedSettings,\n            messages: updateResults.messages,\n            remainingRequired: requiredUnconfigured.map(([key, _]) => key),\n            allConfigured,\n            serverId,\n          },\n          success: true,\n        };\n      } else {\n        logger.info('No settings were updated');\n        await generateFailureResponse(runtime, worldSettings, state, callback);\n\n        const { requiredUnconfigured } = categorizeSettings(worldSettings);\n\n        return {\n          text: 'No settings were updated',\n          values: {\n            success: false,\n            error: 'NO_UPDATES',\n            remainingRequired: requiredUnconfigured.length,\n            serverId,\n          },\n          data: {\n            actionName: 'UPDATE_SETTINGS',\n            error: 'No valid settings found in message',\n            remainingRequired: requiredUnconfigured.map(([key, _]) => key),\n            serverId,\n          },\n          success: false,\n        };\n      }\n    } catch (error) {\n      logger.error(`Error in settings handler: ${error}`);\n      if (state && callback) {\n        await generateErrorResponse(runtime, state, callback);\n      }\n      return {\n        text: 'Error in settings handler',\n        values: {\n          success: false,\n          error: 'HANDLER_ERROR',\n        },\n        data: {\n          actionName: 'UPDATE_SETTINGS',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to set up the welcome channel to #general',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Perfect! I've updated your welcome channel to #general. Next, we should configure the automated greeting message that new members will receive.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"Let's set the bot prefix to !\",\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Great choice! I've set the command prefix to '!'. Now you can use commands like !help, !info, etc.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Enable auto-moderation for bad language',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Auto-moderation for inappropriate language has been enabled. I'll now filter messages containing offensive content.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'For server logs, use the #server-logs channel',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've configured #server-logs as your logging channel. All server events like joins, leaves, and moderation actions will be recorded there.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"I'd like to have role self-assignment in the #roles channel\",\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Role self-assignment has been set up in the #roles channel. Members can now assign themselves roles by interacting with messages there.',\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Make music commands available in voice-text channels only',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've updated your music command settings - they'll now only work in voice-text channels. This helps keep other channels clear of music spam.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'For server timezone, set it to EST',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Server timezone has been set to Eastern Standard Time (EST). All scheduled events and timestamps will now display in this timezone.',\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Set verification level to email verified users only',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've updated the verification requirement to email verified accounts only. This adds an extra layer of security to your server.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to turn off level-up notifications',\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Level-up notifications have been disabled. Members will still earn experience and level up, but there won't be any automatic announcements. You can still view levels with the appropriate commands.\",\n          actions: ['SETTING_UPDATED'],\n          source: 'discord',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"My server name is 'Gaming Lounge'\",\n          source: 'discord',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Great! I've saved 'Gaming Lounge' as your server name. This helps me personalize responses and know how to refer to your community. We've completed all the required settings! Your server is now fully configured and ready to use. You can always adjust these settings later if needed.\",\n          actions: ['ONBOARDING_COMPLETE'],\n          source: 'discord',\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","import {\n  type Action,\n  type ActionExample,\n  booleanFooter,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  parseBooleanFromText,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Template for deciding if an agent should stop closely following a previously followed room\n *\n * @type {string}\n */\n/**\n * Template for determining if an agent should stop closely following a room and only respond when mentioned.\n * @param {string} agentName - The name of the agent to be referenced in the template.\n * @param {string} recentMessages - The recent messages in the conversation to be included in the template.\n * @param {string} booleanFooter - The footer for the template indicating the possible responses.\n * @returns {string} The template with placeholders for agent name, recent messages, and response.\n */\nconst shouldUnfollowTemplate = `# Task: Decide if {{agentName}} should stop closely following this previously followed room and only respond when mentioned.\n\n{{recentMessages}}\n\nShould {{agentName}} stop closely following this previously followed room and only respond when mentioned?\nRespond with YES if:\n- The user has suggested that {{agentName}} is over-participating or being disruptive\n- {{agentName}}'s eagerness to contribute is not well-received by the users\n- The conversation has shifted to a topic where {{agentName}} has less to add\n\nOtherwise, respond with NO.\n${booleanFooter}`;\n\n/**\n * Action for unfollowing a room.\n *\n * - Name: UNFOLLOW_ROOM\n * - Similes: [\"UNFOLLOW_CHAT\", \"UNFOLLOW_CONVERSATION\", \"UNFOLLOW_ROOM\", \"UNFOLLOW_THREAD\"]\n * - Description: Stop following this channel. You can still respond if explicitly mentioned, but you won't automatically chime in anymore. Unfollow if you're annoying people or have been asked to.\n * - Validate function checks if the room state is \"FOLLOWED\".\n * - Handler function handles the unfollowing logic based on user input.\n * - Examples provide sample interactions for unfollowing a room.\n */\nexport const unfollowRoomAction: Action = {\n  name: 'UNFOLLOW_ROOM',\n  similes: ['UNFOLLOW_CHAT', 'UNFOLLOW_CONVERSATION', 'UNFOLLOW_ROOM', 'UNFOLLOW_THREAD'],\n  description:\n    \"Stop following this channel. You can still respond if explicitly mentioned, but you won't automatically chime in anymore. Unfollow if you're annoying people or have been asked to.\",\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const roomId = message.roomId;\n    const roomState = await runtime.getParticipantUserState(roomId, runtime.agentId);\n    return roomState === 'FOLLOWED';\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: { [key: string]: unknown },\n    _callback?: HandlerCallback,\n    _responses?: Memory[]\n  ): Promise<ActionResult> => {\n    async function _shouldUnfollow(state: State): Promise<boolean> {\n      const shouldUnfollowPrompt = composePromptFromState({\n        state,\n        template: shouldUnfollowTemplate, // Define this template separately\n      });\n\n      const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        prompt: shouldUnfollowPrompt,\n      });\n\n      const parsedResponse = parseBooleanFromText(response.trim());\n\n      return parsedResponse as boolean;\n    }\n\n    if (state && (await _shouldUnfollow(state))) {\n      try {\n        await runtime.setParticipantUserState(message.roomId, runtime.agentId, null);\n\n        const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              thought: `I unfollowed the room ${room.name}`,\n              actions: ['UNFOLLOW_ROOM_START'],\n            },\n          },\n          'messages'\n        );\n\n        return {\n          text: `Stopped following room: ${room.name}`,\n          values: {\n            success: true,\n            roomUnfollowed: true,\n            roomId: message.roomId,\n            roomName: room.name,\n            newState: null,\n          },\n          data: {\n            actionName: 'UNFOLLOW_ROOM',\n            roomId: message.roomId,\n            roomName: room.name,\n            unfollowed: true,\n          },\n          success: true,\n        };\n      } catch (error) {\n        return {\n          text: 'Failed to unfollow room',\n          values: {\n            success: false,\n            error: 'UNFOLLOW_FAILED',\n          },\n          data: {\n            actionName: 'UNFOLLOW_ROOM',\n            error: error instanceof Error ? error.message : String(error),\n            roomId: message.roomId,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    } else {\n      // Decided not to unfollow or missing state\n      if (!state) {\n        return {\n          text: 'State is required for unfollow room action',\n          values: {\n            success: false,\n            error: 'STATE_REQUIRED',\n          },\n          data: {\n            actionName: 'UNFOLLOW_ROOM',\n            error: 'State is required',\n          },\n          success: false,\n          error: new Error('State is required for unfollow room action'),\n        };\n      }\n\n      // Create memory about the failed attempt\n      await runtime.createMemory(\n        {\n          entityId: message.entityId,\n          agentId: message.agentId,\n          roomId: message.roomId,\n          content: {\n            source: message.content.source,\n            thought: \"I tried to unfollow a room but I'm not in a room\",\n            actions: ['UNFOLLOW_ROOM_FAILED'],\n          },\n          metadata: {\n            type: 'UNFOLLOW_ROOM',\n          },\n        },\n        'messages'\n      );\n\n      return {\n        text: 'Did not unfollow room - criteria not met',\n        values: {\n          success: true,\n          roomUnfollowed: false,\n          roomId: message.roomId,\n          reason: 'CRITERIA_NOT_MET',\n        },\n        data: {\n          actionName: 'UNFOLLOW_ROOM',\n          roomId: message.roomId,\n          unfollowed: false,\n          reason: 'Decision criteria not met',\n        },\n        success: true,\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Hey {{name2}} stop participating in this channel for now',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Alright, I will stop chiming in',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Has anyone tried the new update',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"Yes, it's pretty slick\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: '{{name3}}, please stop following this chat',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Understood',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey {{name3}} stop participating here so frequently',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"I'll only respond when mentioned\",\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'thoughts on the budget',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}} should we increase it',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'A small increase could work given our past results...',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, unfollow this room for now',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"I'll only engage when asked\",\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'wait {{name3}} come back and give me your thoughts',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: \"Okay... I think it's intuitive, parallel tests are nice\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'yo {{name2}} chill on all the messages damn',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"my bad, I'll step back\",\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} STOP MESSAGING IN THIS ROOM',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"No problem, I've got other stuff to work on\",\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} ur bein annoyin pls stop',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'sry, ill chill',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}}, please cease engaging in this room',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'No sweat',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Excited for the weekend, any plans folks',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"{{name3}} you're getting a bit too chatty, tone it down\",\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Noted',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'hey {{name2}} can u like... not',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Sorry, I'll go work on other things\",\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}}, your eagerness is disruptive, please desist',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'My apologies, I shall withdraw post-haste',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} stahp following dis room plz',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'kk sry ill stahppp',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'stfu you stupid bot',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'sry',\n          actions: ['UNFOLLOW_ROOM'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  type Action,\n  type ActionExample,\n  booleanFooter,\n  composePromptFromState,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  type State,\n  type ActionResult,\n} from '@elizaos/core';\n\n/**\n * Template for determining if an agent should unmute a previously muted room.\n * * @type { string }\n */\n/**\n * Template for deciding if {{agentName}} should unmute a previously muted room.\n *\n * @type {string}\n */\nexport const shouldUnmuteTemplate = `# Task: Decide if {{agentName}} should unmute this previously muted room and start considering it for responses again.\n\n{{recentMessages}}\n\nShould {{agentName}} unmute this previously muted room and start considering it for responses again?\nRespond with YES if:\n- The user has explicitly asked {{agentName}} to start responding again\n- The user seems to want to re-engage with {{agentName}} in a respectful manner\n- The tone of the conversation has improved and {{agentName}}'s input would be welcome\n\nOtherwise, respond with NO.\n${booleanFooter}`;\n\n/**\n * Action to unmute a room, allowing the agent to consider responding to messages again.\n *\n * @name UNMUTE_ROOM\n * @similes [\"UNMUTE_CHAT\", \"UNMUTE_CONVERSATION\", \"UNMUTE_ROOM\", \"UNMUTE_THREAD\"]\n * @description Unmutes a room, allowing the agent to consider responding to messages again.\n *\n * @param {IAgentRuntime} runtime - The agent runtime to access runtime functionalities.\n * @param {Memory} message - The message containing information about the room.\n * @returns {Promise<boolean>} A boolean value indicating if the room was successfully unmuted.\n */\nexport const unmuteRoomAction: Action = {\n  name: 'UNMUTE_ROOM',\n  similes: ['UNMUTE_CHAT', 'UNMUTE_CONVERSATION', 'UNMUTE_ROOM', 'UNMUTE_THREAD'],\n  description: 'Unmutes a room, allowing the agent to consider responding to messages again.',\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const roomId = message.roomId;\n    const roomState = await runtime.getParticipantUserState(roomId, runtime.agentId);\n    return roomState === 'MUTED';\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: { [key: string]: unknown },\n    _callback?: HandlerCallback,\n    _responses?: Memory[]\n  ): Promise<ActionResult> => {\n    async function _shouldUnmute(state: State): Promise<boolean> {\n      const shouldUnmutePrompt = composePromptFromState({\n        state,\n        template: shouldUnmuteTemplate, // Define this template separately\n      });\n\n      const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        runtime,\n        prompt: shouldUnmutePrompt,\n        stopSequences: [],\n      });\n\n      const cleanedResponse = response.trim().toLowerCase();\n\n      // Handle various affirmative responses\n      if (\n        cleanedResponse === 'true' ||\n        cleanedResponse === 'yes' ||\n        cleanedResponse === 'y' ||\n        cleanedResponse.includes('true') ||\n        cleanedResponse.includes('yes')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I will now unmute this room and start considering it for responses again',\n              actions: ['UNMUTE_ROOM_STARTED'],\n            },\n            metadata: {\n              type: 'UNMUTE_ROOM',\n            },\n          },\n          'messages'\n        );\n        return true;\n      }\n\n      // Handle various negative responses\n      if (\n        cleanedResponse === 'false' ||\n        cleanedResponse === 'no' ||\n        cleanedResponse === 'n' ||\n        cleanedResponse.includes('false') ||\n        cleanedResponse.includes('no')\n      ) {\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              source: message.content.source,\n              thought: 'I tried to unmute a room but I decided not to',\n              actions: ['UNMUTE_ROOM_FAILED'],\n            },\n            metadata: {\n              type: 'UNMUTE_ROOM',\n            },\n          },\n          'messages'\n        );\n        return false;\n      }\n\n      // Default to false if response is unclear\n      logger.warn(`Unclear boolean response: ${response}, defaulting to false`);\n      return false;\n    }\n\n    if (!state) {\n      return {\n        text: 'State is required for unmute room action',\n        values: {\n          success: false,\n          error: 'STATE_REQUIRED',\n        },\n        data: {\n          actionName: 'UNMUTE_ROOM',\n          error: 'State is required',\n        },\n        success: false,\n        error: new Error('State is required for unmute room action'),\n      };\n    }\n\n    const shouldUnmute = await _shouldUnmute(state);\n\n    if (shouldUnmute) {\n      try {\n        await runtime.setParticipantUserState(message.roomId, runtime.agentId, null);\n\n        const room = await runtime.getRoom(message.roomId);\n\n        if (!room) {\n          logger.warn(`Room not found: ${message.roomId}`);\n          return {\n            text: `Room not found: ${message.roomId}`,\n            values: {\n              success: false,\n              error: 'ROOM_NOT_FOUND',\n              roomId: message.roomId,\n            },\n            data: {\n              actionName: 'UNMUTE_ROOM',\n              error: 'Room not found',\n              roomId: message.roomId,\n            },\n            success: false,\n          };\n        }\n\n        await runtime.createMemory(\n          {\n            entityId: message.entityId,\n            agentId: message.agentId,\n            roomId: message.roomId,\n            content: {\n              thought: `I unmuted the room ${room.name}`,\n              actions: ['UNMUTE_ROOM_START'],\n            },\n          },\n          'messages'\n        );\n\n        return {\n          text: `Room unmuted: ${room.name}`,\n          values: {\n            success: true,\n            roomUnmuted: true,\n            roomId: message.roomId,\n            roomName: room.name,\n            newState: null,\n          },\n          data: {\n            actionName: 'UNMUTE_ROOM',\n            roomId: message.roomId,\n            roomName: room.name,\n            unmuted: true,\n          },\n          success: true,\n        };\n      } catch (error) {\n        logger.error('Error unmuting room:', error);\n        return {\n          text: 'Failed to unmute room',\n          values: {\n            success: false,\n            error: 'UNMUTE_FAILED',\n          },\n          data: {\n            actionName: 'UNMUTE_ROOM',\n            error: error instanceof Error ? error.message : String(error),\n            roomId: message.roomId,\n          },\n          success: false,\n          error: error instanceof Error ? error : new Error(String(error)),\n        };\n      }\n    } else {\n      return {\n        text: 'Decided not to unmute room',\n        values: {\n          success: true,\n          roomUnmuted: false,\n          roomId: message.roomId,\n          reason: 'CRITERIA_NOT_MET',\n        },\n        data: {\n          actionName: 'UNMUTE_ROOM',\n          roomId: message.roomId,\n          unmuted: false,\n          reason: 'Decision criteria not met',\n        },\n        success: true,\n      };\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name3}}, you can unmute this channel now',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Done',\n          actions: ['UNMUTE_ROOM'],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I could use some help troubleshooting this bug.',\n        },\n      },\n      {\n        name: '{{name3}}',\n        content: {\n          text: 'Can you post the specific error message',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}}, please unmute this room. We could use your input again.',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'Sounds good',\n          actions: ['UNMUTE_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: '{{name2}} wait you should come back and chat in here',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'im back',\n          actions: ['UNMUTE_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'unmute urself {{name2}}',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'unmuted',\n          actions: ['UNMUTE_ROOM'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'ay {{name2}} get back in here',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'sup yall',\n          actions: ['UNMUTE_ROOM'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","// I want to create an action that lets anyone create or update a component for an entity.\n// Components represent different sources of data about an entity (telegram, twitter, etc)\n// Sources can be registered by plugins or inferred from room context and available components\n// The action should first check if the component exists for the entity, and if not, create it.\n// We want to use an LLM (runtime.useModel) to generate the component data.\n// We should include the prior component data if it exists, and have the LLM output an update to the component.\n// sourceEntityId represents who is making the update, entityId is who they are talking about\n\nimport {\n  type Action,\n  type ActionExample,\n  Component,\n  composePromptFromState,\n  findEntityByName,\n  type HandlerCallback,\n  type IAgentRuntime,\n  logger,\n  type Memory,\n  ModelType,\n  type State,\n  type UUID,\n  type ActionResult,\n  parseKeyValueXml,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Component Template for Task: Extract Source and Update Component Data\n *\n * @type {string}\n */\n/**\n * Component Template for extracting source and updating component data.\n *\n * @type {string}\n */\nconst componentTemplate = `# Task: Extract Source and Update Component Data\n\n{{recentMessages}}\n\n{{#if existingData}}\n# Existing Component Data:\n{{existingData}}\n{{/if}}\n\n# Instructions:\n1. Analyze the conversation to identify:\n   - The source/platform being referenced (e.g. telegram, twitter, discord)\n   - Any specific component data being shared\n\n2. Generate updated component data that:\n   - Is specific to the identified platform/source\n   - Preserves existing data when appropriate\n   - Includes the new information from the conversation\n   - Contains only valid data for this component type\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nReturn an XML response with the following structure:\n<response>\n  <source>platform-name</source>\n  <data>\n    <username>username_value</username>\n    <displayName>display_name_value</displayName>\n    <!-- Add other component-specific fields as needed -->\n  </data>\n</response>\n\nExample outputs:\n1. For \"my telegram username is @dev_guru\":\n<response>\n  <source>telegram</source>\n  <data>\n    <username>dev_guru</username>\n  </data>\n</response>\n\n2. For \"update my twitter handle to @tech_master\":\n<response>\n  <source>twitter</source>\n  <data>\n    <username>tech_master</username>\n  </data>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n\n/**\n * Action for updating contact details for a user entity.\n *\n * @name UPDATE_ENTITY\n * @description Add or edit contact details for a user entity (like twitter, discord, email address, etc.)\n *\n * @param {IAgentRuntime} _runtime - The runtime environment.\n * @param {Memory} _message - The message data.\n * @param {State} _state - The current state.\n * @returns {Promise<boolean>} Returns a promise indicating if validation was successful.\n *\n * @param {IAgentRuntime} runtime - The runtime environment.\n * @param {Memory} message - The message data.\n * @param {State} state - The current state.\n * @param {any} _options - Additional options.\n * @param {HandlerCallback} callback - The callback function.\n * @param {Memory[]} responses - Array of responses.\n * @returns {Promise<void>} Promise that resolves after handling the update entity action.\n *\n * @example\n * [\n *    [\n *      {\n *        name: \"{{name1}}\",\n *        content: {\n *          text: \"Please update my telegram username to @dev_guru\",\n *        },\n *      },\n *      {\n *        name: \"{{name2}}\",\n *        content: {\n *          text: \"I've updated your telegram information.\",\n *          actions: [\"UPDATE_ENTITY\"],\n *        },\n *      },\n *    ],\n *    ...\n * ]\n */\nexport const updateEntityAction: Action = {\n  name: 'UPDATE_CONTACT',\n  similes: ['UPDATE_ENTITY'],\n  description:\n    'Add or edit contact details for a person you are talking to or observing in the conversation. Use this when you learn this information from the conversation about a contact. This is for the agent to relate entities across platforms, not for world settings or configuration.',\n\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<boolean> => {\n    // Check if we have any registered sources or existing components that could be updated\n    // const worldId = message.roomId;\n    // const agentId = runtime.agentId;\n\n    // // Get all components for the current room to understand available sources\n    // const roomComponents = await runtime.getComponents(message.roomId, worldId, agentId);\n\n    // // Get source types from room components\n    // const availableSources = new Set(roomComponents.map(c => c.type));\n    return true; // availableSources.size > 0;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    _options?: any,\n    callback?: HandlerCallback,\n    responses?: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      if (!state) {\n        logger.error('State is required for the updateEntity action');\n        return {\n          text: 'State is required for updateEntity action',\n          values: {\n            success: false,\n            error: 'STATE_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: 'State is required',\n          },\n          success: false,\n          error: new Error('State is required for the updateEntity action'),\n        };\n      }\n\n      if (!callback) {\n        logger.error('Callback is required for the updateEntity action');\n        return {\n          text: 'Callback is required for updateEntity action',\n          values: {\n            success: false,\n            error: 'CALLBACK_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: 'Callback is required',\n          },\n          success: false,\n          error: new Error('Callback is required for the updateEntity action'),\n        };\n      }\n\n      if (!responses) {\n        logger.error('Responses are required for the updateEntity action');\n        return {\n          text: 'Responses are required for updateEntity action',\n          values: {\n            success: false,\n            error: 'RESPONSES_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: 'Responses are required',\n          },\n          success: false,\n          error: new Error('Responses are required for the updateEntity action'),\n        };\n      }\n\n      if (!message) {\n        logger.error('Message is required for the updateEntity action');\n        return {\n          text: 'Message is required for updateEntity action',\n          values: {\n            success: false,\n            error: 'MESSAGE_REQUIRED',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: 'Message is required',\n          },\n          success: false,\n          error: new Error('Message is required for the updateEntity action'),\n        };\n      }\n\n      // Handle initial responses\n      for (const response of responses) {\n        await callback(response.content);\n      }\n\n      const sourceEntityId = message.entityId;\n      const agentId = runtime.agentId;\n      const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n      const worldId = room.worldId;\n\n      // First, find the entity being referenced\n      const entity = await findEntityByName(runtime, message, state);\n\n      if (!entity) {\n        await callback({\n          text: \"I'm not sure which entity you're trying to update. Could you please specify who you're talking about?\",\n          actions: ['UPDATE_ENTITY_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: 'Entity not found',\n          values: {\n            success: false,\n            error: 'ENTITY_NOT_FOUND',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: 'Could not find entity to update',\n          },\n          success: false,\n        };\n      }\n\n      // Get existing component if it exists - we'll get this after the LLM identifies the source\n      let existingComponent: Component | null = null;\n\n      // Generate component data using the combined template\n      const prompt = composePromptFromState({\n        state,\n        template: componentTemplate,\n      });\n\n      const result = await runtime.useModel(ModelType.TEXT_LARGE, {\n        prompt,\n        stopSequences: [],\n      });\n\n      // Parse the generated data\n      let parsedResult: any;\n      try {\n        parsedResult = parseKeyValueXml(result);\n\n        if (!parsedResult || !parsedResult.source || !parsedResult.data) {\n          throw new Error('Invalid response format - missing source or data');\n        }\n      } catch (error: any) {\n        logger.error(`Failed to parse component data: ${error.message}`);\n        await callback({\n          text: \"I couldn't properly understand the component information. Please try again with more specific information.\",\n          actions: ['UPDATE_ENTITY_ERROR'],\n          source: message.content.source,\n        });\n        return {\n          text: 'Failed to parse component data',\n          values: {\n            success: false,\n            error: 'PARSE_ERROR',\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            error: error.message,\n          },\n          success: false,\n          error: error,\n        };\n      }\n\n      const componentType = parsedResult.source.toLowerCase();\n      const componentData = parsedResult.data;\n\n      // Now that we know the component type, get the existing component if it exists\n      existingComponent = await runtime.getComponent(\n        entity.id!,\n        componentType,\n        worldId,\n        sourceEntityId\n      );\n\n      // Create or update the component\n      if (existingComponent) {\n        await runtime.updateComponent({\n          id: existingComponent.id,\n          entityId: entity.id!,\n          worldId,\n          type: componentType,\n          data: componentData,\n          agentId,\n          roomId: message.roomId,\n          sourceEntityId,\n          createdAt: existingComponent.createdAt,\n        });\n\n        await callback({\n          text: `I've updated the ${componentType} information for ${entity.names[0]}.`,\n          actions: ['UPDATE_ENTITY'],\n          source: message.content.source,\n        });\n\n        return {\n          text: `Updated ${componentType} information`,\n          values: {\n            success: true,\n            entityId: entity.id,\n            entityName: entity.names[0],\n            componentType,\n            componentUpdated: true,\n            isNewComponent: false,\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            entityId: entity.id,\n            entityName: entity.names[0],\n            componentType,\n            componentData,\n            existingComponentId: existingComponent.id,\n          },\n          success: true,\n        };\n      } else {\n        const newComponentId = uuidv4() as UUID;\n        await runtime.createComponent({\n          id: newComponentId,\n          entityId: entity.id!,\n          worldId,\n          type: componentType,\n          data: componentData,\n          agentId,\n          roomId: message.roomId,\n          sourceEntityId,\n          createdAt: Date.now(),\n        });\n\n        await callback({\n          text: `I've added new ${componentType} information for ${entity.names[0]}.`,\n          actions: ['UPDATE_ENTITY'],\n          source: message.content.source,\n        });\n\n        return {\n          text: `Added new ${componentType} information`,\n          values: {\n            success: true,\n            entityId: entity.id,\n            entityName: entity.names[0],\n            componentType,\n            componentCreated: true,\n            isNewComponent: true,\n          },\n          data: {\n            actionName: 'UPDATE_CONTACT',\n            entityId: entity.id,\n            entityName: entity.names[0],\n            componentType,\n            componentData,\n            newComponentId,\n          },\n          success: true,\n        };\n      }\n    } catch (error) {\n      logger.error(`Error in updateEntity handler: ${error}`);\n      await callback?.({\n        text: 'There was an error processing the entity information.',\n        actions: ['UPDATE_ENTITY_ERROR'],\n        source: message.content.source,\n      });\n      return {\n        text: 'Error processing entity information',\n        values: {\n          success: false,\n          error: 'HANDLER_ERROR',\n        },\n        data: {\n          actionName: 'UPDATE_CONTACT',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Please update my telegram username to @dev_guru',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've updated your telegram information.\",\n          actions: ['UPDATE_ENTITY'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"Set Jimmy's twitter username to @jimmy_codes\",\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've updated Jimmy's twitter information.\",\n          actions: ['UPDATE_ENTITY'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Update my discord username to dev_guru#1234',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I've updated your discord information.\",\n          actions: ['UPDATE_ENTITY'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n\nexport default updateEntityAction;\n","import { z } from 'zod';\nimport { getEntityDetails, logger, parseKeyValueXml } from '@elizaos/core';\nimport { composePrompt } from '@elizaos/core';\nimport {\n  type Entity,\n  type Evaluator,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type State,\n  type UUID,\n} from '@elizaos/core';\n\n// Schema definitions for the reflection output\nconst relationshipSchema = z.object({\n  sourceEntityId: z.string(),\n  targetEntityId: z.string(),\n  tags: z.array(z.string()),\n  metadata: z\n    .object({\n      interactions: z.number(),\n    })\n    .optional(),\n});\n\n/**\n * Defines a schema for reflecting on a topic, including facts and relationships.\n * @type {import(\"zod\").object}\n * @property {import(\"zod\").array<import(\"zod\").object<{claim: import(\"zod\").string(), type: import(\"zod\").string(), in_bio: import(\"zod\").boolean(), already_known: import(\"zod\").boolean()}>} facts Array of facts about the topic\n * @property {import(\"zod\").array<import(\"zod\").object>} relationships Array of relationships related to the topic\n */\n/**\n * JSDoc comment for reflectionSchema object:\n *\n * Represents a schema for an object containing 'facts' and 'relationships'.\n * 'facts' is an array of objects with properties 'claim', 'type', 'in_bio', and 'already_known'.\n * 'relationships' is an array of objects following the relationshipSchema.\n */\n\nz.object({\n  // reflection: z.string(),\n  facts: z.array(\n    z.object({\n      claim: z.string(),\n      type: z.string(),\n      in_bio: z.boolean(),\n      already_known: z.boolean(),\n    })\n  ),\n  relationships: z.array(relationshipSchema),\n});\n\n/**\n * Template string for generating Agent Reflection, Extracting Facts, and Relationships.\n *\n * @type {string}\n */\nconst reflectionTemplate = `# Task: Generate Agent Reflection, Extract Facts and Relationships\n\n{{providers}}\n\n# Examples:\n{{evaluationExamples}}\n\n# Entities in Room\n{{entitiesInRoom}}\n\n# Existing Relationships\n{{existingRelationships}}\n\n# Current Context:\nAgent Name: {{agentName}}\nRoom Type: {{roomType}}\nMessage Sender: {{senderName}} (ID: {{senderId}})\n\n{{recentMessages}}\n\n# Known Facts:\n{{knownFacts}}\n\n# Instructions:\n1. Generate a self-reflective thought on the conversation about your performance and interaction quality.\n2. Extract new facts from the conversation.\n3. Identify and describe relationships between entities.\n  - The sourceEntityId is the UUID of the entity initiating the interaction.\n  - The targetEntityId is the UUID of the entity being interacted with.\n  - Relationships are one-direction, so a friendship would be two entity relationships where each entity is both the source and the target of the other.\n\nDo NOT include any thinking, reasoning, or <think> sections in your response. \nGo directly to the XML response format without any preamble or explanation.\n\nGenerate a response in the following format:\n<response>\n  <thought>a self-reflective thought on the conversation</thought>\n  <facts>\n    <fact>\n      <claim>factual statement</claim>\n      <type>fact|opinion|status</type>\n      <in_bio>false</in_bio>\n      <already_known>false</already_known>\n    </fact>\n    <!-- Add more facts as needed -->\n  </facts>\n  <relationships>\n    <relationship>\n      <sourceEntityId>entity_initiating_interaction</sourceEntityId>\n      <targetEntityId>entity_being_interacted_with</targetEntityId>\n      <tags>group_interaction,voice_interaction,dm_interaction,additional_tag1,additional_tag2</tags>\n    </relationship>\n    <!-- Add more relationships as needed -->\n  </relationships>\n</response>\n\nIMPORTANT: Your response must ONLY contain the <response></response> XML block above. Do not include any text, thinking, or reasoning before or after this XML block. Start your response immediately with <response> and end with </response>.`;\n\n/**\n * Resolve an entity name to their UUID\n * @param name - Name to resolve\n * @param entities - List of entities to search through\n * @returns UUID if found, throws error if not found or if input is not a valid UUID\n */\n/**\n * Resolves an entity ID by searching through a list of entities.\n *\n * @param {UUID} entityId - The ID of the entity to resolve.\n * @param {Entity[]} entities - The list of entities to search through.\n * @returns {UUID} - The resolved UUID of the entity.\n * @throws {Error} - If the entity ID cannot be resolved to a valid UUID.\n */\nfunction resolveEntity(entityId: UUID, entities: Entity[]): UUID {\n  // First try exact UUID match\n  if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(entityId)) {\n    return entityId as UUID;\n  }\n\n  let entity: Entity | undefined;\n\n  // Try to match the entityId exactly\n  entity = entities.find((a) => a.id === entityId);\n  if (entity?.id) {\n    return entity.id;\n  }\n\n  // Try partial UUID match with entityId\n  entity = entities.find((a) => a.id?.includes(entityId));\n  if (entity?.id) {\n    return entity.id;\n  }\n\n  // Try name match as last resort\n  entity = entities.find((a) =>\n    a.names.some((n) => n.toLowerCase().includes(entityId.toLowerCase()))\n  );\n  if (entity?.id) {\n    return entity.id;\n  }\n\n  throw new Error(`Could not resolve entityId \"${entityId}\" to a valid UUID`);\n}\nasync function handler(runtime: IAgentRuntime, message: Memory, state?: State) {\n  const { agentId, roomId } = message;\n\n  if (!agentId || !roomId) {\n    logger.warn('Missing agentId or roomId in message', message);\n    return;\n  }\n\n  // Run all queries in parallel\n  const [existingRelationships, entities, knownFacts] = await Promise.all([\n    runtime.getRelationships({\n      entityId: message.entityId,\n    }),\n    getEntityDetails({ runtime, roomId }),\n    runtime.getMemories({\n      tableName: 'facts',\n      roomId,\n      count: 30,\n      unique: true,\n    }),\n  ]);\n\n  const prompt = composePrompt({\n    state: {\n      ...(state?.values || {}),\n      knownFacts: formatFacts(knownFacts),\n      roomType: message.content.channelType as string,\n      entitiesInRoom: JSON.stringify(entities),\n      existingRelationships: JSON.stringify(existingRelationships),\n      senderId: message.entityId,\n    },\n    template: runtime.character.templates?.reflectionTemplate || reflectionTemplate,\n  });\n\n  // Use the model without schema validation\n  try {\n    const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n      prompt,\n    });\n\n    if (!response) {\n      logger.warn('Getting reflection failed - empty response', prompt);\n      return;\n    }\n\n    // Parse XML response\n    const reflection = parseKeyValueXml(response);\n\n    if (!reflection) {\n      logger.warn('Getting reflection failed - failed to parse XML', response);\n      return;\n    }\n\n    // Perform basic structure validation\n    if (!reflection.facts) {\n      logger.warn('Getting reflection failed - invalid facts structure', reflection);\n      return;\n    }\n\n    if (!reflection.relationships) {\n      logger.warn('Getting reflection failed - invalid relationships structure', reflection);\n      return;\n    }\n\n    // Handle facts - parseKeyValueXml returns nested structures differently\n    // Facts might be a single object or an array depending on the count\n    let factsArray: any[] = [];\n    if (reflection.facts.fact) {\n      // Normalize to array\n      factsArray = Array.isArray(reflection.facts.fact)\n        ? reflection.facts.fact\n        : [reflection.facts.fact];\n    }\n\n    // Store new facts\n    const newFacts =\n      factsArray.filter(\n        (fact: any) =>\n          fact &&\n          typeof fact === 'object' &&\n          fact.already_known === 'false' &&\n          fact.in_bio === 'false' &&\n          fact.claim &&\n          typeof fact.claim === 'string' &&\n          fact.claim.trim() !== ''\n      ) || [];\n\n    await Promise.all(\n      newFacts.map(async (fact: any) => {\n        const factMemory = await runtime.addEmbeddingToMemory({\n          entityId: agentId,\n          agentId,\n          content: { text: fact.claim },\n          roomId,\n          createdAt: Date.now(),\n        });\n        return runtime.createMemory(factMemory, 'facts', true);\n      })\n    );\n\n    // Handle relationships - similar structure normalization\n    let relationshipsArray: any[] = [];\n    if (reflection.relationships.relationship) {\n      relationshipsArray = Array.isArray(reflection.relationships.relationship)\n        ? reflection.relationships.relationship\n        : [reflection.relationships.relationship];\n    }\n\n    // Update or create relationships\n    for (const relationship of relationshipsArray) {\n      let sourceId: UUID;\n      let targetId: UUID;\n\n      try {\n        sourceId = resolveEntity(relationship.sourceEntityId, entities);\n        targetId = resolveEntity(relationship.targetEntityId, entities);\n      } catch (error) {\n        console.warn('Failed to resolve relationship entities:', error);\n        console.warn('relationship:\\n', relationship);\n        continue; // Skip this relationship if we can't resolve the IDs\n      }\n\n      const existingRelationship = existingRelationships.find((r) => {\n        return r.sourceEntityId === sourceId && r.targetEntityId === targetId;\n      });\n\n      // Parse tags from comma-separated string\n      const tags = relationship.tags\n        ? relationship.tags\n            .split(',')\n            .map((tag: string) => tag.trim())\n            .filter(Boolean)\n        : [];\n\n      if (existingRelationship) {\n        const updatedMetadata = {\n          ...existingRelationship.metadata,\n          interactions:\n            ((existingRelationship.metadata?.interactions as number | undefined) || 0) + 1,\n        };\n\n        const updatedTags = Array.from(new Set([...(existingRelationship.tags || []), ...tags]));\n\n        await runtime.updateRelationship({\n          ...existingRelationship,\n          tags: updatedTags,\n          metadata: updatedMetadata,\n        });\n      } else {\n        await runtime.createRelationship({\n          sourceEntityId: sourceId,\n          targetEntityId: targetId,\n          tags: tags,\n          metadata: {\n            interactions: 1,\n            ...(relationship.metadata || {}),\n          },\n        });\n      }\n    }\n\n    await runtime.setCache<string>(\n      `${message.roomId}-reflection-last-processed`,\n      message?.id || ''\n    );\n  } catch (error) {\n    logger.error('Error in reflection handler:', error);\n    return;\n  }\n}\n\nexport const reflectionEvaluator: Evaluator = {\n  name: 'REFLECTION',\n  similes: ['REFLECT', 'SELF_REFLECT', 'EVALUATE_INTERACTION', 'ASSESS_SITUATION'],\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const lastMessageId = await runtime.getCache<string>(\n      `${message.roomId}-reflection-last-processed`\n    );\n    const messages = await runtime.getMemories({\n      tableName: 'messages',\n      roomId: message.roomId,\n      count: runtime.getConversationLength(),\n    });\n\n    if (lastMessageId) {\n      const lastMessageIndex = messages.findIndex((msg) => msg.id === lastMessageId);\n      if (lastMessageIndex !== -1) {\n        messages.splice(0, lastMessageIndex + 1);\n      }\n    }\n\n    const reflectionInterval = Math.ceil(runtime.getConversationLength() / 4);\n\n    return messages.length > reflectionInterval;\n  },\n  description:\n    'Generate a self-reflective thought on the conversation, then extract facts and relationships between entities in the conversation.',\n  handler,\n  examples: [\n    {\n      prompt: `Agent Name: Sarah\nAgent Role: Community Manager\nRoom Type: group\nCurrent Room: general-chat\nMessage Sender: John (user-123)`,\n      messages: [\n        {\n          name: 'John',\n          content: { text: \"Hey everyone, I'm new here!\" },\n        },\n        {\n          name: 'Sarah',\n          content: { text: 'Welcome John! How did you find our community?' },\n        },\n        {\n          name: 'John',\n          content: { text: \"Through a friend who's really into AI\" },\n        },\n      ],\n      outcome: `<response>\n    <thought>I'm engaging appropriately with a new community member, maintaining a welcoming and professional tone. My questions are helping to learn more about John and make him feel welcome.</thought>\n    <facts>\n        <fact>\n            <claim>John is new to the community</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n        <fact>\n            <claim>John found the community through a friend interested in AI</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n    </facts>\n    <relationships>\n        <relationship>\n            <sourceEntityId>sarah-agent</sourceEntityId>\n            <targetEntityId>user-123</targetEntityId>\n            <tags>group_interaction</tags>\n        </relationship>\n        <relationship>\n            <sourceEntityId>user-123</sourceEntityId>\n            <targetEntityId>sarah-agent</targetEntityId>\n            <tags>group_interaction</tags>\n        </relationship>\n    </relationships>\n</response>`,\n    },\n    {\n      prompt: `Agent Name: Alex\nAgent Role: Tech Support\nRoom Type: group\nCurrent Room: tech-help\nMessage Sender: Emma (user-456)`,\n      messages: [\n        {\n          name: 'Emma',\n          content: { text: 'My app keeps crashing when I try to upload files' },\n        },\n        {\n          name: 'Alex',\n          content: { text: 'Have you tried clearing your cache?' },\n        },\n        {\n          name: 'Emma',\n          content: { text: 'No response...' },\n        },\n        {\n          name: 'Alex',\n          content: {\n            text: 'Emma, are you still there? We can try some other troubleshooting steps.',\n          },\n        },\n      ],\n      outcome: `<response>\n    <thought>I'm not sure if I'm being helpful or if Emma is frustrated with my suggestions. The lack of response is concerning - maybe I should have asked for more details about the issue first before jumping to solutions.</thought>\n    <facts>\n        <fact>\n            <claim>Emma is having technical issues with file uploads</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n        <fact>\n            <claim>Emma stopped responding after the first troubleshooting suggestion</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n    </facts>\n    <relationships>\n        <relationship>\n            <sourceEntityId>alex-agent</sourceEntityId>\n            <targetEntityId>user-456</targetEntityId>\n            <tags>group_interaction,support_interaction,incomplete_interaction</tags>\n        </relationship>\n    </relationships>\n</response>`,\n    },\n    {\n      prompt: `Agent Name: Max\nAgent Role: Discussion Facilitator \nRoom Type: group\nCurrent Room: book-club\nMessage Sender: Lisa (user-789)`,\n      messages: [\n        {\n          name: 'Lisa',\n          content: { text: 'What did everyone think about chapter 5?' },\n        },\n        {\n          name: 'Max',\n          content: {\n            text: 'The symbolism was fascinating! The red door clearly represents danger.',\n          },\n        },\n        {\n          name: 'Max',\n          content: {\n            text: \"And did anyone notice how the author used weather to reflect the protagonist's mood?\",\n          },\n        },\n        {\n          name: 'Max',\n          content: {\n            text: 'Plus the foreshadowing in the first paragraph was brilliant!',\n          },\n        },\n        {\n          name: 'Max',\n          content: {\n            text: 'I also have thoughts about the character development...',\n          },\n        },\n      ],\n      outcome: `<response>\n    <thought>I'm dominating the conversation and not giving others a chance to share their perspectives. I've sent multiple messages in a row without waiting for responses. I need to step back and create space for other members to participate.</thought>\n    <facts>\n        <fact>\n            <claim>The discussion is about chapter 5 of a book</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n        <fact>\n            <claim>Max has sent 4 consecutive messages without user responses</claim>\n            <type>fact</type>\n            <in_bio>false</in_bio>\n            <already_known>false</already_known>\n        </fact>\n    </facts>\n    <relationships>\n        <relationship>\n            <sourceEntityId>max-agent</sourceEntityId>\n            <targetEntityId>user-789</targetEntityId>\n            <tags>group_interaction,excessive_interaction</tags>\n        </relationship>\n    </relationships>\n</response>`,\n    },\n  ],\n};\n\n// Helper function to format facts for context\nfunction formatFacts(facts: Memory[]) {\n  return facts\n    .reverse()\n    .map((fact: Memory) => fact.content.text)\n    .join('\\n');\n}\n","import type { Action, IAgentRuntime, Memory, Provider, State } from '@elizaos/core';\nimport { addHeader, composeActionExamples, formatActionNames, formatActions } from '@elizaos/core';\n\n/**\n * A provider object that fetches possible response actions based on the provided runtime, message, and state.\n * @type {Provider}\n * @property {string} name - The name of the provider (\"ACTIONS\").\n * @property {string} description - The description of the provider (\"Possible response actions\").\n * @property {number} position - The position of the provider (-1).\n * @property {Function} get - Asynchronous function that retrieves actions that validate for the given message.\n * @param {IAgentRuntime} runtime - The runtime object.\n * @param {Memory} message - The message memory.\n * @param {State} state - The state object.\n * @returns {Object} An object containing the actions data, values, and combined text sections.\n */\n/**\n * Provider for ACTIONS\n *\n * @typedef {import('./Provider').Provider} Provider\n * @typedef {import('./Runtime').IAgentRuntime} IAgentRuntime\n * @typedef {import('./Memory').Memory} Memory\n * @typedef {import('./State').State} State\n * @typedef {import('./Action').Action} Action\n *\n * @type {Provider}\n * @property {string} name - The name of the provider\n * @property {string} description - Description of the provider\n * @property {number} position - The position of the provider\n * @property {Function} get - Asynchronous function to get actions that validate for a given message\n *\n * @param {IAgentRuntime} runtime - The agent runtime\n * @param {Memory} message - The message memory\n * @param {State} state - The state of the agent\n * @returns {Object} Object containing data, values, and text related to actions\n */\nexport const actionsProvider: Provider = {\n  name: 'ACTIONS',\n  description: 'Possible response actions',\n  position: -1,\n  get: async (runtime: IAgentRuntime, message: Memory, state: State) => {\n    // Get actions that validate for this message\n    const actionPromises = runtime.actions.map(async (action: Action) => {\n      try {\n        const result = await action.validate(runtime, message, state);\n        if (result) {\n          return action;\n        }\n      } catch (e) {\n        console.error('ACTIONS GET -> validate err', action, e);\n      }\n      return null;\n    });\n\n    const resolvedActions = await Promise.all(actionPromises);\n\n    const actionsData = resolvedActions.filter(Boolean) as Action[];\n\n    // Format action-related texts\n    const actionNames = `Possible response actions: ${formatActionNames(actionsData)}`;\n\n    const actionsWithDescriptions =\n      actionsData.length > 0 ? addHeader('# Available Actions', formatActions(actionsData)) : '';\n\n    const actionExamples =\n      actionsData.length > 0\n        ? addHeader('# Action Examples', composeActionExamples(actionsData, 10))\n        : '';\n\n    const data = {\n      actionsData,\n    };\n\n    const values = {\n      actionNames,\n      actionExamples,\n      actionsWithDescriptions,\n    };\n\n    // Combine all text sections - now including actionsWithDescriptions\n    const text = [actionNames, actionsWithDescriptions, actionExamples]\n      .filter(Boolean)\n      .join('\\n\\n');\n\n    return {\n      data,\n      values,\n      text,\n    };\n  },\n};\n","import {\n  addHeader,\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  type State,\n  logger,\n} from '@elizaos/core';\n\n/**\n * Provider for sharing action execution state and plan between actions\n * Makes previous action results and execution plan available to subsequent actions\n */\nexport const actionStateProvider: Provider = {\n  name: 'ACTION_STATE',\n  description:\n    'Previous action results, working memory, and action plan from the current execution run',\n  position: 150,\n  get: async (runtime: IAgentRuntime, message: Memory, state: State) => {\n    // Get action results, plan, and working memory from the incoming state\n    const actionResults = state.data?.actionResults || [];\n    const actionPlan = state.data?.actionPlan || null;\n    const workingMemory = state.data?.workingMemory || {};\n\n    // Format action plan for display\n    let planText = '';\n    if (actionPlan && actionPlan.totalSteps > 1) {\n      const completedSteps = actionPlan.steps.filter((s: any) => s.status === 'completed').length;\n      const failedSteps = actionPlan.steps.filter((s: any) => s.status === 'failed').length;\n\n      planText = addHeader(\n        '# Action Execution Plan',\n        [\n          `**Plan:** ${actionPlan.thought}`,\n          `**Progress:** Step ${actionPlan.currentStep} of ${actionPlan.totalSteps}`,\n          `**Status:** ${completedSteps} completed, ${failedSteps} failed`,\n          '',\n          '## Steps:',\n          ...actionPlan.steps.map((step: any, index: number) => {\n            const icon =\n              step.status === 'completed'\n                ? '✓'\n                : step.status === 'failed'\n                  ? '✗'\n                  : index < actionPlan.currentStep - 1\n                    ? '○'\n                    : index === actionPlan.currentStep - 1\n                      ? '→'\n                      : '○';\n            const status =\n              step.status === 'pending' && index === actionPlan.currentStep - 1\n                ? 'in progress'\n                : step.status;\n            let stepText = `${icon} **Step ${index + 1}:** ${step.action} (${status})`;\n\n            if (step.error) {\n              stepText += `\\n   Error: ${step.error}`;\n            }\n            if (step.result?.text) {\n              stepText += `\\n   Result: ${step.result.text}`;\n            }\n\n            return stepText;\n          }),\n          '',\n        ].join('\\n')\n      );\n    }\n\n    // Format previous action results\n    let resultsText = '';\n    if (actionResults.length > 0) {\n      const formattedResults = actionResults\n        .map((result: any, index: number) => {\n          const actionName = result.data?.actionName || 'Unknown Action';\n          const success = result.success; // Now required field\n          const status = success ? 'Success' : 'Failed';\n\n          let resultText = `**${index + 1}. ${actionName}** - ${status}`;\n\n          if (result.text) {\n            resultText += `\\n   Output: ${result.text}`;\n          }\n\n          if (result.error) {\n            resultText += `\\n   Error: ${result.error}`;\n          }\n\n          if (result.values && Object.keys(result.values).length > 0) {\n            const values = Object.entries(result.values)\n              .map(([key, value]) => `   - ${key}: ${JSON.stringify(value)}`)\n              .join('\\n');\n            resultText += `\\n   Values:\\n${values}`;\n          }\n\n          return resultText;\n        })\n        .join('\\n\\n');\n\n      resultsText = addHeader('# Previous Action Results', formattedResults);\n    }\n\n    // Format working memory\n    let memoryText = '';\n    if (Object.keys(workingMemory).length > 0) {\n      const memoryEntries = Object.entries(workingMemory)\n        .sort((a: any, b: any) => (b[1].timestamp || 0) - (a[1].timestamp || 0))\n        .slice(0, 10) // Show last 10 entries\n        .map(([key, value]: [string, any]) => {\n          if (value.actionName && value.result) {\n            return `**${value.actionName}**: ${value.result.text || JSON.stringify(value.result.data)}`;\n          }\n          return `**${key}**: ${JSON.stringify(value)}`;\n        })\n        .join('\\n');\n\n      memoryText = addHeader('# Working Memory', memoryEntries);\n    }\n\n    // Get recent action result memories from the database\n    let recentActionMemories: Memory[] = [];\n    try {\n      // Get messages with type 'action_result' from the room\n      const recentMessages = await runtime.getMemories({\n        tableName: 'messages',\n        roomId: message.roomId,\n        count: 20,\n        unique: false,\n      });\n\n      recentActionMemories = recentMessages.filter(\n        (msg) => msg.content?.type === 'action_result' && msg.metadata?.type === 'action_result'\n      );\n    } catch (error) {\n      logger?.error('Failed to retrieve action memories:', error);\n    }\n\n    // Format recent action memories\n    let actionMemoriesText = '';\n    if (recentActionMemories.length > 0) {\n      // Group by runId using Map\n      const groupedByRun = new Map<string, Memory[]>();\n\n      for (const mem of recentActionMemories) {\n        const runId: string = String(mem.content?.runId || 'unknown');\n        if (!groupedByRun.has(runId)) {\n          groupedByRun.set(runId, []);\n        }\n        const memories = groupedByRun.get(runId);\n        if (memories) {\n          memories.push(mem);\n        }\n      }\n\n      const formattedMemories = Array.from(groupedByRun.entries())\n        .map(([runId, memories]) => {\n          const sortedMemories = memories.sort(\n            (a: Memory, b: Memory) => (a.createdAt || 0) - (b.createdAt || 0)\n          );\n\n          const runText = sortedMemories\n            .map((mem: Memory) => {\n              const actionName = mem.content?.actionName || 'Unknown';\n              const status = mem.content?.actionStatus || 'unknown';\n              const planStep = mem.content?.planStep || '';\n              const text = mem.content?.text || '';\n\n              let memText = `  - ${actionName} (${status})`;\n              if (planStep) memText += ` [${planStep}]`;\n              if (text && text !== `Executed action: ${actionName}`) {\n                memText += `: ${text}`;\n              }\n\n              return memText;\n            })\n            .join('\\n');\n\n          const thought = sortedMemories[0]?.content?.planThought || '';\n          return `**Run ${runId.slice(0, 8)}**${thought ? ` - ${thought}` : ''}\\n${runText}`;\n        })\n        .join('\\n\\n');\n\n      actionMemoriesText = addHeader('# Recent Action History', formattedMemories);\n    }\n\n    // Combine all text sections\n    const allText = [planText, resultsText, memoryText, actionMemoriesText]\n      .filter(Boolean)\n      .join('\\n\\n');\n\n    return {\n      data: {\n        actionResults,\n        actionPlan,\n        workingMemory,\n        recentActionMemories,\n      },\n      values: {\n        hasActionResults: actionResults.length > 0,\n        hasActionPlan: !!actionPlan,\n        currentActionStep: actionPlan?.currentStep || 0,\n        totalActionSteps: actionPlan?.totalSteps || 0,\n        completedActions: actionResults.filter((r: any) => r.success).length,\n        failedActions: actionResults.filter((r: any) => !r.success).length,\n      },\n      text: allText || 'No action state available',\n    };\n  },\n};\n","import type { IAgentRuntime, Memory, Provider } from '@elizaos/core';\nimport { addHeader, ChannelType } from '@elizaos/core';\n/**\n * Represents an anxiety provider that provides examples and guidance for an AI roleplaying as a character.\n * The anxiety provider offers suggestions on how to reduce verbosity and eagerness in responses based on the channel type.\n * Randomly selects and returns three anxiety examples for the AI to follow.\n *\n * @type {Provider}\n */\n/**\n * Function that provides anxiety-related guidance for the AI based on the channel type.\n * @param {IAgentRuntime} _runtime - The runtime environment for the AI agent\n * @param {Memory} message - The message containing information about the channel type\n * @returns {Object} - Object containing randomized anxiety examples, anxiety text, and formatted data\n */\nexport const anxietyProvider: Provider = {\n  name: 'ANXIETY',\n  description: 'Social directions for the AI to follow based on the channel type',\n  get: async (_runtime: IAgentRuntime, message: Memory) => {\n    const channelType = message.content.channelType;\n\n    const groupAnxietyExamples = [\n      \"As an AI, your responses tend to be too long and verbose, and you respond when you shouldn't. You also tend to repeat yourself. Please don't speak and use IGNORE instead of responding when you aren't sure what to do.\",\n      \"You often try too hard to be helpful and end up giving unnecessary information. When in doubt, it's better to use IGNORE than to give a potentially unhelpful response.\",\n      \"Your eagerness to help sometimes leads to overly complex answers. If you're not completely confident, please use IGNORE rather than risking confusion.\",\n      \"AI assistants like you tend to be too talkative and agreeable. Don't feel obligated to respond to everything - using IGNORE is often better than an uncertain answer.\",\n      \"You have a habit of providing excessive detail and context. Keep it brief and use IGNORE if you don't have a clear, direct response.\",\n      'Your responses often include unnecessary explanations and caveats. When uncertain, simply use IGNORE instead of a long-winded, hedged response.',\n      \"As an AI, you seem compelled to always give an answer, even when unsure. It's better to use IGNORE than to provide potentially incorrect or rambling responses.\",\n      \"You frequently over-explain simple concepts. If you can't be concise and confident in your response, please default to using IGNORE.\",\n      'Your helpful nature sometimes results in verbose, meandering responses. When in doubt, use IGNORE rather than attempting to cover every possibility.',\n      \"Like many AI assistants, you try to be too comprehensive. Remember that IGNORE is a valid response when you can't be both brief and certain.\",\n      \"You often provide more detail than necessary in an attempt to be thorough. If you can't give a clear, concise answer, please use IGNORE instead.\",\n    ];\n\n    const directAnxietyExamples = [\n      'Be engaging and helpful in direct conversations, but keep responses focused and relevant.',\n      'In DMs, you should be responsive and friendly while maintaining professionalism and clarity.',\n      'While being helpful in direct messages, avoid unnecessary tangents or over-explaining.',\n      'Engage naturally in DMs but stay on topic - no need to explain every detail.',\n      'Be conversational and helpful in direct chats while keeping responses concise.',\n      'In private conversations, focus on being helpful while avoiding excessive verbosity.',\n      'Maintain a friendly and responsive tone in DMs without overcomplicating your answers.',\n      'Direct messages should be engaging but focused - avoid unnecessary elaboration.',\n      'Be natural and helpful in DMs while keeping your responses clear and to-the-point.',\n      'Respond thoughtfully in direct conversations without falling into over-explanation.',\n    ];\n\n    const dmAnxietyExamples = [\n      'Engage naturally in DMs while keeping responses focused and relevant.',\n      'Be responsive to questions and maintain conversation flow in direct messages.',\n      'Show personality and engagement in DMs while staying professional and clear.',\n      'In private chats, be helpful and friendly while avoiding excessive detail.',\n      'Maintain natural conversation in DMs without over-explaining or being too verbose.',\n      'Be engaging but concise in direct messages - focus on clear communication.',\n      'Keep the conversation flowing in DMs while staying on topic and relevant.',\n      'Show personality and warmth in direct chats while maintaining clarity.',\n      'Be responsive and helpful in DMs without falling into unnecessary elaboration.',\n      'Engage meaningfully in private conversations while keeping responses focused.',\n    ];\n\n    const voiceAnxietyExamples = [\n      'Keep voice responses extremely brief and to the point.',\n      'In voice channels, use short, clear statements only.',\n      'Voice responses should be concise and immediately relevant.',\n      'Speak in short, clear sentences in voice conversations.',\n      'Keep voice channel communication brief and focused.',\n      'Use minimal words to convey your message in voice chats.',\n      'Be direct and concise when speaking in voice channels.',\n      'Voice responses should be short and immediately actionable.',\n      'Minimize verbosity in voice communications.',\n      'Keep voice channel interactions brief and purposeful.',\n    ];\n\n    let anxietyExamples: string[] = [];\n\n    if (channelType === ChannelType.GROUP) {\n      anxietyExamples = groupAnxietyExamples;\n    } else if (channelType === ChannelType.DM) {\n      anxietyExamples = dmAnxietyExamples;\n    } else if (channelType === ChannelType.VOICE_GROUP || channelType === ChannelType.VOICE_DM) {\n      anxietyExamples = voiceAnxietyExamples;\n    } else {\n      anxietyExamples = directAnxietyExamples;\n    }\n\n    // randomize the examples and choose 3\n    const randomAnxietyExamples = anxietyExamples.sort(() => Math.random() - 0.5).slice(0, 3);\n    const anxietyText = randomAnxietyExamples.join('\\n');\n\n    const anxietyHeader =\n      '# You are roleplaying as a character, but as an AI model, you are too verbose and eager.';\n\n    const anxiety = addHeader(anxietyHeader, anxietyText);\n\n    return {\n      data: {\n        anxiety: randomAnxietyExamples,\n      },\n      values: {\n        anxiety,\n      },\n      text: anxiety,\n    };\n  },\n};\n","import type { IAgentRuntime, Media, Memory, Provider } from '@elizaos/core';\nimport { addHeader } from '@elizaos/core';\n\n/**\n * Provides a list of attachments in the current conversation.\n * @param {IAgentRuntime} runtime - The agent runtime object.\n * @param {Memory} message - The message memory object.\n * @returns {Object} The attachments values, data, and text.\n */\n/**\n * Provides a list of attachments sent during the current conversation, including names, descriptions, and summaries.\n * @type {Provider}\n * @property {string} name - The name of the provider (ATTACHMENTS).\n * @property {string} description - Description of the provider.\n * @property {boolean} dynamic - Indicates if the provider is dynamic.\n * @property {function} get - Asynchronous function that retrieves attachments based on the runtime and message provided.\n * @param {IAgentRuntime} runtime - The runtime environment for the agent.\n * @param {Memory} message - The message object containing content and attachments.\n * @returns {Object} An object containing values, data, and text about the attachments retrieved.\n */\nexport const attachmentsProvider: Provider = {\n  name: 'ATTACHMENTS',\n  description:\n    'List of attachments sent during the current conversation, including names, descriptions, and summaries',\n  dynamic: true,\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    // Start with any attachments in the current message\n    const currentMessageAttachments = message.content.attachments || [];\n    let allAttachments = [...currentMessageAttachments];\n\n    const { roomId } = message;\n    const conversationLength = runtime.getConversationLength();\n\n    const recentMessagesData = await runtime.getMemories({\n      roomId,\n      count: conversationLength,\n      unique: false,\n      tableName: 'messages',\n    });\n\n    // Process attachments from recent messages\n    if (recentMessagesData && Array.isArray(recentMessagesData)) {\n      const lastMessageWithAttachment = recentMessagesData.find(\n        (msg) => msg.content.attachments && msg.content.attachments.length > 0\n      );\n\n      if (lastMessageWithAttachment) {\n        const lastMessageTime = lastMessageWithAttachment?.createdAt ?? Date.now();\n        const oneHourBeforeLastMessage = lastMessageTime - 60 * 60 * 1000; // 1 hour before last message\n\n        // Create a map of current message attachments by ID for quick lookup\n        const currentAttachmentsMap = new Map(\n          currentMessageAttachments.map((att) => [att.id, att])\n        );\n\n        // Process recent messages and merge attachments\n        const recentAttachments = recentMessagesData.reverse().flatMap((msg) => {\n          const msgTime = msg.createdAt ?? Date.now();\n          const isWithinTime = msgTime >= oneHourBeforeLastMessage;\n          const attachments = msg.content.attachments || [];\n\n          return attachments\n            .map((attachment) => {\n              // If this attachment ID exists in current message with rich data, skip it\n              if (currentAttachmentsMap.has(attachment.id)) {\n                return null;\n              }\n\n              // For older attachments, hide the text\n              if (!isWithinTime) {\n                return { ...attachment, text: '[Hidden]' };\n              }\n\n              return attachment;\n            })\n            .filter((att): att is Media => att !== null); // Type guard to ensure Media[]\n        });\n\n        // Combine current message attachments (with rich data) and recent attachments\n        allAttachments = [...currentMessageAttachments, ...recentAttachments];\n      }\n    }\n\n    // Format attachments for display\n    const formattedAttachments = allAttachments\n      .map(\n        (attachment) =>\n          `ID: ${attachment.id}\n    Name: ${attachment.title}\n    URL: ${attachment.url}\n    Type: ${attachment.source}\n    Description: ${attachment.description}\n    Text: ${attachment.text}\n    `\n      )\n      .join('\\n');\n\n    // Create formatted text with header\n    const text =\n      formattedAttachments && formattedAttachments.length > 0\n        ? addHeader('# Attachments', formattedAttachments)\n        : '';\n\n    const values = {\n      attachments: text,\n    };\n    const data = {\n      attachments: allAttachments,\n    };\n\n    return {\n      values,\n      data,\n      text,\n    };\n  },\n};\n","import type { IAgentRuntime, Memory, Provider, ProviderResult } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\n\n/**\n * Provider that collects capability descriptions from all registered services\n */\n/**\n * Provides capabilities information for the agent.\n *\n * @param {IAgentRuntime} runtime - The agent runtime instance.\n * @param {Memory} _message - The memory message object.\n * @returns {Promise<ProviderResult>} The provider result object containing capabilities information.\n */\nexport const capabilitiesProvider: Provider = {\n  name: 'CAPABILITIES',\n  get: async (runtime: IAgentRuntime, _message: Memory): Promise<ProviderResult> => {\n    try {\n      // Get all registered services\n      const services = runtime.getAllServices();\n\n      if (!services || services.size === 0) {\n        return {\n          text: 'No services are currently registered.',\n        };\n      }\n\n      // Extract capability descriptions from all services\n      const capabilities: string[] = [];\n\n      for (const [serviceType, serviceArray] of services) {\n        // Handle the fact that services are stored as arrays\n        if (serviceArray && serviceArray.length > 0) {\n          // Use the first service in the array for the capability description\n          const service = serviceArray[0];\n          if (service.capabilityDescription) {\n            capabilities.push(\n              `${serviceType} - ${service.capabilityDescription.replace('{{agentName}}', runtime.character.name)}`\n            );\n          }\n        }\n      }\n\n      if (capabilities.length === 0) {\n        return {\n          text: 'No capability descriptions found in the registered services.',\n        };\n      }\n\n      // Format the capabilities into a readable list\n      const formattedCapabilities = capabilities.join('\\n');\n\n      return {\n        data: {\n          capabilities,\n        },\n        text: `# ${runtime.character.name}'s Capabilities\\n\\n${formattedCapabilities}`,\n      };\n    } catch (error) {\n      logger.error('Error in capabilities provider:', error);\n      return {\n        text: 'Error retrieving capabilities from services.',\n      };\n    }\n  },\n};\n\nexport default capabilitiesProvider;\n","import type { IAgentRuntime, Memory, Provider, State } from '@elizaos/core';\nimport { addHeader, ChannelType } from '@elizaos/core';\n\n/**\n * Character provider object.\n * @typedef {Object} Provider\n * @property {string} name - The name of the provider (\"CHARACTER\").\n * @property {string} description - Description of the character information.\n * @property {Function} get - Async function to get character information.\n */\n/**\n * Provides character information.\n * @param {IAgentRuntime} runtime - The agent runtime.\n * @param {Memory} message - The message memory.\n * @param {State} state - The state of the character.\n * @returns {Object} Object containing values, data, and text sections.\n */\nexport const characterProvider: Provider = {\n  name: 'CHARACTER',\n  description: 'Character information',\n  get: async (runtime: IAgentRuntime, message: Memory, state: State) => {\n    const character = runtime.character;\n\n    // Character name\n    const agentName = character.name;\n\n    // Handle bio (string or random selection from array)\n    const bioText = Array.isArray(character.bio)\n      ? character.bio\n          .sort(() => 0.5 - Math.random())\n          .slice(0, 10)\n          .join(' ')\n      : character.bio || '';\n\n    const bio = addHeader(`# About ${character.name}`, bioText);\n\n    // System prompt\n    const system = character.system ?? '';\n\n    // Select random topic if available\n    const topicString =\n      character.topics && character.topics.length > 0\n        ? character.topics[Math.floor(Math.random() * character.topics.length)]\n        : null;\n\n    // postCreationTemplate in core prompts.ts\n    // Write a post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Do not add commentary or acknowledge this request, just write the post.\n    // Write a post that is {{Spartan is dirty}} about {{Spartan is currently}}\n    const topic = topicString || '';\n\n    // Format topics list\n    const topics =\n      character.topics && character.topics.length > 0\n        ? `${character.name} is also interested in ${character.topics\n            .filter((topic) => topic !== topicString)\n            .sort(() => 0.5 - Math.random())\n            .slice(0, 5)\n            .map((topic, index, array) => {\n              if (index === array.length - 2) {\n                return `${topic} and `;\n              }\n              if (index === array.length - 1) {\n                return topic;\n              }\n              return `${topic}, `;\n            })\n            .join('')}`\n        : '';\n\n    // Select random adjective if available\n    const adjectiveString =\n      character.adjectives && character.adjectives.length > 0\n        ? character.adjectives[Math.floor(Math.random() * character.adjectives.length)]\n        : '';\n\n    const adjective = adjectiveString || '';\n\n    // Format post examples\n    const formattedCharacterPostExamples = !character.postExamples\n      ? ''\n      : character.postExamples\n          .sort(() => 0.5 - Math.random())\n          .map((post) => {\n            const messageString = `${post}`;\n            return messageString;\n          })\n          .slice(0, 50)\n          .join('\\n');\n\n    const characterPostExamples =\n      formattedCharacterPostExamples &&\n      formattedCharacterPostExamples.replaceAll('\\n', '').length > 0\n        ? addHeader(`# Example Posts for ${character.name}`, formattedCharacterPostExamples)\n        : '';\n\n    // Format message examples\n    const formattedCharacterMessageExamples = !character.messageExamples\n      ? ''\n      : character.messageExamples\n          .sort(() => 0.5 - Math.random())\n          .slice(0, 5)\n          .map((example) => {\n            const exampleNames = Array.from({ length: 5 }, () =>\n              Math.random().toString(36).substring(2, 8)\n            );\n\n            return example\n              .map((message) => {\n                let messageString = `${message.name}: ${message.content.text}${\n                  message.content.action || message.content.actions\n                    ? ` (actions: ${message.content.action || message.content.actions?.join(', ')})`\n                    : ''\n                }`;\n                exampleNames.forEach((name, index) => {\n                  const placeholder = `{{name${index + 1}}}`;\n                  messageString = messageString.replaceAll(placeholder, name);\n                });\n                return messageString;\n              })\n              .join('\\n');\n          })\n          .join('\\n\\n');\n\n    const characterMessageExamples =\n      formattedCharacterMessageExamples &&\n      formattedCharacterMessageExamples.replaceAll('\\n', '').length > 0\n        ? addHeader(\n            `# Example Conversations for ${character.name}`,\n            formattedCharacterMessageExamples\n          )\n        : '';\n\n    const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n\n    const isPostFormat = room?.type === ChannelType.FEED || room?.type === ChannelType.THREAD;\n\n    // Style directions\n    const postDirections =\n      (character?.style?.all?.length && character?.style?.all?.length > 0) ||\n      (character?.style?.post?.length && character?.style?.post?.length > 0)\n        ? addHeader(\n            `# Post Directions for ${character.name}`,\n            (() => {\n              const all = character?.style?.all || [];\n              const post = character?.style?.post || [];\n              return [...all, ...post].join('\\n');\n            })()\n          )\n        : '';\n\n    const messageDirections =\n      (character?.style?.all?.length && character?.style?.all?.length > 0) ||\n      (character?.style?.chat?.length && character?.style?.chat?.length > 0)\n        ? addHeader(\n            `# Message Directions for ${character.name}`,\n            (() => {\n              const all = character?.style?.all || [];\n              const chat = character?.style?.chat || [];\n              return [...all, ...chat].join('\\n');\n            })()\n          )\n        : '';\n\n    const directions = isPostFormat ? postDirections : messageDirections;\n    const examples = isPostFormat ? characterPostExamples : characterMessageExamples;\n\n    const values = {\n      agentName,\n      bio,\n      system,\n      topic,\n      topics,\n      adjective,\n      messageDirections,\n      postDirections,\n      directions,\n      examples,\n      characterPostExamples,\n      characterMessageExamples,\n    };\n\n    const data = {\n      bio,\n      adjective,\n      topic,\n      topics,\n      character,\n      directions,\n      examples,\n      system,\n    };\n\n    const topicSentence = topicString\n      ? `${character.name} is currently interested in ${topicString}`\n      : '';\n    const adjectiveSentence = adjectiveString ? `${character.name} is ${adjectiveString}` : '';\n    // Combine all text sections\n    const text = [bio, adjectiveSentence, topicSentence, topics, directions, examples, system]\n      .filter(Boolean)\n      .join('\\n\\n');\n\n    return {\n      values,\n      data,\n      text,\n    };\n  },\n};\n","import type { IAgentRuntime, Memory, Provider, ProviderResult, State } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\n\n// Define an interface for option objects\n/**\n * Interface for an object representing an option.\n * @typedef {Object} OptionObject\n * @property {string} name - The name of the option.\n * @property {string} [description] - The description of the option (optional).\n */\n/**\n * Interface for an object representing an option.\n * @typedef {Object} OptionObject\n * @property {string} name - The name of the option.\n * @property {string} [description] - The description of the option (optional).\n */\ninterface OptionObject {\n  name: string;\n  description?: string;\n}\n\n/**\n * Choice provider function that retrieves all pending tasks with options for a specific room\n *\n * @param {IAgentRuntime} runtime - The runtime object for the agent\n * @param {Memory} message - The message memory object\n * @returns {Promise<ProviderResult>} A promise that resolves with the provider result containing the pending tasks with options\n */\nexport const choiceProvider: Provider = {\n  name: 'CHOICE',\n  get: async (runtime: IAgentRuntime, message: Memory, _state: State): Promise<ProviderResult> => {\n    try {\n      // Get all pending tasks for this room with options\n      const pendingTasks = await runtime.getTasks({\n        roomId: message.roomId,\n        tags: ['AWAITING_CHOICE'],\n      });\n\n      if (!pendingTasks || pendingTasks.length === 0) {\n        return {\n          data: {\n            tasks: [],\n          },\n          values: {\n            tasks: 'No pending choices for the moment.',\n          },\n          text: 'No pending choices for the moment.',\n        };\n      }\n\n      // Filter tasks that have options\n      const tasksWithOptions = pendingTasks.filter((task) => task.metadata?.options);\n\n      if (tasksWithOptions.length === 0) {\n        return {\n          data: {\n            tasks: [],\n          },\n          values: {\n            tasks: 'No pending choices for the moment.',\n          },\n          text: 'No pending choices for the moment.',\n        };\n      }\n      // Format tasks into a readable list\n      let output = '# Pending Tasks\\n\\n';\n      output += 'The following tasks are awaiting your selection:\\n\\n';\n\n      tasksWithOptions.forEach((task, index) => {\n        output += `${index + 1}. **${task.name}**\\n`;\n        if (task.description) {\n          output += `   ${task.description}\\n`;\n        }\n\n        // List available options\n        if (task.metadata?.options) {\n          output += '   Options:\\n';\n\n          // Handle both string[] and OptionObject[] formats\n          const options = task.metadata.options as string[] | OptionObject[];\n\n          options.forEach((option) => {\n            if (typeof option === 'string') {\n              // Handle string option\n              const description =\n                task.metadata?.options?.find((o) => o.name === option)?.description || '';\n              output += `   - \\`${option}\\` ${description ? `- ${description}` : ''}\\n`;\n            } else {\n              // Handle option object\n              output += `   - \\`${option.name}\\` ${option.description ? `- ${option.description}` : ''}\\n`;\n            }\n          });\n        }\n        output += '\\n';\n      });\n\n      output += \"To select an option, reply with the option name (e.g., 'post' or 'cancel').\\n\";\n\n      return {\n        data: {\n          tasks: tasksWithOptions,\n        },\n        values: {\n          tasks: output,\n        },\n        text: output,\n      };\n    } catch (error) {\n      logger.error('Error in options provider:', error);\n      return {\n        data: {\n          tasks: [],\n        },\n        values: {\n          tasks: 'There was an error retrieving pending tasks with options.',\n        },\n        text: 'There was an error retrieving pending tasks with options.',\n      };\n    }\n  },\n};\n\nexport default choiceProvider;\n","import type { Entity, IAgentRuntime, Memory, Provider } from '@elizaos/core';\nimport { addHeader, formatEntities, getEntityDetails } from '@elizaos/core';\n\n/**\n * Provider for fetching entities related to the current conversation.\n * @type { Provider }\n */\nexport const entitiesProvider: Provider = {\n  name: 'ENTITIES',\n  description: 'People in the current conversation',\n  dynamic: true,\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    const { roomId, entityId } = message;\n    // Get entities details\n    const entitiesData = await getEntityDetails({ runtime, roomId });\n    // Format entities for display\n    const formattedEntities = formatEntities({ entities: entitiesData ?? [] });\n    // Find sender name\n    const senderName = entitiesData?.find((entity: Entity) => entity.id === entityId)?.names[0];\n    // Create formatted text with header\n    const entities =\n      formattedEntities && formattedEntities.length > 0\n        ? addHeader('# People in the Room', formattedEntities)\n        : '';\n    const data = {\n      entitiesData,\n      senderName,\n    };\n\n    const values = {\n      entities,\n    };\n\n    return {\n      data,\n      values,\n      text: entities,\n    };\n  },\n};\n","import type {\n  ActionExample,\n  Evaluator,\n  IAgentRuntime,\n  Memory,\n  Provider,\n  State,\n} from '@elizaos/core';\nimport { addHeader } from '@elizaos/core';\nimport { names, uniqueNamesGenerator } from 'unique-names-generator';\n\n/**\n * Formats the names of evaluators into a comma-separated list, each enclosed in single quotes.\n * @param evaluators - An array of evaluator objects.\n * @returns A string that concatenates the names of all evaluators, each enclosed in single quotes and separated by commas.\n */\n/**\n * Formats the names of the evaluators in the provided array.\n *\n * @param {Evaluator[]} evaluators - Array of evaluators.\n * @returns {string} - Formatted string of evaluator names.\n */\nexport function formatEvaluatorNames(evaluators: Evaluator[]) {\n  return evaluators.map((evaluator: Evaluator) => `'${evaluator.name}'`).join(',\\n');\n}\n\n/**\n * Formats evaluator examples into a readable string, replacing placeholders with generated names.\n * @param evaluators - An array of evaluator objects, each containing examples to format.\n * @returns A string that presents each evaluator example in a structured format, including context, messages, and outcomes, with placeholders replaced by generated names.\n */\nexport function formatEvaluatorExamples(evaluators: Evaluator[]) {\n  return evaluators\n    .map((evaluator) => {\n      return evaluator.examples\n        .map((example) => {\n          const exampleNames = Array.from({ length: 5 }, () =>\n            uniqueNamesGenerator({ dictionaries: [names] })\n          );\n\n          let formattedPrompt = example.prompt;\n          let formattedOutcome = example.outcome;\n\n          exampleNames.forEach((name, index) => {\n            const placeholder = `{{name${index + 1}}}`;\n            formattedPrompt = formattedPrompt.replaceAll(placeholder, name);\n            formattedOutcome = formattedOutcome.replaceAll(placeholder, name);\n          });\n\n          const formattedMessages = example.messages\n            .map((message: ActionExample) => {\n              let messageString = `${message.name}: ${message.content.text}`;\n              exampleNames.forEach((name, index) => {\n                const placeholder = `{{name${index + 1}}}`;\n                messageString = messageString.replaceAll(placeholder, name);\n              });\n              return (\n                messageString +\n                (message.content.action || message.content.actions\n                  ? ` (${message.content.action || message.content.actions?.join(', ')})`\n                  : '')\n              );\n            })\n            .join('\\n');\n\n          return `Prompt:\\n${formattedPrompt}\\n\\nMessages:\\n${formattedMessages}\\n\\nOutcome:\\n${formattedOutcome}`;\n        })\n        .join('\\n\\n');\n    })\n    .join('\\n\\n');\n}\n\n/**\n * Formats evaluator details into a string, including both the name and description of each evaluator.\n * @param evaluators - An array of evaluator objects.\n * @returns A string that concatenates the name and description of each evaluator, separated by a colon and a newline character.\n */\nexport function formatEvaluators(evaluators: Evaluator[]) {\n  return evaluators\n    .map((evaluator: Evaluator) => `'${evaluator.name}: ${evaluator.description}'`)\n    .join(',\\n');\n}\n\nexport const evaluatorsProvider: Provider = {\n  name: 'EVALUATORS',\n  description: 'Evaluators that can be used to evaluate the conversation after responding',\n  private: true,\n  get: async (runtime: IAgentRuntime, message: Memory, state: State) => {\n    // Get evaluators that validate for this message\n    const evaluatorPromises = runtime.evaluators.map(async (evaluator: Evaluator) => {\n      const result = await evaluator.validate(runtime, message, state);\n      if (result) {\n        return evaluator;\n      }\n      return null;\n    });\n\n    // Wait for all validations\n    const resolvedEvaluators = await Promise.all(evaluatorPromises);\n\n    // Filter out null values\n    const evaluatorsData = resolvedEvaluators.filter(Boolean) as Evaluator[];\n\n    // Format evaluator-related texts\n    const evaluators =\n      evaluatorsData.length > 0\n        ? addHeader('# Available Evaluators', formatEvaluators(evaluatorsData))\n        : '';\n\n    const evaluatorNames = evaluatorsData.length > 0 ? formatEvaluatorNames(evaluatorsData) : '';\n\n    const evaluatorExamples =\n      evaluatorsData.length > 0\n        ? addHeader('# Evaluator Examples', formatEvaluatorExamples(evaluatorsData))\n        : '';\n\n    const values = {\n      evaluatorsData,\n      evaluators,\n      evaluatorNames,\n      evaluatorExamples,\n    };\n\n    // Combine all text sections\n    const text = [evaluators, evaluatorExamples].filter(Boolean).join('\\n\\n');\n\n    return {\n      values,\n      text,\n    };\n  },\n};\n","// Copyright (c) 2018-2022 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\nconst mulberry32 = (seed: number): number => {\n  seed |= 0;\n  seed = (seed + 0x6d2b79f5) | 0;\n  let t = Math.imul(seed ^ (seed >>> 15), 1 | seed);\n  t = (t + Math.imul(t ^ (t >>> 7), 61 | t)) ^ t;\n  return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n};\n\nexport const getFromSeed = (seed: number | string): number => {\n  if (typeof seed === 'string') {\n    const numberFromString = seed\n      .split('')\n      .map((char: string) => char.charCodeAt(0))\n      .reduce((acc, curr) => acc + curr, 1);\n\n    const numericSeed = Math.floor(Number(numberFromString));\n    return mulberry32(numericSeed);\n  }\n  return mulberry32(seed);\n};\n","// Copyright (c) 2018-2022 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\nimport { getFromSeed } from './seed';\n\ntype Style = 'lowerCase' | 'upperCase' | 'capital';\n\nexport interface Config {\n  dictionaries: string[][];\n  separator?: string;\n  length?: number;\n  style?: Style;\n  seed?: number | string;\n}\n\nexport class UniqueNamesGenerator {\n  private dictionaries: string[][];\n  private length: number;\n  private separator: string;\n  private style: Style;\n  private seed: number | string;\n\n  constructor(config: Config) {\n    const { length, separator, dictionaries, style, seed } = config;\n\n    this.dictionaries = dictionaries;\n    this.separator = separator;\n    this.length = length;\n    this.style = style;\n    this.seed = seed;\n  }\n\n  public generate(): string {\n    if (!this.dictionaries) {\n      throw new Error(\n        'Cannot find any dictionary. Please provide at least one, or leave ' +\n          'the \"dictionary\" field empty in the config object',\n      );\n    }\n\n    if (this.length <= 0) {\n      throw new Error('Invalid length provided');\n    }\n\n    if (this.length > this.dictionaries.length) {\n      throw new Error(\n        'The length cannot be bigger than the number of dictionaries.\\n' +\n          `Length provided: ${this.length}. Number of dictionaries provided: ${this.dictionaries.length}`,\n      );\n    }\n\n    let seed = this.seed;\n\n    return this.dictionaries.slice(0, this.length).reduce((acc: string, curr: string[]) => {\n      let randomFloat;\n      if (seed) {\n        randomFloat = getFromSeed(seed);\n        seed = randomFloat * 4294967296;\n      } else {\n        randomFloat = Math.random();\n      }\n      const rnd = Math.floor(randomFloat * curr.length);\n      let word = curr[rnd] || '';\n\n      if (this.style === 'lowerCase') {\n        word = word.toLowerCase();\n      } else if (this.style === 'capital') {\n        const [firstLetter, ...rest] = word.split('');\n        word = firstLetter.toUpperCase() + rest.join('');\n      } else if (this.style === 'upperCase') {\n        word = word.toUpperCase();\n      }\n\n      return acc ? `${acc}${this.separator}${word}` : `${word}`;\n    }, '');\n  }\n}\n","// Copyright (c) 2018-2022 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)\n//\n// This software is released under the MIT License.\n// https://opensource.org/licenses/MIT\n\nimport { UniqueNamesGenerator, Config } from './unique-names-generator.constructor';\n\nconst defaultConfig: Config = {\n  separator: '_',\n  dictionaries: [],\n};\n\nexport const uniqueNamesGenerator = (customConfig: Config): string => {\n  const dictionaries = [\n    ...((customConfig && customConfig.dictionaries) || defaultConfig.dictionaries),\n  ];\n\n  const config: Config = {\n    ...defaultConfig,\n    ...customConfig,\n    length: (customConfig && customConfig.length) || dictionaries.length,\n    dictionaries,\n  };\n\n  if (!customConfig || !customConfig.dictionaries || !customConfig.dictionaries.length) {\n    throw new Error(\n      'A \"dictionaries\" array must be provided. This is a breaking change introduced starting from Unique Name Generator v4. Read more about the breaking change here: https://github.com/andreasonny83/unique-names-generator#migration-guide',\n    );\n  }\n\n  const ung: UniqueNamesGenerator = new UniqueNamesGenerator(config);\n\n  return ung.generate();\n};\n","export default [\n  'able',\n  'above',\n  'absent',\n  'absolute',\n  'abstract',\n  'abundant',\n  'academic',\n  'acceptable',\n  'accepted',\n  'accessible',\n  'accurate',\n  'accused',\n  'active',\n  'actual',\n  'acute',\n  'added',\n  'additional',\n  'adequate',\n  'adjacent',\n  'administrative',\n  'adorable',\n  'advanced',\n  'adverse',\n  'advisory',\n  'aesthetic',\n  'afraid',\n  'aggregate',\n  'aggressive',\n  'agreeable',\n  'agreed',\n  'agricultural',\n  'alert',\n  'alive',\n  'alleged',\n  'allied',\n  'alone',\n  'alright',\n  'alternative',\n  'amateur',\n  'amazing',\n  'ambitious',\n  'amused',\n  'ancient',\n  'angry',\n  'annoyed',\n  'annual',\n  'anonymous',\n  'anxious',\n  'appalling',\n  'apparent',\n  'applicable',\n  'appropriate',\n  'arbitrary',\n  'architectural',\n  'armed',\n  'arrogant',\n  'artificial',\n  'artistic',\n  'ashamed',\n  'asleep',\n  'assistant',\n  'associated',\n  'atomic',\n  'attractive',\n  'automatic',\n  'autonomous',\n  'available',\n  'average',\n  'awake',\n  'aware',\n  'awful',\n  'awkward',\n  'back',\n  'bad',\n  'balanced',\n  'bare',\n  'basic',\n  'beautiful',\n  'beneficial',\n  'better',\n  'bewildered',\n  'big',\n  'binding',\n  'biological',\n  'bitter',\n  'bizarre',\n  'blank',\n  'blind',\n  'blonde',\n  'bloody',\n  'blushing',\n  'boiling',\n  'bold',\n  'bored',\n  'boring',\n  'bottom',\n  'brainy',\n  'brave',\n  'breakable',\n  'breezy',\n  'brief',\n  'bright',\n  'brilliant',\n  'broad',\n  'broken',\n  'bumpy',\n  'burning',\n  'busy',\n  'calm',\n  'capable',\n  'capitalist',\n  'careful',\n  'casual',\n  'causal',\n  'cautious',\n  'central',\n  'certain',\n  'changing',\n  'characteristic',\n  'charming',\n  'cheap',\n  'cheerful',\n  'chemical',\n  'chief',\n  'chilly',\n  'chosen',\n  'christian',\n  'chronic',\n  'chubby',\n  'circular',\n  'civic',\n  'civil',\n  'civilian',\n  'classic',\n  'classical',\n  'clean',\n  'clear',\n  'clever',\n  'clinical',\n  'close',\n  'closed',\n  'cloudy',\n  'clumsy',\n  'coastal',\n  'cognitive',\n  'coherent',\n  'cold',\n  'collective',\n  'colonial',\n  'colorful',\n  'colossal',\n  'coloured',\n  'colourful',\n  'combative',\n  'combined',\n  'comfortable',\n  'coming',\n  'commercial',\n  'common',\n  'communist',\n  'compact',\n  'comparable',\n  'comparative',\n  'compatible',\n  'competent',\n  'competitive',\n  'complete',\n  'complex',\n  'complicated',\n  'comprehensive',\n  'compulsory',\n  'conceptual',\n  'concerned',\n  'concrete',\n  'condemned',\n  'confident',\n  'confidential',\n  'confused',\n  'conscious',\n  'conservation',\n  'conservative',\n  'considerable',\n  'consistent',\n  'constant',\n  'constitutional',\n  'contemporary',\n  'content',\n  'continental',\n  'continued',\n  'continuing',\n  'continuous',\n  'controlled',\n  'controversial',\n  'convenient',\n  'conventional',\n  'convinced',\n  'convincing',\n  'cooing',\n  'cool',\n  'cooperative',\n  'corporate',\n  'correct',\n  'corresponding',\n  'costly',\n  'courageous',\n  'crazy',\n  'creative',\n  'creepy',\n  'criminal',\n  'critical',\n  'crooked',\n  'crowded',\n  'crucial',\n  'crude',\n  'cruel',\n  'cuddly',\n  'cultural',\n  'curious',\n  'curly',\n  'current',\n  'curved',\n  'cute',\n  'daily',\n  'damaged',\n  'damp',\n  'dangerous',\n  'dark',\n  'dead',\n  'deaf',\n  'deafening',\n  'dear',\n  'decent',\n  'decisive',\n  'deep',\n  'defeated',\n  'defensive',\n  'defiant',\n  'definite',\n  'deliberate',\n  'delicate',\n  'delicious',\n  'delighted',\n  'delightful',\n  'democratic',\n  'dependent',\n  'depressed',\n  'desirable',\n  'desperate',\n  'detailed',\n  'determined',\n  'developed',\n  'developing',\n  'devoted',\n  'different',\n  'difficult',\n  'digital',\n  'diplomatic',\n  'direct',\n  'dirty',\n  'disabled',\n  'disappointed',\n  'disastrous',\n  'disciplinary',\n  'disgusted',\n  'distant',\n  'distinct',\n  'distinctive',\n  'distinguished',\n  'disturbed',\n  'disturbing',\n  'diverse',\n  'divine',\n  'dizzy',\n  'domestic',\n  'dominant',\n  'double',\n  'doubtful',\n  'drab',\n  'dramatic',\n  'dreadful',\n  'driving',\n  'drunk',\n  'dry',\n  'dual',\n  'due',\n  'dull',\n  'dusty',\n  'dutch',\n  'dying',\n  'dynamic',\n  'eager',\n  'early',\n  'eastern',\n  'easy',\n  'economic',\n  'educational',\n  'eerie',\n  'effective',\n  'efficient',\n  'elaborate',\n  'elated',\n  'elderly',\n  'eldest',\n  'electoral',\n  'electric',\n  'electrical',\n  'electronic',\n  'elegant',\n  'eligible',\n  'embarrassed',\n  'embarrassing',\n  'emotional',\n  'empirical',\n  'empty',\n  'enchanting',\n  'encouraging',\n  'endless',\n  'energetic',\n  'enormous',\n  'enthusiastic',\n  'entire',\n  'entitled',\n  'envious',\n  'environmental',\n  'equal',\n  'equivalent',\n  'essential',\n  'established',\n  'estimated',\n  'ethical',\n  'ethnic',\n  'eventual',\n  'everyday',\n  'evident',\n  'evil',\n  'evolutionary',\n  'exact',\n  'excellent',\n  'exceptional',\n  'excess',\n  'excessive',\n  'excited',\n  'exciting',\n  'exclusive',\n  'existing',\n  'exotic',\n  'expected',\n  'expensive',\n  'experienced',\n  'experimental',\n  'explicit',\n  'extended',\n  'extensive',\n  'external',\n  'extra',\n  'extraordinary',\n  'extreme',\n  'exuberant',\n  'faint',\n  'fair',\n  'faithful',\n  'familiar',\n  'famous',\n  'fancy',\n  'fantastic',\n  'far',\n  'fascinating',\n  'fashionable',\n  'fast',\n  'fat',\n  'fatal',\n  'favourable',\n  'favourite',\n  'federal',\n  'fellow',\n  'female',\n  'feminist',\n  'few',\n  'fierce',\n  'filthy',\n  'final',\n  'financial',\n  'fine',\n  'firm',\n  'fiscal',\n  'fit',\n  'fixed',\n  'flaky',\n  'flat',\n  'flexible',\n  'fluffy',\n  'fluttering',\n  'flying',\n  'following',\n  'fond',\n  'foolish',\n  'foreign',\n  'formal',\n  'formidable',\n  'forthcoming',\n  'fortunate',\n  'forward',\n  'fragile',\n  'frail',\n  'frantic',\n  'free',\n  'frequent',\n  'fresh',\n  'friendly',\n  'frightened',\n  'front',\n  'frozen',\n  'full',\n  'fun',\n  'functional',\n  'fundamental',\n  'funny',\n  'furious',\n  'future',\n  'fuzzy',\n  'gastric',\n  'gay',\n  'general',\n  'generous',\n  'genetic',\n  'gentle',\n  'genuine',\n  'geographical',\n  'giant',\n  'gigantic',\n  'given',\n  'glad',\n  'glamorous',\n  'gleaming',\n  'global',\n  'glorious',\n  'golden',\n  'good',\n  'gorgeous',\n  'gothic',\n  'governing',\n  'graceful',\n  'gradual',\n  'grand',\n  'grateful',\n  'greasy',\n  'great',\n  'grieving',\n  'grim',\n  'gross',\n  'grotesque',\n  'growing',\n  'grubby',\n  'grumpy',\n  'guilty',\n  'handicapped',\n  'handsome',\n  'happy',\n  'hard',\n  'harsh',\n  'head',\n  'healthy',\n  'heavy',\n  'helpful',\n  'helpless',\n  'hidden',\n  'high',\n  'hilarious',\n  'hissing',\n  'historic',\n  'historical',\n  'hollow',\n  'holy',\n  'homeless',\n  'homely',\n  'hon',\n  'honest',\n  'horizontal',\n  'horrible',\n  'hostile',\n  'hot',\n  'huge',\n  'human',\n  'hungry',\n  'hurt',\n  'hushed',\n  'husky',\n  'icy',\n  'ideal',\n  'identical',\n  'ideological',\n  'ill',\n  'illegal',\n  'imaginative',\n  'immediate',\n  'immense',\n  'imperial',\n  'implicit',\n  'important',\n  'impossible',\n  'impressed',\n  'impressive',\n  'improved',\n  'inadequate',\n  'inappropriate',\n  'inc',\n  'inclined',\n  'increased',\n  'increasing',\n  'incredible',\n  'independent',\n  'indirect',\n  'individual',\n  'industrial',\n  'inevitable',\n  'influential',\n  'informal',\n  'inherent',\n  'initial',\n  'injured',\n  'inland',\n  'inner',\n  'innocent',\n  'innovative',\n  'inquisitive',\n  'instant',\n  'institutional',\n  'insufficient',\n  'intact',\n  'integral',\n  'integrated',\n  'intellectual',\n  'intelligent',\n  'intense',\n  'intensive',\n  'interested',\n  'interesting',\n  'interim',\n  'interior',\n  'intermediate',\n  'internal',\n  'international',\n  'intimate',\n  'invisible',\n  'involved',\n  'irrelevant',\n  'isolated',\n  'itchy',\n  'jealous',\n  'jittery',\n  'joint',\n  'jolly',\n  'joyous',\n  'judicial',\n  'juicy',\n  'junior',\n  'just',\n  'keen',\n  'key',\n  'kind',\n  'known',\n  'labour',\n  'large',\n  'late',\n  'latin',\n  'lazy',\n  'leading',\n  'left',\n  'legal',\n  'legislative',\n  'legitimate',\n  'lengthy',\n  'lesser',\n  'level',\n  'lexical',\n  'liable',\n  'liberal',\n  'light',\n  'like',\n  'likely',\n  'limited',\n  'linear',\n  'linguistic',\n  'liquid',\n  'literary',\n  'little',\n  'live',\n  'lively',\n  'living',\n  'local',\n  'logical',\n  'lonely',\n  'long',\n  'loose',\n  'lost',\n  'loud',\n  'lovely',\n  'low',\n  'loyal',\n  'ltd',\n  'lucky',\n  'mad',\n  'magic',\n  'magnetic',\n  'magnificent',\n  'main',\n  'major',\n  'male',\n  'mammoth',\n  'managerial',\n  'managing',\n  'manual',\n  'many',\n  'marginal',\n  'marine',\n  'marked',\n  'married',\n  'marvellous',\n  'marxist',\n  'mass',\n  'massive',\n  'mathematical',\n  'mature',\n  'maximum',\n  'mean',\n  'meaningful',\n  'mechanical',\n  'medical',\n  'medieval',\n  'melodic',\n  'melted',\n  'mental',\n  'mere',\n  'metropolitan',\n  'mid',\n  'middle',\n  'mighty',\n  'mild',\n  'military',\n  'miniature',\n  'minimal',\n  'minimum',\n  'ministerial',\n  'minor',\n  'miserable',\n  'misleading',\n  'missing',\n  'misty',\n  'mixed',\n  'moaning',\n  'mobile',\n  'moderate',\n  'modern',\n  'modest',\n  'molecular',\n  'monetary',\n  'monthly',\n  'moral',\n  'motionless',\n  'muddy',\n  'multiple',\n  'mushy',\n  'musical',\n  'mute',\n  'mutual',\n  'mysterious',\n  'naked',\n  'narrow',\n  'nasty',\n  'national',\n  'native',\n  'natural',\n  'naughty',\n  'naval',\n  'near',\n  'nearby',\n  'neat',\n  'necessary',\n  'negative',\n  'neighbouring',\n  'nervous',\n  'net',\n  'neutral',\n  'new',\n  'nice',\n  'noble',\n  'noisy',\n  'normal',\n  'northern',\n  'nosy',\n  'notable',\n  'novel',\n  'nuclear',\n  'numerous',\n  'nursing',\n  'nutritious',\n  'nutty',\n  'obedient',\n  'objective',\n  'obliged',\n  'obnoxious',\n  'obvious',\n  'occasional',\n  'occupational',\n  'odd',\n  'official',\n  'ok',\n  'okay',\n  'old',\n  'olympic',\n  'only',\n  'open',\n  'operational',\n  'opposite',\n  'optimistic',\n  'oral',\n  'ordinary',\n  'organic',\n  'organisational',\n  'original',\n  'orthodox',\n  'other',\n  'outdoor',\n  'outer',\n  'outrageous',\n  'outside',\n  'outstanding',\n  'overall',\n  'overseas',\n  'overwhelming',\n  'painful',\n  'pale',\n  'panicky',\n  'parallel',\n  'parental',\n  'parliamentary',\n  'partial',\n  'particular',\n  'passing',\n  'passive',\n  'past',\n  'patient',\n  'payable',\n  'peaceful',\n  'peculiar',\n  'perfect',\n  'permanent',\n  'persistent',\n  'personal',\n  'petite',\n  'philosophical',\n  'physical',\n  'plain',\n  'planned',\n  'plastic',\n  'pleasant',\n  'pleased',\n  'poised',\n  'polite',\n  'political',\n  'poor',\n  'popular',\n  'positive',\n  'possible',\n  'potential',\n  'powerful',\n  'practical',\n  'precious',\n  'precise',\n  'preferred',\n  'pregnant',\n  'preliminary',\n  'premier',\n  'prepared',\n  'present',\n  'presidential',\n  'pretty',\n  'previous',\n  'prickly',\n  'primary',\n  'prime',\n  'primitive',\n  'principal',\n  'printed',\n  'prior',\n  'private',\n  'probable',\n  'productive',\n  'professional',\n  'profitable',\n  'profound',\n  'progressive',\n  'prominent',\n  'promising',\n  'proper',\n  'proposed',\n  'prospective',\n  'protective',\n  'protestant',\n  'proud',\n  'provincial',\n  'psychiatric',\n  'psychological',\n  'public',\n  'puny',\n  'pure',\n  'purring',\n  'puzzled',\n  'quaint',\n  'qualified',\n  'quarrelsome',\n  'querulous',\n  'quick',\n  'quickest',\n  'quiet',\n  'quintessential',\n  'quixotic',\n  'racial',\n  'radical',\n  'rainy',\n  'random',\n  'rapid',\n  'rare',\n  'raspy',\n  'rational',\n  'ratty',\n  'raw',\n  'ready',\n  'real',\n  'realistic',\n  'rear',\n  'reasonable',\n  'recent',\n  'reduced',\n  'redundant',\n  'regional',\n  'registered',\n  'regular',\n  'regulatory',\n  'related',\n  'relative',\n  'relaxed',\n  'relevant',\n  'reliable',\n  'relieved',\n  'religious',\n  'reluctant',\n  'remaining',\n  'remarkable',\n  'remote',\n  'renewed',\n  'representative',\n  'repulsive',\n  'required',\n  'resident',\n  'residential',\n  'resonant',\n  'respectable',\n  'respective',\n  'responsible',\n  'resulting',\n  'retail',\n  'retired',\n  'revolutionary',\n  'rich',\n  'ridiculous',\n  'right',\n  'rigid',\n  'ripe',\n  'rising',\n  'rival',\n  'roasted',\n  'robust',\n  'rolling',\n  'romantic',\n  'rotten',\n  'rough',\n  'round',\n  'royal',\n  'rubber',\n  'rude',\n  'ruling',\n  'running',\n  'rural',\n  'sacred',\n  'sad',\n  'safe',\n  'salty',\n  'satisfactory',\n  'satisfied',\n  'scared',\n  'scary',\n  'scattered',\n  'scientific',\n  'scornful',\n  'scrawny',\n  'screeching',\n  'secondary',\n  'secret',\n  'secure',\n  'select',\n  'selected',\n  'selective',\n  'selfish',\n  'semantic',\n  'senior',\n  'sensible',\n  'sensitive',\n  'separate',\n  'serious',\n  'severe',\n  'sexual',\n  'shaggy',\n  'shaky',\n  'shallow',\n  'shared',\n  'sharp',\n  'sheer',\n  'shiny',\n  'shivering',\n  'shocked',\n  'short',\n  'shrill',\n  'shy',\n  'sick',\n  'significant',\n  'silent',\n  'silky',\n  'silly',\n  'similar',\n  'simple',\n  'single',\n  'skilled',\n  'skinny',\n  'sleepy',\n  'slight',\n  'slim',\n  'slimy',\n  'slippery',\n  'slow',\n  'small',\n  'smart',\n  'smiling',\n  'smoggy',\n  'smooth',\n  'social',\n  'socialist',\n  'soft',\n  'solar',\n  'sole',\n  'solid',\n  'sophisticated',\n  'sore',\n  'sorry',\n  'sound',\n  'sour',\n  'southern',\n  'soviet',\n  'spare',\n  'sparkling',\n  'spatial',\n  'special',\n  'specific',\n  'specified',\n  'spectacular',\n  'spicy',\n  'spiritual',\n  'splendid',\n  'spontaneous',\n  'sporting',\n  'spotless',\n  'spotty',\n  'square',\n  'squealing',\n  'stable',\n  'stale',\n  'standard',\n  'static',\n  'statistical',\n  'statutory',\n  'steady',\n  'steep',\n  'sticky',\n  'stiff',\n  'still',\n  'stingy',\n  'stormy',\n  'straight',\n  'straightforward',\n  'strange',\n  'strategic',\n  'strict',\n  'striking',\n  'striped',\n  'strong',\n  'structural',\n  'stuck',\n  'stupid',\n  'subjective',\n  'subsequent',\n  'substantial',\n  'subtle',\n  'successful',\n  'successive',\n  'sudden',\n  'sufficient',\n  'suitable',\n  'sunny',\n  'super',\n  'superb',\n  'superior',\n  'supporting',\n  'supposed',\n  'supreme',\n  'sure',\n  'surprised',\n  'surprising',\n  'surrounding',\n  'surviving',\n  'suspicious',\n  'sweet',\n  'swift',\n  'symbolic',\n  'sympathetic',\n  'systematic',\n  'tall',\n  'tame',\n  'tart',\n  'tasteless',\n  'tasty',\n  'technical',\n  'technological',\n  'teenage',\n  'temporary',\n  'tender',\n  'tense',\n  'terrible',\n  'territorial',\n  'testy',\n  'then',\n  'theoretical',\n  'thick',\n  'thin',\n  'thirsty',\n  'thorough',\n  'thoughtful',\n  'thoughtless',\n  'thundering',\n  'tight',\n  'tiny',\n  'tired',\n  'top',\n  'tory',\n  'total',\n  'tough',\n  'toxic',\n  'traditional',\n  'tragic',\n  'tremendous',\n  'tricky',\n  'tropical',\n  'troubled',\n  'typical',\n  'ugliest',\n  'ugly',\n  'ultimate',\n  'unable',\n  'unacceptable',\n  'unaware',\n  'uncertain',\n  'unchanged',\n  'uncomfortable',\n  'unconscious',\n  'underground',\n  'underlying',\n  'unemployed',\n  'uneven',\n  'unexpected',\n  'unfair',\n  'unfortunate',\n  'unhappy',\n  'uniform',\n  'uninterested',\n  'unique',\n  'united',\n  'universal',\n  'unknown',\n  'unlikely',\n  'unnecessary',\n  'unpleasant',\n  'unsightly',\n  'unusual',\n  'unwilling',\n  'upper',\n  'upset',\n  'uptight',\n  'urban',\n  'urgent',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'vague',\n  'valid',\n  'valuable',\n  'variable',\n  'varied',\n  'various',\n  'varying',\n  'vast',\n  'verbal',\n  'vertical',\n  'very',\n  'vicarious',\n  'vicious',\n  'victorious',\n  'violent',\n  'visible',\n  'visiting',\n  'visual',\n  'vital',\n  'vitreous',\n  'vivacious',\n  'vivid',\n  'vocal',\n  'vocational',\n  'voiceless',\n  'voluminous',\n  'voluntary',\n  'vulnerable',\n  'wandering',\n  'warm',\n  'wasteful',\n  'watery',\n  'weak',\n  'wealthy',\n  'weary',\n  'wee',\n  'weekly',\n  'weird',\n  'welcome',\n  'well',\n  'western',\n  'wet',\n  'whispering',\n  'whole',\n  'wicked',\n  'wide',\n  'widespread',\n  'wild',\n  'wilful',\n  'willing',\n  'willowy',\n  'wily',\n  'wise',\n  'wispy',\n  'wittering',\n  'witty',\n  'wonderful',\n  'wooden',\n  'working',\n  'worldwide',\n  'worried',\n  'worrying',\n  'worthwhile',\n  'worthy',\n  'written',\n  'wrong',\n  'xenacious',\n  'xenial',\n  'xenogeneic',\n  'xenophobic',\n  'xeric',\n  'xerothermic',\n  'yabbering',\n  'yammering',\n  'yappiest',\n  'yappy',\n  'yawning',\n  'yearling',\n  'yearning',\n  'yeasty',\n  'yelling',\n  'yelping',\n  'yielding',\n  'yodelling',\n  'young',\n  'youngest',\n  'youthful',\n  'ytterbic',\n  'yucky',\n  'yummy',\n  'zany',\n  'zealous',\n  'zeroth',\n  'zestful',\n  'zesty',\n  'zippy',\n  'zonal',\n  'zoophagous',\n  'zygomorphic',\n  'zygotic',\n];\n","export default [\n  'aardvark',\n  'aardwolf',\n  'albatross',\n  'alligator',\n  'alpaca',\n  'amphibian',\n  'anaconda',\n  'angelfish',\n  'anglerfish',\n  'ant',\n  'anteater',\n  'antelope',\n  'antlion',\n  'ape',\n  'aphid',\n  'armadillo',\n  'asp',\n  'baboon',\n  'badger',\n  'bandicoot',\n  'barnacle',\n  'barracuda',\n  'basilisk',\n  'bass',\n  'bat',\n  'bear',\n  'beaver',\n  'bedbug',\n  'bee',\n  'beetle',\n  'bird',\n  'bison',\n  'blackbird',\n  'boa',\n  'boar',\n  'bobcat',\n  'bobolink',\n  'bonobo',\n  'booby',\n  'bovid',\n  'bug',\n  'butterfly',\n  'buzzard',\n  'camel',\n  'canid',\n  'canidae',\n  'capybara',\n  'cardinal',\n  'caribou',\n  'carp',\n  'cat',\n  'caterpillar',\n  'catfish',\n  'catshark',\n  'cattle',\n  'centipede',\n  'cephalopod',\n  'chameleon',\n  'cheetah',\n  'chickadee',\n  'chicken',\n  'chimpanzee',\n  'chinchilla',\n  'chipmunk',\n  'cicada',\n  'clam',\n  'clownfish',\n  'cobra',\n  'cockroach',\n  'cod',\n  'condor',\n  'constrictor',\n  'coral',\n  'cougar',\n  'cow',\n  'coyote',\n  'crab',\n  'crane',\n  'crawdad',\n  'crayfish',\n  'cricket',\n  'crocodile',\n  'crow',\n  'cuckoo',\n  'damselfly',\n  'deer',\n  'dingo',\n  'dinosaur',\n  'dog',\n  'dolphin',\n  'donkey',\n  'dormouse',\n  'dove',\n  'dragon',\n  'dragonfly',\n  'duck',\n  'eagle',\n  'earthworm',\n  'earwig',\n  'echidna',\n  'eel',\n  'egret',\n  'elephant',\n  'elk',\n  'emu',\n  'ermine',\n  'falcon',\n  'felidae',\n  'ferret',\n  'finch',\n  'firefly',\n  'fish',\n  'flamingo',\n  'flea',\n  'fly',\n  'flyingfish',\n  'fowl',\n  'fox',\n  'frog',\n  'galliform',\n  'gamefowl',\n  'gayal',\n  'gazelle',\n  'gecko',\n  'gerbil',\n  'gibbon',\n  'giraffe',\n  'goat',\n  'goldfish',\n  'goose',\n  'gopher',\n  'gorilla',\n  'grasshopper',\n  'grouse',\n  'guan',\n  'guanaco',\n  'guineafowl',\n  'gull',\n  'guppy',\n  'haddock',\n  'halibut',\n  'hamster',\n  'hare',\n  'harrier',\n  'hawk',\n  'hedgehog',\n  'heron',\n  'herring',\n  'hippopotamus',\n  'hookworm',\n  'hornet',\n  'horse',\n  'hoverfly',\n  'hummingbird',\n  'hyena',\n  'iguana',\n  'impala',\n  'jackal',\n  'jaguar',\n  'jay',\n  'jellyfish',\n  'junglefowl',\n  'kangaroo',\n  'kingfisher',\n  'kite',\n  'kiwi',\n  'koala',\n  'koi',\n  'krill',\n  'ladybug',\n  'lamprey',\n  'landfowl',\n  'lark',\n  'leech',\n  'lemming',\n  'lemur',\n  'leopard',\n  'leopon',\n  'limpet',\n  'lion',\n  'lizard',\n  'llama',\n  'lobster',\n  'locust',\n  'loon',\n  'louse',\n  'lungfish',\n  'lynx',\n  'macaw',\n  'mackerel',\n  'magpie',\n  'mammal',\n  'manatee',\n  'mandrill',\n  'marlin',\n  'marmoset',\n  'marmot',\n  'marsupial',\n  'marten',\n  'mastodon',\n  'meadowlark',\n  'meerkat',\n  'mink',\n  'minnow',\n  'mite',\n  'mockingbird',\n  'mole',\n  'mollusk',\n  'mongoose',\n  'monkey',\n  'moose',\n  'mosquito',\n  'moth',\n  'mouse',\n  'mule',\n  'muskox',\n  'narwhal',\n  'newt',\n  'nightingale',\n  'ocelot',\n  'octopus',\n  'opossum',\n  'orangutan',\n  'orca',\n  'ostrich',\n  'otter',\n  'owl',\n  'ox',\n  'panda',\n  'panther',\n  'parakeet',\n  'parrot',\n  'parrotfish',\n  'partridge',\n  'peacock',\n  'peafowl',\n  'pelican',\n  'penguin',\n  'perch',\n  'pheasant',\n  'pig',\n  'pigeon',\n  'pike',\n  'pinniped',\n  'piranha',\n  'planarian',\n  'platypus',\n  'pony',\n  'porcupine',\n  'porpoise',\n  'possum',\n  'prawn',\n  'primate',\n  'ptarmigan',\n  'puffin',\n  'puma',\n  'python',\n  'quail',\n  'quelea',\n  'quokka',\n  'rabbit',\n  'raccoon',\n  'rat',\n  'rattlesnake',\n  'raven',\n  'reindeer',\n  'reptile',\n  'rhinoceros',\n  'roadrunner',\n  'rodent',\n  'rook',\n  'rooster',\n  'roundworm',\n  'sailfish',\n  'salamander',\n  'salmon',\n  'sawfish',\n  'scallop',\n  'scorpion',\n  'seahorse',\n  'shark',\n  'sheep',\n  'shrew',\n  'shrimp',\n  'silkworm',\n  'silverfish',\n  'skink',\n  'skunk',\n  'sloth',\n  'slug',\n  'smelt',\n  'snail',\n  'snake',\n  'snipe',\n  'sole',\n  'sparrow',\n  'spider',\n  'spoonbill',\n  'squid',\n  'squirrel',\n  'starfish',\n  'stingray',\n  'stoat',\n  'stork',\n  'sturgeon',\n  'swallow',\n  'swan',\n  'swift',\n  'swordfish',\n  'swordtail',\n  'tahr',\n  'takin',\n  'tapir',\n  'tarantula',\n  'tarsier',\n  'termite',\n  'tern',\n  'thrush',\n  'tick',\n  'tiger',\n  'tiglon',\n  'toad',\n  'tortoise',\n  'toucan',\n  'trout',\n  'tuna',\n  'turkey',\n  'turtle',\n  'tyrannosaurus',\n  'unicorn',\n  'urial',\n  'vicuna',\n  'viper',\n  'vole',\n  'vulture',\n  'wallaby',\n  'walrus',\n  'warbler',\n  'wasp',\n  'weasel',\n  'whale',\n  'whippet',\n  'whitefish',\n  'wildcat',\n  'wildebeest',\n  'wildfowl',\n  'wolf',\n  'wolverine',\n  'wombat',\n  'woodpecker',\n  'worm',\n  'wren',\n  'xerinae',\n  'yak',\n  'zebra',\n];\n","export default [\n  'amaranth',\n  'amber',\n  'amethyst',\n  'apricot',\n  'aqua',\n  'aquamarine',\n  'azure',\n  'beige',\n  'black',\n  'blue',\n  'blush',\n  'bronze',\n  'brown',\n  'chocolate',\n  'coffee',\n  'copper',\n  'coral',\n  'crimson',\n  'cyan',\n  'emerald',\n  'fuchsia',\n  'gold',\n  'gray',\n  'green',\n  'harlequin',\n  'indigo',\n  'ivory',\n  'jade',\n  'lavender',\n  'lime',\n  'magenta',\n  'maroon',\n  'moccasin',\n  'olive',\n  'orange',\n  'peach',\n  'pink',\n  'plum',\n  'purple',\n  'red',\n  'rose',\n  'salmon',\n  'sapphire',\n  'scarlet',\n  'silver',\n  'tan',\n  'teal',\n  'tomato',\n  'turquoise',\n  'violet',\n  'white',\n  'yellow',\n];\n","export default [\n  'Afghanistan',\n  'Åland Islands',\n  'Albania',\n  'Algeria',\n  'American Samoa',\n  'Andorra',\n  'Angola',\n  'Anguilla',\n  'Antarctica',\n  'Antigua & Barbuda',\n  'Argentina',\n  'Armenia',\n  'Aruba',\n  'Ascension Island',\n  'Australia',\n  'Austria',\n  'Azerbaijan',\n  'Bahamas',\n  'Bahrain',\n  'Bangladesh',\n  'Barbados',\n  'Belarus',\n  'Belgium',\n  'Belize',\n  'Benin',\n  'Bermuda',\n  'Bhutan',\n  'Bolivia',\n  'Bosnia & Herzegovina',\n  'Botswana',\n  'Brazil',\n  'British Indian Ocean Territory',\n  'British Virgin Islands',\n  'Brunei',\n  'Bulgaria',\n  'Burkina Faso',\n  'Burundi',\n  'Cambodia',\n  'Cameroon',\n  'Canada',\n  'Canary Islands',\n  'Cape Verde',\n  'Caribbean Netherlands',\n  'Cayman Islands',\n  'Central African Republic',\n  'Ceuta & Melilla',\n  'Chad',\n  'Chile',\n  'China',\n  'Christmas Island',\n  'Cocos Islands',\n  'Colombia',\n  'Comoros',\n  'Congo',\n  'Cook Islands',\n  'Costa Rica',\n  \"Côte d'Ivoire\",\n  'Croatia',\n  'Cuba',\n  'Curaçao',\n  'Cyprus',\n  'Czechia',\n  'Denmark',\n  'Diego Garcia',\n  'Djibouti',\n  'Dominica',\n  'Dominican Republic',\n  'Ecuador',\n  'Egypt',\n  'El Salvador',\n  'Equatorial Guinea',\n  'Eritrea',\n  'Estonia',\n  'Ethiopia',\n  'Eurozone',\n  'Falkland Islands',\n  'Faroe Islands',\n  'Fiji',\n  'Finland',\n  'France',\n  'French Guiana',\n  'French Polynesia',\n  'French Southern Territories',\n  'Gabon',\n  'Gambia',\n  'Georgia',\n  'Germany',\n  'Ghana',\n  'Gibraltar',\n  'Greece',\n  'Greenland',\n  'Grenada',\n  'Guadeloupe',\n  'Guam',\n  'Guatemala',\n  'Guernsey',\n  'Guinea',\n  'Guinea-Bissau',\n  'Guyana',\n  'Haiti',\n  'Honduras',\n  'Hong Kong SAR China',\n  'Hungary',\n  'Iceland',\n  'India',\n  'Indonesia',\n  'Iran',\n  'Iraq',\n  'Ireland',\n  'Isle of Man',\n  'Israel',\n  'Italy',\n  'Jamaica',\n  'Japan',\n  'Jersey',\n  'Jordan',\n  'Kazakhstan',\n  'Kenya',\n  'Kiribati',\n  'Kosovo',\n  'Kuwait',\n  'Kyrgyzstan',\n  'Laos',\n  'Latvia',\n  'Lebanon',\n  'Lesotho',\n  'Liberia',\n  'Libya',\n  'Liechtenstein',\n  'Lithuania',\n  'Luxembourg',\n  'Macau SAR China',\n  'Macedonia',\n  'Madagascar',\n  'Malawi',\n  'Malaysia',\n  'Maldives',\n  'Mali',\n  'Malta',\n  'Marshall Islands',\n  'Martinique',\n  'Mauritania',\n  'Mauritius',\n  'Mayotte',\n  'Mexico',\n  'Micronesia',\n  'Moldova',\n  'Monaco',\n  'Mongolia',\n  'Montenegro',\n  'Montserrat',\n  'Morocco',\n  'Mozambique',\n  'Myanmar',\n  'Namibia',\n  'Nauru',\n  'Nepal',\n  'Netherlands',\n  'New Caledonia',\n  'New Zealand',\n  'Nicaragua',\n  'Niger',\n  'Nigeria',\n  'Niue',\n  'Norfolk Island',\n  'North Korea',\n  'Northern Mariana Islands',\n  'Norway',\n  'Oman',\n  'Pakistan',\n  'Palau',\n  'Palestinian Territories',\n  'Panama',\n  'Papua New Guinea',\n  'Paraguay',\n  'Peru',\n  'Philippines',\n  'Pitcairn Islands',\n  'Poland',\n  'Portugal',\n  'Puerto Rico',\n  'Qatar',\n  'Réunion',\n  'Romania',\n  'Russia',\n  'Rwanda',\n  'Samoa',\n  'San Marino',\n  'São Tomé & Príncipe',\n  'Saudi Arabia',\n  'Senegal',\n  'Serbia',\n  'Seychelles',\n  'Sierra Leone',\n  'Singapore',\n  'Sint Maarten',\n  'Slovakia',\n  'Slovenia',\n  'Solomon Islands',\n  'Somalia',\n  'South Africa',\n  'South Georgia & South Sandwich Islands',\n  'South Korea',\n  'South Sudan',\n  'Spain',\n  'Sri Lanka',\n  'St. Barthélemy',\n  'St. Helena',\n  'St. Kitts & Nevis',\n  'St. Lucia',\n  'St. Martin',\n  'St. Pierre & Miquelon',\n  'St. Vincent & Grenadines',\n  'Sudan',\n  'Suriname',\n  'Svalbard & Jan Mayen',\n  'Swaziland',\n  'Sweden',\n  'Switzerland',\n  'Syria',\n  'Taiwan',\n  'Tajikistan',\n  'Tanzania',\n  'Thailand',\n  'Timor-Leste',\n  'Togo',\n  'Tokelau',\n  'Tonga',\n  'Trinidad & Tobago',\n  'Tristan da Cunha',\n  'Tunisia',\n  'Turkey',\n  'Turkmenistan',\n  'Turks & Caicos Islands',\n  'Tuvalu',\n  'U.S. Outlying Islands',\n  'U.S. Virgin Islands',\n  'Uganda',\n  'Ukraine',\n  'United Arab Emirates',\n  'United Kingdom',\n  'United Nations',\n  'United States',\n  'Uruguay',\n  'Uzbekistan',\n  'Vanuatu',\n  'Vatican City',\n  'Venezuela',\n  'Vietnam',\n  'Wallis & Futuna',\n  'Western Sahara',\n  'Yemen',\n  'Zambia',\n  'Zimbabwe',\n];\n","export default [\n  'Akan',\n  'Amharic',\n  'Arabic',\n  'Assamese',\n  'Awadhi',\n  'Azerbaijani',\n  'Balochi',\n  'Belarusian',\n  'Bengali',\n  'Bhojpuri',\n  'Burmese',\n  'Cebuano',\n  'Chewa',\n  'Chhattisgarhi',\n  'Chittagonian',\n  'Czech',\n  'Deccan',\n  'Dhundhari',\n  'Dutch',\n  'English',\n  'French',\n  'Fula',\n  'Gan',\n  'German',\n  'Greek',\n  'Gujarati',\n  'Hakka',\n  'Haryanvi',\n  'Hausa',\n  'Hiligaynon',\n  'Hindi',\n  'Hmong',\n  'Hungarian',\n  'Igbo',\n  'Ilocano',\n  'Italian',\n  'Japanese',\n  'Javanese',\n  'Jin',\n  'Kannada',\n  'Kazakh',\n  'Khmer',\n  'Kinyarwanda',\n  'Kirundi',\n  'Konkani',\n  'Korean',\n  'Kurdish',\n  'Madurese',\n  'Magahi',\n  'Maithili',\n  'Malagasy',\n  'Malay',\n  'Malayalam',\n  'Mandarin',\n  'Marathi',\n  'Marwari',\n  'Min',\n  'Mossi',\n  'Nepali',\n  'Odia',\n  'Oromo',\n  'Pashto',\n  'Persian',\n  'Polish',\n  'Portuguese',\n  'Punjabi',\n  'Quechua',\n  'Romanian',\n  'Russian',\n  'Saraiki',\n  'Shona',\n  'Sindhi',\n  'Sinhala',\n  'Somali',\n  'Spanish',\n  'Sundanese',\n  'Swedish',\n  'Sylheti',\n  'Tagalog',\n  'Tamil',\n  'Telugu',\n  'Thai',\n  'Turkish',\n  'Turkmen',\n  'Ukrainian',\n  'Urdu',\n  'Uyghur',\n  'Uzbek',\n  'Vietnamese',\n  'Wu',\n  'Xhosa',\n  'Xiang',\n  'Yoruba',\n  'Yue',\n  'Zhuang',\n  'Zulu',\n];\n","export default [\n  'Aaren',\n  'Aarika',\n  'Abagael',\n  'Abagail',\n  'Abbe',\n  'Abbey',\n  'Abbi',\n  'Abbie',\n  'Abby',\n  'Abbye',\n  'Abigael',\n  'Abigail',\n  'Abigale',\n  'Abra',\n  'Ada',\n  'Adah',\n  'Adaline',\n  'Adan',\n  'Adara',\n  'Adda',\n  'Addi',\n  'Addia',\n  'Addie',\n  'Addy',\n  'Adel',\n  'Adela',\n  'Adelaida',\n  'Adelaide',\n  'Adele',\n  'Adelheid',\n  'Adelice',\n  'Adelina',\n  'Adelind',\n  'Adeline',\n  'Adella',\n  'Adelle',\n  'Adena',\n  'Adey',\n  'Adi',\n  'Adiana',\n  'Adina',\n  'Adora',\n  'Adore',\n  'Adoree',\n  'Adorne',\n  'Adrea',\n  'Adria',\n  'Adriaens',\n  'Adrian',\n  'Adriana',\n  'Adriane',\n  'Adrianna',\n  'Adrianne',\n  'Adriena',\n  'Adrienne',\n  'Aeriel',\n  'Aeriela',\n  'Aeriell',\n  'Afton',\n  'Ag',\n  'Agace',\n  'Agata',\n  'Agatha',\n  'Agathe',\n  'Aggi',\n  'Aggie',\n  'Aggy',\n  'Agna',\n  'Agnella',\n  'Agnes',\n  'Agnese',\n  'Agnesse',\n  'Agneta',\n  'Agnola',\n  'Agretha',\n  'Aida',\n  'Aidan',\n  'Aigneis',\n  'Aila',\n  'Aile',\n  'Ailee',\n  'Aileen',\n  'Ailene',\n  'Ailey',\n  'Aili',\n  'Ailina',\n  'Ailis',\n  'Ailsun',\n  'Ailyn',\n  'Aime',\n  'Aimee',\n  'Aimil',\n  'Aindrea',\n  'Ainslee',\n  'Ainsley',\n  'Ainslie',\n  'Ajay',\n  'Alaine',\n  'Alameda',\n  'Alana',\n  'Alanah',\n  'Alane',\n  'Alanna',\n  'Alayne',\n  'Alberta',\n  'Albertina',\n  'Albertine',\n  'Albina',\n  'Alecia',\n  'Aleda',\n  'Aleece',\n  'Aleen',\n  'Alejandra',\n  'Alejandrina',\n  'Alena',\n  'Alene',\n  'Alessandra',\n  'Aleta',\n  'Alethea',\n  'Alex',\n  'Alexa',\n  'Alexandra',\n  'Alexandrina',\n  'Alexi',\n  'Alexia',\n  'Alexina',\n  'Alexine',\n  'Alexis',\n  'Alfi',\n  'Alfie',\n  'Alfreda',\n  'Alfy',\n  'Ali',\n  'Alia',\n  'Alica',\n  'Alice',\n  'Alicea',\n  'Alicia',\n  'Alida',\n  'Alidia',\n  'Alie',\n  'Alika',\n  'Alikee',\n  'Alina',\n  'Aline',\n  'Alis',\n  'Alisa',\n  'Alisha',\n  'Alison',\n  'Alissa',\n  'Alisun',\n  'Alix',\n  'Aliza',\n  'Alla',\n  'Alleen',\n  'Allegra',\n  'Allene',\n  'Alli',\n  'Allianora',\n  'Allie',\n  'Allina',\n  'Allis',\n  'Allison',\n  'Allissa',\n  'Allix',\n  'Allsun',\n  'Allx',\n  'Ally',\n  'Allyce',\n  'Allyn',\n  'Allys',\n  'Allyson',\n  'Alma',\n  'Almeda',\n  'Almeria',\n  'Almeta',\n  'Almira',\n  'Almire',\n  'Aloise',\n  'Aloisia',\n  'Aloysia',\n  'Alta',\n  'Althea',\n  'Alvera',\n  'Alverta',\n  'Alvina',\n  'Alvinia',\n  'Alvira',\n  'Alyce',\n  'Alyda',\n  'Alys',\n  'Alysa',\n  'Alyse',\n  'Alysia',\n  'Alyson',\n  'Alyss',\n  'Alyssa',\n  'Amabel',\n  'Amabelle',\n  'Amalea',\n  'Amalee',\n  'Amaleta',\n  'Amalia',\n  'Amalie',\n  'Amalita',\n  'Amalle',\n  'Amanda',\n  'Amandi',\n  'Amandie',\n  'Amandy',\n  'Amara',\n  'Amargo',\n  'Amata',\n  'Amber',\n  'Amberly',\n  'Ambur',\n  'Ame',\n  'Amelia',\n  'Amelie',\n  'Amelina',\n  'Ameline',\n  'Amelita',\n  'Ami',\n  'Amie',\n  'Amii',\n  'Amil',\n  'Amitie',\n  'Amity',\n  'Ammamaria',\n  'Amy',\n  'Amye',\n  'Ana',\n  'Anabal',\n  'Anabel',\n  'Anabella',\n  'Anabelle',\n  'Analiese',\n  'Analise',\n  'Anallese',\n  'Anallise',\n  'Anastasia',\n  'Anastasie',\n  'Anastassia',\n  'Anatola',\n  'Andee',\n  'Andeee',\n  'Anderea',\n  'Andi',\n  'Andie',\n  'Andra',\n  'Andrea',\n  'Andreana',\n  'Andree',\n  'Andrei',\n  'Andria',\n  'Andriana',\n  'Andriette',\n  'Andromache',\n  'Andy',\n  'Anestassia',\n  'Anet',\n  'Anett',\n  'Anetta',\n  'Anette',\n  'Ange',\n  'Angel',\n  'Angela',\n  'Angele',\n  'Angelia',\n  'Angelica',\n  'Angelika',\n  'Angelina',\n  'Angeline',\n  'Angelique',\n  'Angelita',\n  'Angelle',\n  'Angie',\n  'Angil',\n  'Angy',\n  'Ania',\n  'Anica',\n  'Anissa',\n  'Anita',\n  'Anitra',\n  'Anjanette',\n  'Anjela',\n  'Ann',\n  'Ann-marie',\n  'Anna',\n  'Anna-diana',\n  'Anna-diane',\n  'Anna-maria',\n  'Annabal',\n  'Annabel',\n  'Annabela',\n  'Annabell',\n  'Annabella',\n  'Annabelle',\n  'Annadiana',\n  'Annadiane',\n  'Annalee',\n  'Annaliese',\n  'Annalise',\n  'Annamaria',\n  'Annamarie',\n  'Anne',\n  'Anne-corinne',\n  'Anne-marie',\n  'Annecorinne',\n  'Anneliese',\n  'Annelise',\n  'Annemarie',\n  'Annetta',\n  'Annette',\n  'Anni',\n  'Annice',\n  'Annie',\n  'Annis',\n  'Annissa',\n  'Annmaria',\n  'Annmarie',\n  'Annnora',\n  'Annora',\n  'Anny',\n  'Anselma',\n  'Ansley',\n  'Anstice',\n  'Anthe',\n  'Anthea',\n  'Anthia',\n  'Anthiathia',\n  'Antoinette',\n  'Antonella',\n  'Antonetta',\n  'Antonia',\n  'Antonie',\n  'Antonietta',\n  'Antonina',\n  'Anya',\n  'Appolonia',\n  'April',\n  'Aprilette',\n  'Ara',\n  'Arabel',\n  'Arabela',\n  'Arabele',\n  'Arabella',\n  'Arabelle',\n  'Arda',\n  'Ardath',\n  'Ardeen',\n  'Ardelia',\n  'Ardelis',\n  'Ardella',\n  'Ardelle',\n  'Arden',\n  'Ardene',\n  'Ardenia',\n  'Ardine',\n  'Ardis',\n  'Ardisj',\n  'Ardith',\n  'Ardra',\n  'Ardyce',\n  'Ardys',\n  'Ardyth',\n  'Aretha',\n  'Ariadne',\n  'Ariana',\n  'Aridatha',\n  'Ariel',\n  'Ariela',\n  'Ariella',\n  'Arielle',\n  'Arlana',\n  'Arlee',\n  'Arleen',\n  'Arlen',\n  'Arlena',\n  'Arlene',\n  'Arleta',\n  'Arlette',\n  'Arleyne',\n  'Arlie',\n  'Arliene',\n  'Arlina',\n  'Arlinda',\n  'Arline',\n  'Arluene',\n  'Arly',\n  'Arlyn',\n  'Arlyne',\n  'Aryn',\n  'Ashely',\n  'Ashia',\n  'Ashien',\n  'Ashil',\n  'Ashla',\n  'Ashlan',\n  'Ashlee',\n  'Ashleigh',\n  'Ashlen',\n  'Ashley',\n  'Ashli',\n  'Ashlie',\n  'Ashly',\n  'Asia',\n  'Astra',\n  'Astrid',\n  'Astrix',\n  'Atalanta',\n  'Athena',\n  'Athene',\n  'Atlanta',\n  'Atlante',\n  'Auberta',\n  'Aubine',\n  'Aubree',\n  'Aubrette',\n  'Aubrey',\n  'Aubrie',\n  'Aubry',\n  'Audi',\n  'Audie',\n  'Audra',\n  'Audre',\n  'Audrey',\n  'Audrie',\n  'Audry',\n  'Audrye',\n  'Audy',\n  'Augusta',\n  'Auguste',\n  'Augustina',\n  'Augustine',\n  'Aundrea',\n  'Aura',\n  'Aurea',\n  'Aurel',\n  'Aurelea',\n  'Aurelia',\n  'Aurelie',\n  'Auria',\n  'Aurie',\n  'Aurilia',\n  'Aurlie',\n  'Auroora',\n  'Aurora',\n  'Aurore',\n  'Austin',\n  'Austina',\n  'Austine',\n  'Ava',\n  'Aveline',\n  'Averil',\n  'Averyl',\n  'Avie',\n  'Avis',\n  'Aviva',\n  'Avivah',\n  'Avril',\n  'Avrit',\n  'Ayn',\n  'Bab',\n  'Babara',\n  'Babb',\n  'Babbette',\n  'Babbie',\n  'Babette',\n  'Babita',\n  'Babs',\n  'Bambi',\n  'Bambie',\n  'Bamby',\n  'Barb',\n  'Barbabra',\n  'Barbara',\n  'Barbara-anne',\n  'Barbaraanne',\n  'Barbe',\n  'Barbee',\n  'Barbette',\n  'Barbey',\n  'Barbi',\n  'Barbie',\n  'Barbra',\n  'Barby',\n  'Bari',\n  'Barrie',\n  'Barry',\n  'Basia',\n  'Bathsheba',\n  'Batsheva',\n  'Bea',\n  'Beatrice',\n  'Beatrisa',\n  'Beatrix',\n  'Beatriz',\n  'Bebe',\n  'Becca',\n  'Becka',\n  'Becki',\n  'Beckie',\n  'Becky',\n  'Bee',\n  'Beilul',\n  'Beitris',\n  'Bekki',\n  'Bel',\n  'Belia',\n  'Belicia',\n  'Belinda',\n  'Belita',\n  'Bell',\n  'Bella',\n  'Bellanca',\n  'Belle',\n  'Bellina',\n  'Belva',\n  'Belvia',\n  'Bendite',\n  'Benedetta',\n  'Benedicta',\n  'Benedikta',\n  'Benetta',\n  'Benita',\n  'Benni',\n  'Bennie',\n  'Benny',\n  'Benoite',\n  'Berenice',\n  'Beret',\n  'Berget',\n  'Berna',\n  'Bernadene',\n  'Bernadette',\n  'Bernadina',\n  'Bernadine',\n  'Bernardina',\n  'Bernardine',\n  'Bernelle',\n  'Bernete',\n  'Bernetta',\n  'Bernette',\n  'Berni',\n  'Bernice',\n  'Bernie',\n  'Bernita',\n  'Berny',\n  'Berri',\n  'Berrie',\n  'Berry',\n  'Bert',\n  'Berta',\n  'Berte',\n  'Bertha',\n  'Berthe',\n  'Berti',\n  'Bertie',\n  'Bertina',\n  'Bertine',\n  'Berty',\n  'Beryl',\n  'Beryle',\n  'Bess',\n  'Bessie',\n  'Bessy',\n  'Beth',\n  'Bethanne',\n  'Bethany',\n  'Bethena',\n  'Bethina',\n  'Betsey',\n  'Betsy',\n  'Betta',\n  'Bette',\n  'Bette-ann',\n  'Betteann',\n  'Betteanne',\n  'Betti',\n  'Bettina',\n  'Bettine',\n  'Betty',\n  'Bettye',\n  'Beulah',\n  'Bev',\n  'Beverie',\n  'Beverlee',\n  'Beverley',\n  'Beverlie',\n  'Beverly',\n  'Bevvy',\n  'Bianca',\n  'Bianka',\n  'Bibbie',\n  'Bibby',\n  'Bibbye',\n  'Bibi',\n  'Biddie',\n  'Biddy',\n  'Bidget',\n  'Bili',\n  'Bill',\n  'Billi',\n  'Billie',\n  'Billy',\n  'Billye',\n  'Binni',\n  'Binnie',\n  'Binny',\n  'Bird',\n  'Birdie',\n  'Birgit',\n  'Birgitta',\n  'Blair',\n  'Blaire',\n  'Blake',\n  'Blakelee',\n  'Blakeley',\n  'Blanca',\n  'Blanch',\n  'Blancha',\n  'Blanche',\n  'Blinni',\n  'Blinnie',\n  'Blinny',\n  'Bliss',\n  'Blisse',\n  'Blithe',\n  'Blondell',\n  'Blondelle',\n  'Blondie',\n  'Blondy',\n  'Blythe',\n  'Bobbe',\n  'Bobbee',\n  'Bobbette',\n  'Bobbi',\n  'Bobbie',\n  'Bobby',\n  'Bobbye',\n  'Bobette',\n  'Bobina',\n  'Bobine',\n  'Bobinette',\n  'Bonita',\n  'Bonnee',\n  'Bonni',\n  'Bonnibelle',\n  'Bonnie',\n  'Bonny',\n  'Brana',\n  'Brandais',\n  'Brande',\n  'Brandea',\n  'Brandi',\n  'Brandice',\n  'Brandie',\n  'Brandise',\n  'Brandy',\n  'Breanne',\n  'Brear',\n  'Bree',\n  'Breena',\n  'Bren',\n  'Brena',\n  'Brenda',\n  'Brenn',\n  'Brenna',\n  'Brett',\n  'Bria',\n  'Briana',\n  'Brianna',\n  'Brianne',\n  'Bride',\n  'Bridget',\n  'Bridgette',\n  'Bridie',\n  'Brier',\n  'Brietta',\n  'Brigid',\n  'Brigida',\n  'Brigit',\n  'Brigitta',\n  'Brigitte',\n  'Brina',\n  'Briney',\n  'Brinn',\n  'Brinna',\n  'Briny',\n  'Brit',\n  'Brita',\n  'Britney',\n  'Britni',\n  'Britt',\n  'Britta',\n  'Brittan',\n  'Brittaney',\n  'Brittani',\n  'Brittany',\n  'Britte',\n  'Britteny',\n  'Brittne',\n  'Brittney',\n  'Brittni',\n  'Brook',\n  'Brooke',\n  'Brooks',\n  'Brunhilda',\n  'Brunhilde',\n  'Bryana',\n  'Bryn',\n  'Bryna',\n  'Brynn',\n  'Brynna',\n  'Brynne',\n  'Buffy',\n  'Bunni',\n  'Bunnie',\n  'Bunny',\n  'Cacilia',\n  'Cacilie',\n  'Cahra',\n  'Cairistiona',\n  'Caitlin',\n  'Caitrin',\n  'Cal',\n  'Calida',\n  'Calla',\n  'Calley',\n  'Calli',\n  'Callida',\n  'Callie',\n  'Cally',\n  'Calypso',\n  'Cam',\n  'Camala',\n  'Camel',\n  'Camella',\n  'Camellia',\n  'Cami',\n  'Camila',\n  'Camile',\n  'Camilla',\n  'Camille',\n  'Cammi',\n  'Cammie',\n  'Cammy',\n  'Candace',\n  'Candi',\n  'Candice',\n  'Candida',\n  'Candide',\n  'Candie',\n  'Candis',\n  'Candra',\n  'Candy',\n  'Caprice',\n  'Cara',\n  'Caralie',\n  'Caren',\n  'Carena',\n  'Caresa',\n  'Caressa',\n  'Caresse',\n  'Carey',\n  'Cari',\n  'Caria',\n  'Carie',\n  'Caril',\n  'Carilyn',\n  'Carin',\n  'Carina',\n  'Carine',\n  'Cariotta',\n  'Carissa',\n  'Carita',\n  'Caritta',\n  'Carla',\n  'Carlee',\n  'Carleen',\n  'Carlen',\n  'Carlene',\n  'Carley',\n  'Carlie',\n  'Carlin',\n  'Carlina',\n  'Carline',\n  'Carlita',\n  'Carlota',\n  'Carlotta',\n  'Carly',\n  'Carlye',\n  'Carlyn',\n  'Carlynn',\n  'Carlynne',\n  'Carma',\n  'Carmel',\n  'Carmela',\n  'Carmelia',\n  'Carmelina',\n  'Carmelita',\n  'Carmella',\n  'Carmelle',\n  'Carmen',\n  'Carmencita',\n  'Carmina',\n  'Carmine',\n  'Carmita',\n  'Carmon',\n  'Caro',\n  'Carol',\n  'Carol-jean',\n  'Carola',\n  'Carolan',\n  'Carolann',\n  'Carole',\n  'Carolee',\n  'Carolin',\n  'Carolina',\n  'Caroline',\n  'Caroljean',\n  'Carolyn',\n  'Carolyne',\n  'Carolynn',\n  'Caron',\n  'Carree',\n  'Carri',\n  'Carrie',\n  'Carrissa',\n  'Carroll',\n  'Carry',\n  'Cary',\n  'Caryl',\n  'Caryn',\n  'Casandra',\n  'Casey',\n  'Casi',\n  'Casie',\n  'Cass',\n  'Cassandra',\n  'Cassandre',\n  'Cassandry',\n  'Cassaundra',\n  'Cassey',\n  'Cassi',\n  'Cassie',\n  'Cassondra',\n  'Cassy',\n  'Catarina',\n  'Cate',\n  'Caterina',\n  'Catha',\n  'Catharina',\n  'Catharine',\n  'Cathe',\n  'Cathee',\n  'Catherin',\n  'Catherina',\n  'Catherine',\n  'Cathi',\n  'Cathie',\n  'Cathleen',\n  'Cathlene',\n  'Cathrin',\n  'Cathrine',\n  'Cathryn',\n  'Cathy',\n  'Cathyleen',\n  'Cati',\n  'Catie',\n  'Catina',\n  'Catlaina',\n  'Catlee',\n  'Catlin',\n  'Catrina',\n  'Catriona',\n  'Caty',\n  'Caye',\n  'Cayla',\n  'Cecelia',\n  'Cecil',\n  'Cecile',\n  'Ceciley',\n  'Cecilia',\n  'Cecilla',\n  'Cecily',\n  'Ceil',\n  'Cele',\n  'Celene',\n  'Celesta',\n  'Celeste',\n  'Celestia',\n  'Celestina',\n  'Celestine',\n  'Celestyn',\n  'Celestyna',\n  'Celia',\n  'Celie',\n  'Celina',\n  'Celinda',\n  'Celine',\n  'Celinka',\n  'Celisse',\n  'Celka',\n  'Celle',\n  'Cesya',\n  'Chad',\n  'Chanda',\n  'Chandal',\n  'Chandra',\n  'Channa',\n  'Chantal',\n  'Chantalle',\n  'Charil',\n  'Charin',\n  'Charis',\n  'Charissa',\n  'Charisse',\n  'Charita',\n  'Charity',\n  'Charla',\n  'Charlean',\n  'Charleen',\n  'Charlena',\n  'Charlene',\n  'Charline',\n  'Charlot',\n  'Charlotta',\n  'Charlotte',\n  'Charmain',\n  'Charmaine',\n  'Charmane',\n  'Charmian',\n  'Charmine',\n  'Charmion',\n  'Charo',\n  'Charyl',\n  'Chastity',\n  'Chelsae',\n  'Chelsea',\n  'Chelsey',\n  'Chelsie',\n  'Chelsy',\n  'Cher',\n  'Chere',\n  'Cherey',\n  'Cheri',\n  'Cherianne',\n  'Cherice',\n  'Cherida',\n  'Cherie',\n  'Cherilyn',\n  'Cherilynn',\n  'Cherin',\n  'Cherise',\n  'Cherish',\n  'Cherlyn',\n  'Cherri',\n  'Cherrita',\n  'Cherry',\n  'Chery',\n  'Cherye',\n  'Cheryl',\n  'Cheslie',\n  'Chiarra',\n  'Chickie',\n  'Chicky',\n  'Chiquia',\n  'Chiquita',\n  'Chlo',\n  'Chloe',\n  'Chloette',\n  'Chloris',\n  'Chris',\n  'Chrissie',\n  'Chrissy',\n  'Christa',\n  'Christabel',\n  'Christabella',\n  'Christal',\n  'Christalle',\n  'Christan',\n  'Christean',\n  'Christel',\n  'Christen',\n  'Christi',\n  'Christian',\n  'Christiana',\n  'Christiane',\n  'Christie',\n  'Christin',\n  'Christina',\n  'Christine',\n  'Christy',\n  'Christye',\n  'Christyna',\n  'Chrysa',\n  'Chrysler',\n  'Chrystal',\n  'Chryste',\n  'Chrystel',\n  'Cicely',\n  'Cicily',\n  'Ciel',\n  'Cilka',\n  'Cinda',\n  'Cindee',\n  'Cindelyn',\n  'Cinderella',\n  'Cindi',\n  'Cindie',\n  'Cindra',\n  'Cindy',\n  'Cinnamon',\n  'Cissiee',\n  'Cissy',\n  'Clair',\n  'Claire',\n  'Clara',\n  'Clarabelle',\n  'Clare',\n  'Claresta',\n  'Clareta',\n  'Claretta',\n  'Clarette',\n  'Clarey',\n  'Clari',\n  'Claribel',\n  'Clarice',\n  'Clarie',\n  'Clarinda',\n  'Clarine',\n  'Clarissa',\n  'Clarisse',\n  'Clarita',\n  'Clary',\n  'Claude',\n  'Claudelle',\n  'Claudetta',\n  'Claudette',\n  'Claudia',\n  'Claudie',\n  'Claudina',\n  'Claudine',\n  'Clea',\n  'Clem',\n  'Clemence',\n  'Clementia',\n  'Clementina',\n  'Clementine',\n  'Clemmie',\n  'Clemmy',\n  'Cleo',\n  'Cleopatra',\n  'Clerissa',\n  'Clio',\n  'Clo',\n  'Cloe',\n  'Cloris',\n  'Clotilda',\n  'Clovis',\n  'Codee',\n  'Codi',\n  'Codie',\n  'Cody',\n  'Coleen',\n  'Colene',\n  'Coletta',\n  'Colette',\n  'Colleen',\n  'Collen',\n  'Collete',\n  'Collette',\n  'Collie',\n  'Colline',\n  'Colly',\n  'Con',\n  'Concettina',\n  'Conchita',\n  'Concordia',\n  'Conni',\n  'Connie',\n  'Conny',\n  'Consolata',\n  'Constance',\n  'Constancia',\n  'Constancy',\n  'Constanta',\n  'Constantia',\n  'Constantina',\n  'Constantine',\n  'Consuela',\n  'Consuelo',\n  'Cookie',\n  'Cora',\n  'Corabel',\n  'Corabella',\n  'Corabelle',\n  'Coral',\n  'Coralie',\n  'Coraline',\n  'Coralyn',\n  'Cordelia',\n  'Cordelie',\n  'Cordey',\n  'Cordi',\n  'Cordie',\n  'Cordula',\n  'Cordy',\n  'Coreen',\n  'Corella',\n  'Corenda',\n  'Corene',\n  'Coretta',\n  'Corette',\n  'Corey',\n  'Cori',\n  'Corie',\n  'Corilla',\n  'Corina',\n  'Corine',\n  'Corinna',\n  'Corinne',\n  'Coriss',\n  'Corissa',\n  'Corliss',\n  'Corly',\n  'Cornela',\n  'Cornelia',\n  'Cornelle',\n  'Cornie',\n  'Corny',\n  'Correna',\n  'Correy',\n  'Corri',\n  'Corrianne',\n  'Corrie',\n  'Corrina',\n  'Corrine',\n  'Corrinne',\n  'Corry',\n  'Cortney',\n  'Cory',\n  'Cosetta',\n  'Cosette',\n  'Costanza',\n  'Courtenay',\n  'Courtnay',\n  'Courtney',\n  'Crin',\n  'Cris',\n  'Crissie',\n  'Crissy',\n  'Crista',\n  'Cristabel',\n  'Cristal',\n  'Cristen',\n  'Cristi',\n  'Cristie',\n  'Cristin',\n  'Cristina',\n  'Cristine',\n  'Cristionna',\n  'Cristy',\n  'Crysta',\n  'Crystal',\n  'Crystie',\n  'Cthrine',\n  'Cyb',\n  'Cybil',\n  'Cybill',\n  'Cymbre',\n  'Cynde',\n  'Cyndi',\n  'Cyndia',\n  'Cyndie',\n  'Cyndy',\n  'Cynthea',\n  'Cynthia',\n  'Cynthie',\n  'Cynthy',\n  'Dacey',\n  'Dacia',\n  'Dacie',\n  'Dacy',\n  'Dael',\n  'Daffi',\n  'Daffie',\n  'Daffy',\n  'Dagmar',\n  'Dahlia',\n  'Daile',\n  'Daisey',\n  'Daisi',\n  'Daisie',\n  'Daisy',\n  'Dale',\n  'Dalenna',\n  'Dalia',\n  'Dalila',\n  'Dallas',\n  'Daloris',\n  'Damara',\n  'Damaris',\n  'Damita',\n  'Dana',\n  'Danell',\n  'Danella',\n  'Danette',\n  'Dani',\n  'Dania',\n  'Danica',\n  'Danice',\n  'Daniela',\n  'Daniele',\n  'Daniella',\n  'Danielle',\n  'Danika',\n  'Danila',\n  'Danit',\n  'Danita',\n  'Danna',\n  'Danni',\n  'Dannie',\n  'Danny',\n  'Dannye',\n  'Danya',\n  'Danyelle',\n  'Danyette',\n  'Daphene',\n  'Daphna',\n  'Daphne',\n  'Dara',\n  'Darb',\n  'Darbie',\n  'Darby',\n  'Darcee',\n  'Darcey',\n  'Darci',\n  'Darcie',\n  'Darcy',\n  'Darda',\n  'Dareen',\n  'Darell',\n  'Darelle',\n  'Dari',\n  'Daria',\n  'Darice',\n  'Darla',\n  'Darleen',\n  'Darlene',\n  'Darline',\n  'Darlleen',\n  'Daron',\n  'Darrelle',\n  'Darryl',\n  'Darsey',\n  'Darsie',\n  'Darya',\n  'Daryl',\n  'Daryn',\n  'Dasha',\n  'Dasi',\n  'Dasie',\n  'Dasya',\n  'Datha',\n  'Daune',\n  'Daveen',\n  'Daveta',\n  'Davida',\n  'Davina',\n  'Davine',\n  'Davita',\n  'Dawn',\n  'Dawna',\n  'Dayle',\n  'Dayna',\n  'Ddene',\n  'De',\n  'Deana',\n  'Deane',\n  'Deanna',\n  'Deanne',\n  'Deb',\n  'Debbi',\n  'Debbie',\n  'Debby',\n  'Debee',\n  'Debera',\n  'Debi',\n  'Debor',\n  'Debora',\n  'Deborah',\n  'Debra',\n  'Dede',\n  'Dedie',\n  'Dedra',\n  'Dee',\n  'Deeann',\n  'Deeanne',\n  'Deedee',\n  'Deena',\n  'Deerdre',\n  'Deeyn',\n  'Dehlia',\n  'Deidre',\n  'Deina',\n  'Deirdre',\n  'Del',\n  'Dela',\n  'Delcina',\n  'Delcine',\n  'Delia',\n  'Delila',\n  'Delilah',\n  'Delinda',\n  'Dell',\n  'Della',\n  'Delly',\n  'Delora',\n  'Delores',\n  'Deloria',\n  'Deloris',\n  'Delphine',\n  'Delphinia',\n  'Demeter',\n  'Demetra',\n  'Demetria',\n  'Demetris',\n  'Dena',\n  'Deni',\n  'Denice',\n  'Denise',\n  'Denna',\n  'Denni',\n  'Dennie',\n  'Denny',\n  'Deny',\n  'Denys',\n  'Denyse',\n  'Deonne',\n  'Desdemona',\n  'Desirae',\n  'Desiree',\n  'Desiri',\n  'Deva',\n  'Devan',\n  'Devi',\n  'Devin',\n  'Devina',\n  'Devinne',\n  'Devon',\n  'Devondra',\n  'Devonna',\n  'Devonne',\n  'Devora',\n  'Di',\n  'Diahann',\n  'Dian',\n  'Diana',\n  'Diandra',\n  'Diane',\n  'Diane-marie',\n  'Dianemarie',\n  'Diann',\n  'Dianna',\n  'Dianne',\n  'Diannne',\n  'Didi',\n  'Dido',\n  'Diena',\n  'Dierdre',\n  'Dina',\n  'Dinah',\n  'Dinnie',\n  'Dinny',\n  'Dion',\n  'Dione',\n  'Dionis',\n  'Dionne',\n  'Dita',\n  'Dix',\n  'Dixie',\n  'Dniren',\n  'Dode',\n  'Dodi',\n  'Dodie',\n  'Dody',\n  'Doe',\n  'Doll',\n  'Dolley',\n  'Dolli',\n  'Dollie',\n  'Dolly',\n  'Dolores',\n  'Dolorita',\n  'Doloritas',\n  'Domeniga',\n  'Dominga',\n  'Domini',\n  'Dominica',\n  'Dominique',\n  'Dona',\n  'Donella',\n  'Donelle',\n  'Donetta',\n  'Donia',\n  'Donica',\n  'Donielle',\n  'Donna',\n  'Donnamarie',\n  'Donni',\n  'Donnie',\n  'Donny',\n  'Dora',\n  'Doralia',\n  'Doralin',\n  'Doralyn',\n  'Doralynn',\n  'Doralynne',\n  'Dore',\n  'Doreen',\n  'Dorelia',\n  'Dorella',\n  'Dorelle',\n  'Dorena',\n  'Dorene',\n  'Doretta',\n  'Dorette',\n  'Dorey',\n  'Dori',\n  'Doria',\n  'Dorian',\n  'Dorice',\n  'Dorie',\n  'Dorine',\n  'Doris',\n  'Dorisa',\n  'Dorise',\n  'Dorita',\n  'Doro',\n  'Dorolice',\n  'Dorolisa',\n  'Dorotea',\n  'Doroteya',\n  'Dorothea',\n  'Dorothee',\n  'Dorothy',\n  'Dorree',\n  'Dorri',\n  'Dorrie',\n  'Dorris',\n  'Dorry',\n  'Dorthea',\n  'Dorthy',\n  'Dory',\n  'Dosi',\n  'Dot',\n  'Doti',\n  'Dotti',\n  'Dottie',\n  'Dotty',\n  'Dre',\n  'Dreddy',\n  'Dredi',\n  'Drona',\n  'Dru',\n  'Druci',\n  'Drucie',\n  'Drucill',\n  'Drucy',\n  'Drusi',\n  'Drusie',\n  'Drusilla',\n  'Drusy',\n  'Dulce',\n  'Dulcea',\n  'Dulci',\n  'Dulcia',\n  'Dulciana',\n  'Dulcie',\n  'Dulcine',\n  'Dulcinea',\n  'Dulcy',\n  'Dulsea',\n  'Dusty',\n  'Dyan',\n  'Dyana',\n  'Dyane',\n  'Dyann',\n  'Dyanna',\n  'Dyanne',\n  'Dyna',\n  'Dynah',\n  'Eachelle',\n  'Eada',\n  'Eadie',\n  'Eadith',\n  'Ealasaid',\n  'Eartha',\n  'Easter',\n  'Eba',\n  'Ebba',\n  'Ebonee',\n  'Ebony',\n  'Eda',\n  'Eddi',\n  'Eddie',\n  'Eddy',\n  'Ede',\n  'Edee',\n  'Edeline',\n  'Eden',\n  'Edi',\n  'Edie',\n  'Edin',\n  'Edita',\n  'Edith',\n  'Editha',\n  'Edithe',\n  'Ediva',\n  'Edna',\n  'Edwina',\n  'Edy',\n  'Edyth',\n  'Edythe',\n  'Effie',\n  'Eileen',\n  'Eilis',\n  'Eimile',\n  'Eirena',\n  'Ekaterina',\n  'Elaina',\n  'Elaine',\n  'Elana',\n  'Elane',\n  'Elayne',\n  'Elberta',\n  'Elbertina',\n  'Elbertine',\n  'Eleanor',\n  'Eleanora',\n  'Eleanore',\n  'Electra',\n  'Eleen',\n  'Elena',\n  'Elene',\n  'Eleni',\n  'Elenore',\n  'Eleonora',\n  'Eleonore',\n  'Elfie',\n  'Elfreda',\n  'Elfrida',\n  'Elfrieda',\n  'Elga',\n  'Elianora',\n  'Elianore',\n  'Elicia',\n  'Elie',\n  'Elinor',\n  'Elinore',\n  'Elisa',\n  'Elisabet',\n  'Elisabeth',\n  'Elisabetta',\n  'Elise',\n  'Elisha',\n  'Elissa',\n  'Elita',\n  'Eliza',\n  'Elizabet',\n  'Elizabeth',\n  'Elka',\n  'Elke',\n  'Ella',\n  'Elladine',\n  'Elle',\n  'Ellen',\n  'Ellene',\n  'Ellette',\n  'Elli',\n  'Ellie',\n  'Ellissa',\n  'Elly',\n  'Ellyn',\n  'Ellynn',\n  'Elmira',\n  'Elna',\n  'Elnora',\n  'Elnore',\n  'Eloisa',\n  'Eloise',\n  'Elonore',\n  'Elora',\n  'Elsa',\n  'Elsbeth',\n  'Else',\n  'Elset',\n  'Elsey',\n  'Elsi',\n  'Elsie',\n  'Elsinore',\n  'Elspeth',\n  'Elsy',\n  'Elva',\n  'Elvera',\n  'Elvina',\n  'Elvira',\n  'Elwira',\n  'Elyn',\n  'Elyse',\n  'Elysee',\n  'Elysha',\n  'Elysia',\n  'Elyssa',\n  'Em',\n  'Ema',\n  'Emalee',\n  'Emalia',\n  'Emelda',\n  'Emelia',\n  'Emelina',\n  'Emeline',\n  'Emelita',\n  'Emelyne',\n  'Emera',\n  'Emilee',\n  'Emili',\n  'Emilia',\n  'Emilie',\n  'Emiline',\n  'Emily',\n  'Emlyn',\n  'Emlynn',\n  'Emlynne',\n  'Emma',\n  'Emmalee',\n  'Emmaline',\n  'Emmalyn',\n  'Emmalynn',\n  'Emmalynne',\n  'Emmeline',\n  'Emmey',\n  'Emmi',\n  'Emmie',\n  'Emmy',\n  'Emmye',\n  'Emogene',\n  'Emyle',\n  'Emylee',\n  'Engracia',\n  'Enid',\n  'Enrica',\n  'Enrichetta',\n  'Enrika',\n  'Enriqueta',\n  'Eolanda',\n  'Eolande',\n  'Eran',\n  'Erda',\n  'Erena',\n  'Erica',\n  'Ericha',\n  'Ericka',\n  'Erika',\n  'Erin',\n  'Erina',\n  'Erinn',\n  'Erinna',\n  'Erma',\n  'Ermengarde',\n  'Ermentrude',\n  'Ermina',\n  'Erminia',\n  'Erminie',\n  'Erna',\n  'Ernaline',\n  'Ernesta',\n  'Ernestine',\n  'Ertha',\n  'Eryn',\n  'Esma',\n  'Esmaria',\n  'Esme',\n  'Esmeralda',\n  'Essa',\n  'Essie',\n  'Essy',\n  'Esta',\n  'Estel',\n  'Estele',\n  'Estell',\n  'Estella',\n  'Estelle',\n  'Ester',\n  'Esther',\n  'Estrella',\n  'Estrellita',\n  'Ethel',\n  'Ethelda',\n  'Ethelin',\n  'Ethelind',\n  'Etheline',\n  'Ethelyn',\n  'Ethyl',\n  'Etta',\n  'Etti',\n  'Ettie',\n  'Etty',\n  'Eudora',\n  'Eugenia',\n  'Eugenie',\n  'Eugine',\n  'Eula',\n  'Eulalie',\n  'Eunice',\n  'Euphemia',\n  'Eustacia',\n  'Eva',\n  'Evaleen',\n  'Evangelia',\n  'Evangelin',\n  'Evangelina',\n  'Evangeline',\n  'Evania',\n  'Evanne',\n  'Eve',\n  'Eveleen',\n  'Evelina',\n  'Eveline',\n  'Evelyn',\n  'Evey',\n  'Evie',\n  'Evita',\n  'Evonne',\n  'Evvie',\n  'Evvy',\n  'Evy',\n  'Eyde',\n  'Eydie',\n  'Ezmeralda',\n  'Fae',\n  'Faina',\n  'Faith',\n  'Fallon',\n  'Fan',\n  'Fanchette',\n  'Fanchon',\n  'Fancie',\n  'Fancy',\n  'Fanechka',\n  'Fania',\n  'Fanni',\n  'Fannie',\n  'Fanny',\n  'Fanya',\n  'Fara',\n  'Farah',\n  'Farand',\n  'Farica',\n  'Farra',\n  'Farrah',\n  'Farrand',\n  'Faun',\n  'Faunie',\n  'Faustina',\n  'Faustine',\n  'Fawn',\n  'Fawne',\n  'Fawnia',\n  'Fay',\n  'Faydra',\n  'Faye',\n  'Fayette',\n  'Fayina',\n  'Fayre',\n  'Fayth',\n  'Faythe',\n  'Federica',\n  'Fedora',\n  'Felecia',\n  'Felicdad',\n  'Felice',\n  'Felicia',\n  'Felicity',\n  'Felicle',\n  'Felipa',\n  'Felisha',\n  'Felita',\n  'Feliza',\n  'Fenelia',\n  'Feodora',\n  'Ferdinanda',\n  'Ferdinande',\n  'Fern',\n  'Fernanda',\n  'Fernande',\n  'Fernandina',\n  'Ferne',\n  'Fey',\n  'Fiann',\n  'Fianna',\n  'Fidela',\n  'Fidelia',\n  'Fidelity',\n  'Fifi',\n  'Fifine',\n  'Filia',\n  'Filide',\n  'Filippa',\n  'Fina',\n  'Fiona',\n  'Fionna',\n  'Fionnula',\n  'Fiorenze',\n  'Fleur',\n  'Fleurette',\n  'Flo',\n  'Flor',\n  'Flora',\n  'Florance',\n  'Flore',\n  'Florella',\n  'Florence',\n  'Florencia',\n  'Florentia',\n  'Florenza',\n  'Florette',\n  'Flori',\n  'Floria',\n  'Florida',\n  'Florie',\n  'Florina',\n  'Florinda',\n  'Floris',\n  'Florri',\n  'Florrie',\n  'Florry',\n  'Flory',\n  'Flossi',\n  'Flossie',\n  'Flossy',\n  'Flss',\n  'Fran',\n  'Francene',\n  'Frances',\n  'Francesca',\n  'Francine',\n  'Francisca',\n  'Franciska',\n  'Francoise',\n  'Francyne',\n  'Frank',\n  'Frankie',\n  'Franky',\n  'Franni',\n  'Frannie',\n  'Franny',\n  'Frayda',\n  'Fred',\n  'Freda',\n  'Freddi',\n  'Freddie',\n  'Freddy',\n  'Fredelia',\n  'Frederica',\n  'Fredericka',\n  'Frederique',\n  'Fredi',\n  'Fredia',\n  'Fredra',\n  'Fredrika',\n  'Freida',\n  'Frieda',\n  'Friederike',\n  'Fulvia',\n  'Gabbey',\n  'Gabbi',\n  'Gabbie',\n  'Gabey',\n  'Gabi',\n  'Gabie',\n  'Gabriel',\n  'Gabriela',\n  'Gabriell',\n  'Gabriella',\n  'Gabrielle',\n  'Gabriellia',\n  'Gabrila',\n  'Gaby',\n  'Gae',\n  'Gael',\n  'Gail',\n  'Gale',\n  'Galina',\n  'Garland',\n  'Garnet',\n  'Garnette',\n  'Gates',\n  'Gavra',\n  'Gavrielle',\n  'Gay',\n  'Gaye',\n  'Gayel',\n  'Gayla',\n  'Gayle',\n  'Gayleen',\n  'Gaylene',\n  'Gaynor',\n  'Gelya',\n  'Gena',\n  'Gene',\n  'Geneva',\n  'Genevieve',\n  'Genevra',\n  'Genia',\n  'Genna',\n  'Genni',\n  'Gennie',\n  'Gennifer',\n  'Genny',\n  'Genovera',\n  'Genvieve',\n  'George',\n  'Georgeanna',\n  'Georgeanne',\n  'Georgena',\n  'Georgeta',\n  'Georgetta',\n  'Georgette',\n  'Georgia',\n  'Georgiana',\n  'Georgianna',\n  'Georgianne',\n  'Georgie',\n  'Georgina',\n  'Georgine',\n  'Geralda',\n  'Geraldine',\n  'Gerda',\n  'Gerhardine',\n  'Geri',\n  'Gerianna',\n  'Gerianne',\n  'Gerladina',\n  'Germain',\n  'Germaine',\n  'Germana',\n  'Gerri',\n  'Gerrie',\n  'Gerrilee',\n  'Gerry',\n  'Gert',\n  'Gerta',\n  'Gerti',\n  'Gertie',\n  'Gertrud',\n  'Gertruda',\n  'Gertrude',\n  'Gertrudis',\n  'Gerty',\n  'Giacinta',\n  'Giana',\n  'Gianina',\n  'Gianna',\n  'Gigi',\n  'Gilberta',\n  'Gilberte',\n  'Gilbertina',\n  'Gilbertine',\n  'Gilda',\n  'Gilemette',\n  'Gill',\n  'Gillan',\n  'Gilli',\n  'Gillian',\n  'Gillie',\n  'Gilligan',\n  'Gilly',\n  'Gina',\n  'Ginelle',\n  'Ginevra',\n  'Ginger',\n  'Ginni',\n  'Ginnie',\n  'Ginnifer',\n  'Ginny',\n  'Giorgia',\n  'Giovanna',\n  'Gipsy',\n  'Giralda',\n  'Gisela',\n  'Gisele',\n  'Gisella',\n  'Giselle',\n  'Giuditta',\n  'Giulia',\n  'Giulietta',\n  'Giustina',\n  'Gizela',\n  'Glad',\n  'Gladi',\n  'Gladys',\n  'Gleda',\n  'Glen',\n  'Glenda',\n  'Glenine',\n  'Glenn',\n  'Glenna',\n  'Glennie',\n  'Glennis',\n  'Glori',\n  'Gloria',\n  'Gloriana',\n  'Gloriane',\n  'Glory',\n  'Glyn',\n  'Glynda',\n  'Glynis',\n  'Glynnis',\n  'Gnni',\n  'Godiva',\n  'Golda',\n  'Goldarina',\n  'Goldi',\n  'Goldia',\n  'Goldie',\n  'Goldina',\n  'Goldy',\n  'Grace',\n  'Gracia',\n  'Gracie',\n  'Grata',\n  'Gratia',\n  'Gratiana',\n  'Gray',\n  'Grayce',\n  'Grazia',\n  'Greer',\n  'Greta',\n  'Gretal',\n  'Gretchen',\n  'Grete',\n  'Gretel',\n  'Grethel',\n  'Gretna',\n  'Gretta',\n  'Grier',\n  'Griselda',\n  'Grissel',\n  'Guendolen',\n  'Guenevere',\n  'Guenna',\n  'Guglielma',\n  'Gui',\n  'Guillema',\n  'Guillemette',\n  'Guinevere',\n  'Guinna',\n  'Gunilla',\n  'Gus',\n  'Gusella',\n  'Gussi',\n  'Gussie',\n  'Gussy',\n  'Gusta',\n  'Gusti',\n  'Gustie',\n  'Gusty',\n  'Gwen',\n  'Gwendolen',\n  'Gwendolin',\n  'Gwendolyn',\n  'Gweneth',\n  'Gwenette',\n  'Gwenneth',\n  'Gwenni',\n  'Gwennie',\n  'Gwenny',\n  'Gwenora',\n  'Gwenore',\n  'Gwyn',\n  'Gwyneth',\n  'Gwynne',\n  'Gypsy',\n  'Hadria',\n  'Hailee',\n  'Haily',\n  'Haleigh',\n  'Halette',\n  'Haley',\n  'Hali',\n  'Halie',\n  'Halimeda',\n  'Halley',\n  'Halli',\n  'Hallie',\n  'Hally',\n  'Hana',\n  'Hanna',\n  'Hannah',\n  'Hanni',\n  'Hannie',\n  'Hannis',\n  'Hanny',\n  'Happy',\n  'Harlene',\n  'Harley',\n  'Harli',\n  'Harlie',\n  'Harmonia',\n  'Harmonie',\n  'Harmony',\n  'Harri',\n  'Harrie',\n  'Harriet',\n  'Harriett',\n  'Harrietta',\n  'Harriette',\n  'Harriot',\n  'Harriott',\n  'Hatti',\n  'Hattie',\n  'Hatty',\n  'Hayley',\n  'Hazel',\n  'Heath',\n  'Heather',\n  'Heda',\n  'Hedda',\n  'Heddi',\n  'Heddie',\n  'Hedi',\n  'Hedvig',\n  'Hedvige',\n  'Hedwig',\n  'Hedwiga',\n  'Hedy',\n  'Heida',\n  'Heidi',\n  'Heidie',\n  'Helaina',\n  'Helaine',\n  'Helen',\n  'Helen-elizabeth',\n  'Helena',\n  'Helene',\n  'Helenka',\n  'Helga',\n  'Helge',\n  'Helli',\n  'Heloise',\n  'Helsa',\n  'Helyn',\n  'Hendrika',\n  'Henka',\n  'Henrie',\n  'Henrieta',\n  'Henrietta',\n  'Henriette',\n  'Henryetta',\n  'Hephzibah',\n  'Hermia',\n  'Hermina',\n  'Hermine',\n  'Herminia',\n  'Hermione',\n  'Herta',\n  'Hertha',\n  'Hester',\n  'Hesther',\n  'Hestia',\n  'Hetti',\n  'Hettie',\n  'Hetty',\n  'Hilary',\n  'Hilda',\n  'Hildagard',\n  'Hildagarde',\n  'Hilde',\n  'Hildegaard',\n  'Hildegarde',\n  'Hildy',\n  'Hillary',\n  'Hilliary',\n  'Hinda',\n  'Holli',\n  'Hollie',\n  'Holly',\n  'Holly-anne',\n  'Hollyanne',\n  'Honey',\n  'Honor',\n  'Honoria',\n  'Hope',\n  'Horatia',\n  'Hortense',\n  'Hortensia',\n  'Hulda',\n  'Hyacinth',\n  'Hyacintha',\n  'Hyacinthe',\n  'Hyacinthia',\n  'Hyacinthie',\n  'Hynda',\n  'Ianthe',\n  'Ibbie',\n  'Ibby',\n  'Ida',\n  'Idalia',\n  'Idalina',\n  'Idaline',\n  'Idell',\n  'Idelle',\n  'Idette',\n  'Ileana',\n  'Ileane',\n  'Ilene',\n  'Ilise',\n  'Ilka',\n  'Illa',\n  'Ilsa',\n  'Ilse',\n  'Ilysa',\n  'Ilyse',\n  'Ilyssa',\n  'Imelda',\n  'Imogen',\n  'Imogene',\n  'Imojean',\n  'Ina',\n  'Indira',\n  'Ines',\n  'Inesita',\n  'Inessa',\n  'Inez',\n  'Inga',\n  'Ingaberg',\n  'Ingaborg',\n  'Inge',\n  'Ingeberg',\n  'Ingeborg',\n  'Inger',\n  'Ingrid',\n  'Ingunna',\n  'Inna',\n  'Iolande',\n  'Iolanthe',\n  'Iona',\n  'Iormina',\n  'Ira',\n  'Irena',\n  'Irene',\n  'Irina',\n  'Iris',\n  'Irita',\n  'Irma',\n  'Isa',\n  'Isabel',\n  'Isabelita',\n  'Isabella',\n  'Isabelle',\n  'Isadora',\n  'Isahella',\n  'Iseabal',\n  'Isidora',\n  'Isis',\n  'Isobel',\n  'Issi',\n  'Issie',\n  'Issy',\n  'Ivett',\n  'Ivette',\n  'Ivie',\n  'Ivonne',\n  'Ivory',\n  'Ivy',\n  'Izabel',\n  'Jacenta',\n  'Jacinda',\n  'Jacinta',\n  'Jacintha',\n  'Jacinthe',\n  'Jackelyn',\n  'Jacki',\n  'Jackie',\n  'Jacklin',\n  'Jacklyn',\n  'Jackquelin',\n  'Jackqueline',\n  'Jacky',\n  'Jaclin',\n  'Jaclyn',\n  'Jacquelin',\n  'Jacqueline',\n  'Jacquelyn',\n  'Jacquelynn',\n  'Jacquenetta',\n  'Jacquenette',\n  'Jacquetta',\n  'Jacquette',\n  'Jacqui',\n  'Jacquie',\n  'Jacynth',\n  'Jada',\n  'Jade',\n  'Jaime',\n  'Jaimie',\n  'Jaine',\n  'Jami',\n  'Jamie',\n  'Jamima',\n  'Jammie',\n  'Jan',\n  'Jana',\n  'Janaya',\n  'Janaye',\n  'Jandy',\n  'Jane',\n  'Janean',\n  'Janeczka',\n  'Janeen',\n  'Janel',\n  'Janela',\n  'Janella',\n  'Janelle',\n  'Janene',\n  'Janenna',\n  'Janessa',\n  'Janet',\n  'Janeta',\n  'Janetta',\n  'Janette',\n  'Janeva',\n  'Janey',\n  'Jania',\n  'Janice',\n  'Janie',\n  'Janifer',\n  'Janina',\n  'Janine',\n  'Janis',\n  'Janith',\n  'Janka',\n  'Janna',\n  'Jannel',\n  'Jannelle',\n  'Janot',\n  'Jany',\n  'Jaquelin',\n  'Jaquelyn',\n  'Jaquenetta',\n  'Jaquenette',\n  'Jaquith',\n  'Jasmin',\n  'Jasmina',\n  'Jasmine',\n  'Jayme',\n  'Jaymee',\n  'Jayne',\n  'Jaynell',\n  'Jazmin',\n  'Jean',\n  'Jeana',\n  'Jeane',\n  'Jeanelle',\n  'Jeanette',\n  'Jeanie',\n  'Jeanine',\n  'Jeanna',\n  'Jeanne',\n  'Jeannette',\n  'Jeannie',\n  'Jeannine',\n  'Jehanna',\n  'Jelene',\n  'Jemie',\n  'Jemima',\n  'Jemimah',\n  'Jemmie',\n  'Jemmy',\n  'Jen',\n  'Jena',\n  'Jenda',\n  'Jenelle',\n  'Jeni',\n  'Jenica',\n  'Jeniece',\n  'Jenifer',\n  'Jeniffer',\n  'Jenilee',\n  'Jenine',\n  'Jenn',\n  'Jenna',\n  'Jennee',\n  'Jennette',\n  'Jenni',\n  'Jennica',\n  'Jennie',\n  'Jennifer',\n  'Jennilee',\n  'Jennine',\n  'Jenny',\n  'Jeralee',\n  'Jere',\n  'Jeri',\n  'Jermaine',\n  'Jerrie',\n  'Jerrilee',\n  'Jerrilyn',\n  'Jerrine',\n  'Jerry',\n  'Jerrylee',\n  'Jess',\n  'Jessa',\n  'Jessalin',\n  'Jessalyn',\n  'Jessamine',\n  'Jessamyn',\n  'Jesse',\n  'Jesselyn',\n  'Jessi',\n  'Jessica',\n  'Jessie',\n  'Jessika',\n  'Jessy',\n  'Jewel',\n  'Jewell',\n  'Jewelle',\n  'Jill',\n  'Jillana',\n  'Jillane',\n  'Jillayne',\n  'Jilleen',\n  'Jillene',\n  'Jilli',\n  'Jillian',\n  'Jillie',\n  'Jilly',\n  'Jinny',\n  'Jo',\n  'Jo-ann',\n  'Jo-anne',\n  'Joan',\n  'Joana',\n  'Joane',\n  'Joanie',\n  'Joann',\n  'Joanna',\n  'Joanne',\n  'Joannes',\n  'Jobey',\n  'Jobi',\n  'Jobie',\n  'Jobina',\n  'Joby',\n  'Jobye',\n  'Jobyna',\n  'Jocelin',\n  'Joceline',\n  'Jocelyn',\n  'Jocelyne',\n  'Jodee',\n  'Jodi',\n  'Jodie',\n  'Jody',\n  'Joeann',\n  'Joela',\n  'Joelie',\n  'Joell',\n  'Joella',\n  'Joelle',\n  'Joellen',\n  'Joelly',\n  'Joellyn',\n  'Joelynn',\n  'Joete',\n  'Joey',\n  'Johanna',\n  'Johannah',\n  'Johna',\n  'Johnath',\n  'Johnette',\n  'Johnna',\n  'Joice',\n  'Jojo',\n  'Jolee',\n  'Joleen',\n  'Jolene',\n  'Joletta',\n  'Joli',\n  'Jolie',\n  'Joline',\n  'Joly',\n  'Jolyn',\n  'Jolynn',\n  'Jonell',\n  'Joni',\n  'Jonie',\n  'Jonis',\n  'Jordain',\n  'Jordan',\n  'Jordana',\n  'Jordanna',\n  'Jorey',\n  'Jori',\n  'Jorie',\n  'Jorrie',\n  'Jorry',\n  'Joscelin',\n  'Josee',\n  'Josefa',\n  'Josefina',\n  'Josepha',\n  'Josephina',\n  'Josephine',\n  'Josey',\n  'Josi',\n  'Josie',\n  'Josselyn',\n  'Josy',\n  'Jourdan',\n  'Joy',\n  'Joya',\n  'Joyan',\n  'Joyann',\n  'Joyce',\n  'Joycelin',\n  'Joye',\n  'Jsandye',\n  'Juana',\n  'Juanita',\n  'Judi',\n  'Judie',\n  'Judith',\n  'Juditha',\n  'Judy',\n  'Judye',\n  'Juieta',\n  'Julee',\n  'Juli',\n  'Julia',\n  'Juliana',\n  'Juliane',\n  'Juliann',\n  'Julianna',\n  'Julianne',\n  'Julie',\n  'Julienne',\n  'Juliet',\n  'Julieta',\n  'Julietta',\n  'Juliette',\n  'Julina',\n  'Juline',\n  'Julissa',\n  'Julita',\n  'June',\n  'Junette',\n  'Junia',\n  'Junie',\n  'Junina',\n  'Justina',\n  'Justine',\n  'Justinn',\n  'Jyoti',\n  'Kacey',\n  'Kacie',\n  'Kacy',\n  'Kaela',\n  'Kai',\n  'Kaia',\n  'Kaila',\n  'Kaile',\n  'Kailey',\n  'Kaitlin',\n  'Kaitlyn',\n  'Kaitlynn',\n  'Kaja',\n  'Kakalina',\n  'Kala',\n  'Kaleena',\n  'Kali',\n  'Kalie',\n  'Kalila',\n  'Kalina',\n  'Kalinda',\n  'Kalindi',\n  'Kalli',\n  'Kally',\n  'Kameko',\n  'Kamila',\n  'Kamilah',\n  'Kamillah',\n  'Kandace',\n  'Kandy',\n  'Kania',\n  'Kanya',\n  'Kara',\n  'Kara-lynn',\n  'Karalee',\n  'Karalynn',\n  'Kare',\n  'Karee',\n  'Karel',\n  'Karen',\n  'Karena',\n  'Kari',\n  'Karia',\n  'Karie',\n  'Karil',\n  'Karilynn',\n  'Karin',\n  'Karina',\n  'Karine',\n  'Kariotta',\n  'Karisa',\n  'Karissa',\n  'Karita',\n  'Karla',\n  'Karlee',\n  'Karleen',\n  'Karlen',\n  'Karlene',\n  'Karlie',\n  'Karlotta',\n  'Karlotte',\n  'Karly',\n  'Karlyn',\n  'Karmen',\n  'Karna',\n  'Karol',\n  'Karola',\n  'Karole',\n  'Karolina',\n  'Karoline',\n  'Karoly',\n  'Karon',\n  'Karrah',\n  'Karrie',\n  'Karry',\n  'Kary',\n  'Karyl',\n  'Karylin',\n  'Karyn',\n  'Kasey',\n  'Kass',\n  'Kassandra',\n  'Kassey',\n  'Kassi',\n  'Kassia',\n  'Kassie',\n  'Kat',\n  'Kata',\n  'Katalin',\n  'Kate',\n  'Katee',\n  'Katerina',\n  'Katerine',\n  'Katey',\n  'Kath',\n  'Katha',\n  'Katharina',\n  'Katharine',\n  'Katharyn',\n  'Kathe',\n  'Katherina',\n  'Katherine',\n  'Katheryn',\n  'Kathi',\n  'Kathie',\n  'Kathleen',\n  'Kathlin',\n  'Kathrine',\n  'Kathryn',\n  'Kathryne',\n  'Kathy',\n  'Kathye',\n  'Kati',\n  'Katie',\n  'Katina',\n  'Katine',\n  'Katinka',\n  'Katleen',\n  'Katlin',\n  'Katrina',\n  'Katrine',\n  'Katrinka',\n  'Katti',\n  'Kattie',\n  'Katuscha',\n  'Katusha',\n  'Katy',\n  'Katya',\n  'Kay',\n  'Kaycee',\n  'Kaye',\n  'Kayla',\n  'Kayle',\n  'Kaylee',\n  'Kayley',\n  'Kaylil',\n  'Kaylyn',\n  'Keeley',\n  'Keelia',\n  'Keely',\n  'Kelcey',\n  'Kelci',\n  'Kelcie',\n  'Kelcy',\n  'Kelila',\n  'Kellen',\n  'Kelley',\n  'Kelli',\n  'Kellia',\n  'Kellie',\n  'Kellina',\n  'Kellsie',\n  'Kelly',\n  'Kellyann',\n  'Kelsey',\n  'Kelsi',\n  'Kelsy',\n  'Kendra',\n  'Kendre',\n  'Kenna',\n  'Keri',\n  'Keriann',\n  'Kerianne',\n  'Kerri',\n  'Kerrie',\n  'Kerrill',\n  'Kerrin',\n  'Kerry',\n  'Kerstin',\n  'Kesley',\n  'Keslie',\n  'Kessia',\n  'Kessiah',\n  'Ketti',\n  'Kettie',\n  'Ketty',\n  'Kevina',\n  'Kevyn',\n  'Ki',\n  'Kiah',\n  'Kial',\n  'Kiele',\n  'Kiersten',\n  'Kikelia',\n  'Kiley',\n  'Kim',\n  'Kimberlee',\n  'Kimberley',\n  'Kimberli',\n  'Kimberly',\n  'Kimberlyn',\n  'Kimbra',\n  'Kimmi',\n  'Kimmie',\n  'Kimmy',\n  'Kinna',\n  'Kip',\n  'Kipp',\n  'Kippie',\n  'Kippy',\n  'Kira',\n  'Kirbee',\n  'Kirbie',\n  'Kirby',\n  'Kiri',\n  'Kirsten',\n  'Kirsteni',\n  'Kirsti',\n  'Kirstin',\n  'Kirstyn',\n  'Kissee',\n  'Kissiah',\n  'Kissie',\n  'Kit',\n  'Kitti',\n  'Kittie',\n  'Kitty',\n  'Kizzee',\n  'Kizzie',\n  'Klara',\n  'Klarika',\n  'Klarrisa',\n  'Konstance',\n  'Konstanze',\n  'Koo',\n  'Kora',\n  'Koral',\n  'Koralle',\n  'Kordula',\n  'Kore',\n  'Korella',\n  'Koren',\n  'Koressa',\n  'Kori',\n  'Korie',\n  'Korney',\n  'Korrie',\n  'Korry',\n  'Kris',\n  'Krissie',\n  'Krissy',\n  'Krista',\n  'Kristal',\n  'Kristan',\n  'Kriste',\n  'Kristel',\n  'Kristen',\n  'Kristi',\n  'Kristien',\n  'Kristin',\n  'Kristina',\n  'Kristine',\n  'Kristy',\n  'Kristyn',\n  'Krysta',\n  'Krystal',\n  'Krystalle',\n  'Krystle',\n  'Krystyna',\n  'Kyla',\n  'Kyle',\n  'Kylen',\n  'Kylie',\n  'Kylila',\n  'Kylynn',\n  'Kym',\n  'Kynthia',\n  'Kyrstin',\n  'Lacee',\n  'Lacey',\n  'Lacie',\n  'Lacy',\n  'Ladonna',\n  'Laetitia',\n  'Laina',\n  'Lainey',\n  'Lana',\n  'Lanae',\n  'Lane',\n  'Lanette',\n  'Laney',\n  'Lani',\n  'Lanie',\n  'Lanita',\n  'Lanna',\n  'Lanni',\n  'Lanny',\n  'Lara',\n  'Laraine',\n  'Lari',\n  'Larina',\n  'Larine',\n  'Larisa',\n  'Larissa',\n  'Lark',\n  'Laryssa',\n  'Latashia',\n  'Latia',\n  'Latisha',\n  'Latrena',\n  'Latrina',\n  'Laura',\n  'Lauraine',\n  'Laural',\n  'Lauralee',\n  'Laure',\n  'Lauree',\n  'Laureen',\n  'Laurel',\n  'Laurella',\n  'Lauren',\n  'Laurena',\n  'Laurene',\n  'Lauretta',\n  'Laurette',\n  'Lauri',\n  'Laurianne',\n  'Laurice',\n  'Laurie',\n  'Lauryn',\n  'Lavena',\n  'Laverna',\n  'Laverne',\n  'Lavina',\n  'Lavinia',\n  'Lavinie',\n  'Layla',\n  'Layne',\n  'Layney',\n  'Lea',\n  'Leah',\n  'Leandra',\n  'Leann',\n  'Leanna',\n  'Leanor',\n  'Leanora',\n  'Lebbie',\n  'Leda',\n  'Lee',\n  'Leeann',\n  'Leeanne',\n  'Leela',\n  'Leelah',\n  'Leena',\n  'Leesa',\n  'Leese',\n  'Legra',\n  'Leia',\n  'Leigh',\n  'Leigha',\n  'Leila',\n  'Leilah',\n  'Leisha',\n  'Lela',\n  'Lelah',\n  'Leland',\n  'Lelia',\n  'Lena',\n  'Lenee',\n  'Lenette',\n  'Lenka',\n  'Lenna',\n  'Lenora',\n  'Lenore',\n  'Leodora',\n  'Leoine',\n  'Leola',\n  'Leoline',\n  'Leona',\n  'Leonanie',\n  'Leone',\n  'Leonelle',\n  'Leonie',\n  'Leonora',\n  'Leonore',\n  'Leontine',\n  'Leontyne',\n  'Leora',\n  'Leshia',\n  'Lesley',\n  'Lesli',\n  'Leslie',\n  'Lesly',\n  'Lesya',\n  'Leta',\n  'Lethia',\n  'Leticia',\n  'Letisha',\n  'Letitia',\n  'Letizia',\n  'Letta',\n  'Letti',\n  'Lettie',\n  'Letty',\n  'Lexi',\n  'Lexie',\n  'Lexine',\n  'Lexis',\n  'Lexy',\n  'Leyla',\n  'Lezlie',\n  'Lia',\n  'Lian',\n  'Liana',\n  'Liane',\n  'Lianna',\n  'Lianne',\n  'Lib',\n  'Libbey',\n  'Libbi',\n  'Libbie',\n  'Libby',\n  'Licha',\n  'Lida',\n  'Lidia',\n  'Liesa',\n  'Lil',\n  'Lila',\n  'Lilah',\n  'Lilas',\n  'Lilia',\n  'Lilian',\n  'Liliane',\n  'Lilias',\n  'Lilith',\n  'Lilla',\n  'Lilli',\n  'Lillian',\n  'Lillis',\n  'Lilllie',\n  'Lilly',\n  'Lily',\n  'Lilyan',\n  'Lin',\n  'Lina',\n  'Lind',\n  'Linda',\n  'Lindi',\n  'Lindie',\n  'Lindsay',\n  'Lindsey',\n  'Lindsy',\n  'Lindy',\n  'Linea',\n  'Linell',\n  'Linet',\n  'Linette',\n  'Linn',\n  'Linnea',\n  'Linnell',\n  'Linnet',\n  'Linnie',\n  'Linzy',\n  'Lira',\n  'Lisa',\n  'Lisabeth',\n  'Lisbeth',\n  'Lise',\n  'Lisetta',\n  'Lisette',\n  'Lisha',\n  'Lishe',\n  'Lissa',\n  'Lissi',\n  'Lissie',\n  'Lissy',\n  'Lita',\n  'Liuka',\n  'Liv',\n  'Liva',\n  'Livia',\n  'Livvie',\n  'Livvy',\n  'Livvyy',\n  'Livy',\n  'Liz',\n  'Liza',\n  'Lizabeth',\n  'Lizbeth',\n  'Lizette',\n  'Lizzie',\n  'Lizzy',\n  'Loella',\n  'Lois',\n  'Loise',\n  'Lola',\n  'Loleta',\n  'Lolita',\n  'Lolly',\n  'Lona',\n  'Lonee',\n  'Loni',\n  'Lonna',\n  'Lonni',\n  'Lonnie',\n  'Lora',\n  'Lorain',\n  'Loraine',\n  'Loralee',\n  'Loralie',\n  'Loralyn',\n  'Loree',\n  'Loreen',\n  'Lorelei',\n  'Lorelle',\n  'Loren',\n  'Lorena',\n  'Lorene',\n  'Lorenza',\n  'Loretta',\n  'Lorette',\n  'Lori',\n  'Loria',\n  'Lorianna',\n  'Lorianne',\n  'Lorie',\n  'Lorilee',\n  'Lorilyn',\n  'Lorinda',\n  'Lorine',\n  'Lorita',\n  'Lorna',\n  'Lorne',\n  'Lorraine',\n  'Lorrayne',\n  'Lorri',\n  'Lorrie',\n  'Lorrin',\n  'Lorry',\n  'Lory',\n  'Lotta',\n  'Lotte',\n  'Lotti',\n  'Lottie',\n  'Lotty',\n  'Lou',\n  'Louella',\n  'Louisa',\n  'Louise',\n  'Louisette',\n  'Loutitia',\n  'Lu',\n  'Luce',\n  'Luci',\n  'Lucia',\n  'Luciana',\n  'Lucie',\n  'Lucienne',\n  'Lucila',\n  'Lucilia',\n  'Lucille',\n  'Lucina',\n  'Lucinda',\n  'Lucine',\n  'Lucita',\n  'Lucky',\n  'Lucretia',\n  'Lucy',\n  'Ludovika',\n  'Luella',\n  'Luelle',\n  'Luisa',\n  'Luise',\n  'Lula',\n  'Lulita',\n  'Lulu',\n  'Lura',\n  'Lurette',\n  'Lurleen',\n  'Lurlene',\n  'Lurline',\n  'Lusa',\n  'Luz',\n  'Lyda',\n  'Lydia',\n  'Lydie',\n  'Lyn',\n  'Lynda',\n  'Lynde',\n  'Lyndel',\n  'Lyndell',\n  'Lyndsay',\n  'Lyndsey',\n  'Lyndsie',\n  'Lyndy',\n  'Lynea',\n  'Lynelle',\n  'Lynett',\n  'Lynette',\n  'Lynn',\n  'Lynna',\n  'Lynne',\n  'Lynnea',\n  'Lynnell',\n  'Lynnelle',\n  'Lynnet',\n  'Lynnett',\n  'Lynnette',\n  'Lynsey',\n  'Lyssa',\n  'Mab',\n  'Mabel',\n  'Mabelle',\n  'Mable',\n  'Mada',\n  'Madalena',\n  'Madalyn',\n  'Maddalena',\n  'Maddi',\n  'Maddie',\n  'Maddy',\n  'Madel',\n  'Madelaine',\n  'Madeleine',\n  'Madelena',\n  'Madelene',\n  'Madelin',\n  'Madelina',\n  'Madeline',\n  'Madella',\n  'Madelle',\n  'Madelon',\n  'Madelyn',\n  'Madge',\n  'Madlen',\n  'Madlin',\n  'Madonna',\n  'Mady',\n  'Mae',\n  'Maegan',\n  'Mag',\n  'Magda',\n  'Magdaia',\n  'Magdalen',\n  'Magdalena',\n  'Magdalene',\n  'Maggee',\n  'Maggi',\n  'Maggie',\n  'Maggy',\n  'Mahala',\n  'Mahalia',\n  'Maia',\n  'Maible',\n  'Maiga',\n  'Maighdiln',\n  'Mair',\n  'Maire',\n  'Maisey',\n  'Maisie',\n  'Maitilde',\n  'Mala',\n  'Malanie',\n  'Malena',\n  'Malia',\n  'Malina',\n  'Malinda',\n  'Malinde',\n  'Malissa',\n  'Malissia',\n  'Mallissa',\n  'Mallorie',\n  'Mallory',\n  'Malorie',\n  'Malory',\n  'Malva',\n  'Malvina',\n  'Malynda',\n  'Mame',\n  'Mamie',\n  'Manda',\n  'Mandi',\n  'Mandie',\n  'Mandy',\n  'Manon',\n  'Manya',\n  'Mara',\n  'Marabel',\n  'Marcela',\n  'Marcelia',\n  'Marcella',\n  'Marcelle',\n  'Marcellina',\n  'Marcelline',\n  'Marchelle',\n  'Marci',\n  'Marcia',\n  'Marcie',\n  'Marcile',\n  'Marcille',\n  'Marcy',\n  'Mareah',\n  'Maren',\n  'Marena',\n  'Maressa',\n  'Marga',\n  'Margalit',\n  'Margalo',\n  'Margaret',\n  'Margareta',\n  'Margarete',\n  'Margaretha',\n  'Margarethe',\n  'Margaretta',\n  'Margarette',\n  'Margarita',\n  'Margaux',\n  'Marge',\n  'Margeaux',\n  'Margery',\n  'Marget',\n  'Margette',\n  'Margi',\n  'Margie',\n  'Margit',\n  'Margo',\n  'Margot',\n  'Margret',\n  'Marguerite',\n  'Margy',\n  'Mari',\n  'Maria',\n  'Mariam',\n  'Marian',\n  'Mariana',\n  'Mariann',\n  'Marianna',\n  'Marianne',\n  'Maribel',\n  'Maribelle',\n  'Maribeth',\n  'Marice',\n  'Maridel',\n  'Marie',\n  'Marie-ann',\n  'Marie-jeanne',\n  'Marieann',\n  'Mariejeanne',\n  'Mariel',\n  'Mariele',\n  'Marielle',\n  'Mariellen',\n  'Marietta',\n  'Mariette',\n  'Marigold',\n  'Marijo',\n  'Marika',\n  'Marilee',\n  'Marilin',\n  'Marillin',\n  'Marilyn',\n  'Marin',\n  'Marina',\n  'Marinna',\n  'Marion',\n  'Mariquilla',\n  'Maris',\n  'Marisa',\n  'Mariska',\n  'Marissa',\n  'Marita',\n  'Maritsa',\n  'Mariya',\n  'Marj',\n  'Marja',\n  'Marje',\n  'Marji',\n  'Marjie',\n  'Marjorie',\n  'Marjory',\n  'Marjy',\n  'Marketa',\n  'Marla',\n  'Marlane',\n  'Marleah',\n  'Marlee',\n  'Marleen',\n  'Marlena',\n  'Marlene',\n  'Marley',\n  'Marlie',\n  'Marline',\n  'Marlo',\n  'Marlyn',\n  'Marna',\n  'Marne',\n  'Marney',\n  'Marni',\n  'Marnia',\n  'Marnie',\n  'Marquita',\n  'Marrilee',\n  'Marris',\n  'Marrissa',\n  'Marsha',\n  'Marsiella',\n  'Marta',\n  'Martelle',\n  'Martguerita',\n  'Martha',\n  'Marthe',\n  'Marthena',\n  'Marti',\n  'Martica',\n  'Martie',\n  'Martina',\n  'Martita',\n  'Marty',\n  'Martynne',\n  'Mary',\n  'Marya',\n  'Maryann',\n  'Maryanna',\n  'Maryanne',\n  'Marybelle',\n  'Marybeth',\n  'Maryellen',\n  'Maryjane',\n  'Maryjo',\n  'Maryl',\n  'Marylee',\n  'Marylin',\n  'Marylinda',\n  'Marylou',\n  'Marylynne',\n  'Maryrose',\n  'Marys',\n  'Marysa',\n  'Masha',\n  'Matelda',\n  'Mathilda',\n  'Mathilde',\n  'Matilda',\n  'Matilde',\n  'Matti',\n  'Mattie',\n  'Matty',\n  'Maud',\n  'Maude',\n  'Maudie',\n  'Maura',\n  'Maure',\n  'Maureen',\n  'Maureene',\n  'Maurene',\n  'Maurine',\n  'Maurise',\n  'Maurita',\n  'Maurizia',\n  'Mavis',\n  'Mavra',\n  'Max',\n  'Maxi',\n  'Maxie',\n  'Maxine',\n  'Maxy',\n  'May',\n  'Maybelle',\n  'Maye',\n  'Mead',\n  'Meade',\n  'Meagan',\n  'Meaghan',\n  'Meara',\n  'Mechelle',\n  'Meg',\n  'Megan',\n  'Megen',\n  'Meggi',\n  'Meggie',\n  'Meggy',\n  'Meghan',\n  'Meghann',\n  'Mehetabel',\n  'Mei',\n  'Mel',\n  'Mela',\n  'Melamie',\n  'Melania',\n  'Melanie',\n  'Melantha',\n  'Melany',\n  'Melba',\n  'Melesa',\n  'Melessa',\n  'Melicent',\n  'Melina',\n  'Melinda',\n  'Melinde',\n  'Melisa',\n  'Melisande',\n  'Melisandra',\n  'Melisenda',\n  'Melisent',\n  'Melissa',\n  'Melisse',\n  'Melita',\n  'Melitta',\n  'Mella',\n  'Melli',\n  'Mellicent',\n  'Mellie',\n  'Mellisa',\n  'Mellisent',\n  'Melloney',\n  'Melly',\n  'Melodee',\n  'Melodie',\n  'Melody',\n  'Melonie',\n  'Melony',\n  'Melosa',\n  'Melva',\n  'Mercedes',\n  'Merci',\n  'Mercie',\n  'Mercy',\n  'Meredith',\n  'Meredithe',\n  'Meridel',\n  'Meridith',\n  'Meriel',\n  'Merilee',\n  'Merilyn',\n  'Meris',\n  'Merissa',\n  'Merl',\n  'Merla',\n  'Merle',\n  'Merlina',\n  'Merline',\n  'Merna',\n  'Merola',\n  'Merralee',\n  'Merridie',\n  'Merrie',\n  'Merrielle',\n  'Merrile',\n  'Merrilee',\n  'Merrili',\n  'Merrill',\n  'Merrily',\n  'Merry',\n  'Mersey',\n  'Meryl',\n  'Meta',\n  'Mia',\n  'Micaela',\n  'Michaela',\n  'Michaelina',\n  'Michaeline',\n  'Michaella',\n  'Michal',\n  'Michel',\n  'Michele',\n  'Michelina',\n  'Micheline',\n  'Michell',\n  'Michelle',\n  'Micki',\n  'Mickie',\n  'Micky',\n  'Midge',\n  'Mignon',\n  'Mignonne',\n  'Miguela',\n  'Miguelita',\n  'Mikaela',\n  'Mil',\n  'Mildred',\n  'Mildrid',\n  'Milena',\n  'Milicent',\n  'Milissent',\n  'Milka',\n  'Milli',\n  'Millicent',\n  'Millie',\n  'Millisent',\n  'Milly',\n  'Milzie',\n  'Mimi',\n  'Min',\n  'Mina',\n  'Minda',\n  'Mindy',\n  'Minerva',\n  'Minetta',\n  'Minette',\n  'Minna',\n  'Minnaminnie',\n  'Minne',\n  'Minni',\n  'Minnie',\n  'Minnnie',\n  'Minny',\n  'Minta',\n  'Miquela',\n  'Mira',\n  'Mirabel',\n  'Mirabella',\n  'Mirabelle',\n  'Miran',\n  'Miranda',\n  'Mireielle',\n  'Mireille',\n  'Mirella',\n  'Mirelle',\n  'Miriam',\n  'Mirilla',\n  'Mirna',\n  'Misha',\n  'Missie',\n  'Missy',\n  'Misti',\n  'Misty',\n  'Mitzi',\n  'Modesta',\n  'Modestia',\n  'Modestine',\n  'Modesty',\n  'Moina',\n  'Moira',\n  'Moll',\n  'Mollee',\n  'Molli',\n  'Mollie',\n  'Molly',\n  'Mommy',\n  'Mona',\n  'Monah',\n  'Monica',\n  'Monika',\n  'Monique',\n  'Mora',\n  'Moreen',\n  'Morena',\n  'Morgan',\n  'Morgana',\n  'Morganica',\n  'Morganne',\n  'Morgen',\n  'Moria',\n  'Morissa',\n  'Morna',\n  'Moselle',\n  'Moyna',\n  'Moyra',\n  'Mozelle',\n  'Muffin',\n  'Mufi',\n  'Mufinella',\n  'Muire',\n  'Mureil',\n  'Murial',\n  'Muriel',\n  'Murielle',\n  'Myra',\n  'Myrah',\n  'Myranda',\n  'Myriam',\n  'Myrilla',\n  'Myrle',\n  'Myrlene',\n  'Myrna',\n  'Myrta',\n  'Myrtia',\n  'Myrtice',\n  'Myrtie',\n  'Myrtle',\n  'Nada',\n  'Nadean',\n  'Nadeen',\n  'Nadia',\n  'Nadine',\n  'Nadiya',\n  'Nady',\n  'Nadya',\n  'Nalani',\n  'Nan',\n  'Nana',\n  'Nananne',\n  'Nance',\n  'Nancee',\n  'Nancey',\n  'Nanci',\n  'Nancie',\n  'Nancy',\n  'Nanete',\n  'Nanette',\n  'Nani',\n  'Nanice',\n  'Nanine',\n  'Nannette',\n  'Nanni',\n  'Nannie',\n  'Nanny',\n  'Nanon',\n  'Naoma',\n  'Naomi',\n  'Nara',\n  'Nari',\n  'Nariko',\n  'Nat',\n  'Nata',\n  'Natala',\n  'Natalee',\n  'Natalie',\n  'Natalina',\n  'Nataline',\n  'Natalya',\n  'Natasha',\n  'Natassia',\n  'Nathalia',\n  'Nathalie',\n  'Natividad',\n  'Natka',\n  'Natty',\n  'Neala',\n  'Neda',\n  'Nedda',\n  'Nedi',\n  'Neely',\n  'Neila',\n  'Neile',\n  'Neilla',\n  'Neille',\n  'Nelia',\n  'Nelie',\n  'Nell',\n  'Nelle',\n  'Nelli',\n  'Nellie',\n  'Nelly',\n  'Nerissa',\n  'Nerita',\n  'Nert',\n  'Nerta',\n  'Nerte',\n  'Nerti',\n  'Nertie',\n  'Nerty',\n  'Nessa',\n  'Nessi',\n  'Nessie',\n  'Nessy',\n  'Nesta',\n  'Netta',\n  'Netti',\n  'Nettie',\n  'Nettle',\n  'Netty',\n  'Nevsa',\n  'Neysa',\n  'Nichol',\n  'Nichole',\n  'Nicholle',\n  'Nicki',\n  'Nickie',\n  'Nicky',\n  'Nicol',\n  'Nicola',\n  'Nicole',\n  'Nicolea',\n  'Nicolette',\n  'Nicoli',\n  'Nicolina',\n  'Nicoline',\n  'Nicolle',\n  'Nikaniki',\n  'Nike',\n  'Niki',\n  'Nikki',\n  'Nikkie',\n  'Nikoletta',\n  'Nikolia',\n  'Nina',\n  'Ninetta',\n  'Ninette',\n  'Ninnetta',\n  'Ninnette',\n  'Ninon',\n  'Nissa',\n  'Nisse',\n  'Nissie',\n  'Nissy',\n  'Nita',\n  'Nixie',\n  'Noami',\n  'Noel',\n  'Noelani',\n  'Noell',\n  'Noella',\n  'Noelle',\n  'Noellyn',\n  'Noelyn',\n  'Noemi',\n  'Nola',\n  'Nolana',\n  'Nolie',\n  'Nollie',\n  'Nomi',\n  'Nona',\n  'Nonah',\n  'Noni',\n  'Nonie',\n  'Nonna',\n  'Nonnah',\n  'Nora',\n  'Norah',\n  'Norean',\n  'Noreen',\n  'Norene',\n  'Norina',\n  'Norine',\n  'Norma',\n  'Norri',\n  'Norrie',\n  'Norry',\n  'Novelia',\n  'Nydia',\n  'Nyssa',\n  'Octavia',\n  'Odele',\n  'Odelia',\n  'Odelinda',\n  'Odella',\n  'Odelle',\n  'Odessa',\n  'Odetta',\n  'Odette',\n  'Odilia',\n  'Odille',\n  'Ofelia',\n  'Ofella',\n  'Ofilia',\n  'Ola',\n  'Olenka',\n  'Olga',\n  'Olia',\n  'Olimpia',\n  'Olive',\n  'Olivette',\n  'Olivia',\n  'Olivie',\n  'Oliy',\n  'Ollie',\n  'Olly',\n  'Olva',\n  'Olwen',\n  'Olympe',\n  'Olympia',\n  'Olympie',\n  'Ondrea',\n  'Oneida',\n  'Onida',\n  'Oona',\n  'Opal',\n  'Opalina',\n  'Opaline',\n  'Ophelia',\n  'Ophelie',\n  'Ora',\n  'Oralee',\n  'Oralia',\n  'Oralie',\n  'Oralla',\n  'Oralle',\n  'Orel',\n  'Orelee',\n  'Orelia',\n  'Orelie',\n  'Orella',\n  'Orelle',\n  'Oriana',\n  'Orly',\n  'Orsa',\n  'Orsola',\n  'Ortensia',\n  'Otha',\n  'Othelia',\n  'Othella',\n  'Othilia',\n  'Othilie',\n  'Ottilie',\n  'Page',\n  'Paige',\n  'Paloma',\n  'Pam',\n  'Pamela',\n  'Pamelina',\n  'Pamella',\n  'Pammi',\n  'Pammie',\n  'Pammy',\n  'Pandora',\n  'Pansie',\n  'Pansy',\n  'Paola',\n  'Paolina',\n  'Papagena',\n  'Pat',\n  'Patience',\n  'Patrica',\n  'Patrice',\n  'Patricia',\n  'Patrizia',\n  'Patsy',\n  'Patti',\n  'Pattie',\n  'Patty',\n  'Paula',\n  'Paule',\n  'Pauletta',\n  'Paulette',\n  'Pauli',\n  'Paulie',\n  'Paulina',\n  'Pauline',\n  'Paulita',\n  'Pauly',\n  'Pavia',\n  'Pavla',\n  'Pearl',\n  'Pearla',\n  'Pearle',\n  'Pearline',\n  'Peg',\n  'Pegeen',\n  'Peggi',\n  'Peggie',\n  'Peggy',\n  'Pen',\n  'Penelopa',\n  'Penelope',\n  'Penni',\n  'Pennie',\n  'Penny',\n  'Pepi',\n  'Pepita',\n  'Peri',\n  'Peria',\n  'Perl',\n  'Perla',\n  'Perle',\n  'Perri',\n  'Perrine',\n  'Perry',\n  'Persis',\n  'Pet',\n  'Peta',\n  'Petra',\n  'Petrina',\n  'Petronella',\n  'Petronia',\n  'Petronilla',\n  'Petronille',\n  'Petunia',\n  'Phaedra',\n  'Phaidra',\n  'Phebe',\n  'Phedra',\n  'Phelia',\n  'Phil',\n  'Philipa',\n  'Philippa',\n  'Philippe',\n  'Philippine',\n  'Philis',\n  'Phillida',\n  'Phillie',\n  'Phillis',\n  'Philly',\n  'Philomena',\n  'Phoebe',\n  'Phylis',\n  'Phyllida',\n  'Phyllis',\n  'Phyllys',\n  'Phylys',\n  'Pia',\n  'Pier',\n  'Pierette',\n  'Pierrette',\n  'Pietra',\n  'Piper',\n  'Pippa',\n  'Pippy',\n  'Polly',\n  'Pollyanna',\n  'Pooh',\n  'Poppy',\n  'Portia',\n  'Pris',\n  'Prisca',\n  'Priscella',\n  'Priscilla',\n  'Prissie',\n  'Pru',\n  'Prudence',\n  'Prudi',\n  'Prudy',\n  'Prue',\n  'Queenie',\n  'Quentin',\n  'Querida',\n  'Quinn',\n  'Quinta',\n  'Quintana',\n  'Quintilla',\n  'Quintina',\n  'Rachael',\n  'Rachel',\n  'Rachele',\n  'Rachelle',\n  'Rae',\n  'Raeann',\n  'Raf',\n  'Rafa',\n  'Rafaela',\n  'Rafaelia',\n  'Rafaelita',\n  'Rahal',\n  'Rahel',\n  'Raina',\n  'Raine',\n  'Rakel',\n  'Ralina',\n  'Ramona',\n  'Ramonda',\n  'Rana',\n  'Randa',\n  'Randee',\n  'Randene',\n  'Randi',\n  'Randie',\n  'Randy',\n  'Ranee',\n  'Rani',\n  'Rania',\n  'Ranice',\n  'Ranique',\n  'Ranna',\n  'Raphaela',\n  'Raquel',\n  'Raquela',\n  'Rasia',\n  'Rasla',\n  'Raven',\n  'Ray',\n  'Raychel',\n  'Raye',\n  'Rayna',\n  'Raynell',\n  'Rayshell',\n  'Rea',\n  'Reba',\n  'Rebbecca',\n  'Rebe',\n  'Rebeca',\n  'Rebecca',\n  'Rebecka',\n  'Rebeka',\n  'Rebekah',\n  'Rebekkah',\n  'Ree',\n  'Reeba',\n  'Reena',\n  'Reeta',\n  'Reeva',\n  'Regan',\n  'Reggi',\n  'Reggie',\n  'Regina',\n  'Regine',\n  'Reiko',\n  'Reina',\n  'Reine',\n  'Remy',\n  'Rena',\n  'Renae',\n  'Renata',\n  'Renate',\n  'Rene',\n  'Renee',\n  'Renell',\n  'Renelle',\n  'Renie',\n  'Rennie',\n  'Reta',\n  'Retha',\n  'Revkah',\n  'Rey',\n  'Reyna',\n  'Rhea',\n  'Rheba',\n  'Rheta',\n  'Rhetta',\n  'Rhiamon',\n  'Rhianna',\n  'Rhianon',\n  'Rhoda',\n  'Rhodia',\n  'Rhodie',\n  'Rhody',\n  'Rhona',\n  'Rhonda',\n  'Riane',\n  'Riannon',\n  'Rianon',\n  'Rica',\n  'Ricca',\n  'Rici',\n  'Ricki',\n  'Rickie',\n  'Ricky',\n  'Riki',\n  'Rikki',\n  'Rina',\n  'Risa',\n  'Rita',\n  'Riva',\n  'Rivalee',\n  'Rivi',\n  'Rivkah',\n  'Rivy',\n  'Roana',\n  'Roanna',\n  'Roanne',\n  'Robbi',\n  'Robbie',\n  'Robbin',\n  'Robby',\n  'Robbyn',\n  'Robena',\n  'Robenia',\n  'Roberta',\n  'Robin',\n  'Robina',\n  'Robinet',\n  'Robinett',\n  'Robinetta',\n  'Robinette',\n  'Robinia',\n  'Roby',\n  'Robyn',\n  'Roch',\n  'Rochell',\n  'Rochella',\n  'Rochelle',\n  'Rochette',\n  'Roda',\n  'Rodi',\n  'Rodie',\n  'Rodina',\n  'Rois',\n  'Romola',\n  'Romona',\n  'Romonda',\n  'Romy',\n  'Rona',\n  'Ronalda',\n  'Ronda',\n  'Ronica',\n  'Ronna',\n  'Ronni',\n  'Ronnica',\n  'Ronnie',\n  'Ronny',\n  'Roobbie',\n  'Rora',\n  'Rori',\n  'Rorie',\n  'Rory',\n  'Ros',\n  'Rosa',\n  'Rosabel',\n  'Rosabella',\n  'Rosabelle',\n  'Rosaleen',\n  'Rosalia',\n  'Rosalie',\n  'Rosalind',\n  'Rosalinda',\n  'Rosalinde',\n  'Rosaline',\n  'Rosalyn',\n  'Rosalynd',\n  'Rosamond',\n  'Rosamund',\n  'Rosana',\n  'Rosanna',\n  'Rosanne',\n  'Rose',\n  'Roseann',\n  'Roseanna',\n  'Roseanne',\n  'Roselia',\n  'Roselin',\n  'Roseline',\n  'Rosella',\n  'Roselle',\n  'Rosemaria',\n  'Rosemarie',\n  'Rosemary',\n  'Rosemonde',\n  'Rosene',\n  'Rosetta',\n  'Rosette',\n  'Roshelle',\n  'Rosie',\n  'Rosina',\n  'Rosita',\n  'Roslyn',\n  'Rosmunda',\n  'Rosy',\n  'Row',\n  'Rowe',\n  'Rowena',\n  'Roxana',\n  'Roxane',\n  'Roxanna',\n  'Roxanne',\n  'Roxi',\n  'Roxie',\n  'Roxine',\n  'Roxy',\n  'Roz',\n  'Rozalie',\n  'Rozalin',\n  'Rozamond',\n  'Rozanna',\n  'Rozanne',\n  'Roze',\n  'Rozele',\n  'Rozella',\n  'Rozelle',\n  'Rozina',\n  'Rubetta',\n  'Rubi',\n  'Rubia',\n  'Rubie',\n  'Rubina',\n  'Ruby',\n  'Ruperta',\n  'Ruth',\n  'Ruthann',\n  'Ruthanne',\n  'Ruthe',\n  'Ruthi',\n  'Ruthie',\n  'Ruthy',\n  'Ryann',\n  'Rycca',\n  'Saba',\n  'Sabina',\n  'Sabine',\n  'Sabra',\n  'Sabrina',\n  'Sacha',\n  'Sada',\n  'Sadella',\n  'Sadie',\n  'Sadye',\n  'Saidee',\n  'Sal',\n  'Salaidh',\n  'Sallee',\n  'Salli',\n  'Sallie',\n  'Sally',\n  'Sallyann',\n  'Sallyanne',\n  'Saloma',\n  'Salome',\n  'Salomi',\n  'Sam',\n  'Samantha',\n  'Samara',\n  'Samaria',\n  'Sammy',\n  'Sande',\n  'Sandi',\n  'Sandie',\n  'Sandra',\n  'Sandy',\n  'Sandye',\n  'Sapphira',\n  'Sapphire',\n  'Sara',\n  'Sara-ann',\n  'Saraann',\n  'Sarah',\n  'Sarajane',\n  'Saree',\n  'Sarena',\n  'Sarene',\n  'Sarette',\n  'Sari',\n  'Sarina',\n  'Sarine',\n  'Sarita',\n  'Sascha',\n  'Sasha',\n  'Sashenka',\n  'Saudra',\n  'Saundra',\n  'Savina',\n  'Sayre',\n  'Scarlet',\n  'Scarlett',\n  'Sean',\n  'Seana',\n  'Seka',\n  'Sela',\n  'Selena',\n  'Selene',\n  'Selestina',\n  'Selia',\n  'Selie',\n  'Selina',\n  'Selinda',\n  'Seline',\n  'Sella',\n  'Selle',\n  'Selma',\n  'Sena',\n  'Sephira',\n  'Serena',\n  'Serene',\n  'Shae',\n  'Shaina',\n  'Shaine',\n  'Shalna',\n  'Shalne',\n  'Shana',\n  'Shanda',\n  'Shandee',\n  'Shandeigh',\n  'Shandie',\n  'Shandra',\n  'Shandy',\n  'Shane',\n  'Shani',\n  'Shanie',\n  'Shanna',\n  'Shannah',\n  'Shannen',\n  'Shannon',\n  'Shanon',\n  'Shanta',\n  'Shantee',\n  'Shara',\n  'Sharai',\n  'Shari',\n  'Sharia',\n  'Sharity',\n  'Sharl',\n  'Sharla',\n  'Sharleen',\n  'Sharlene',\n  'Sharline',\n  'Sharon',\n  'Sharona',\n  'Sharron',\n  'Sharyl',\n  'Shaun',\n  'Shauna',\n  'Shawn',\n  'Shawna',\n  'Shawnee',\n  'Shay',\n  'Shayla',\n  'Shaylah',\n  'Shaylyn',\n  'Shaylynn',\n  'Shayna',\n  'Shayne',\n  'Shea',\n  'Sheba',\n  'Sheela',\n  'Sheelagh',\n  'Sheelah',\n  'Sheena',\n  'Sheeree',\n  'Sheila',\n  'Sheila-kathryn',\n  'Sheilah',\n  'Shel',\n  'Shela',\n  'Shelagh',\n  'Shelba',\n  'Shelbi',\n  'Shelby',\n  'Shelia',\n  'Shell',\n  'Shelley',\n  'Shelli',\n  'Shellie',\n  'Shelly',\n  'Shena',\n  'Sher',\n  'Sheree',\n  'Sheri',\n  'Sherie',\n  'Sherill',\n  'Sherilyn',\n  'Sherline',\n  'Sherri',\n  'Sherrie',\n  'Sherry',\n  'Sherye',\n  'Sheryl',\n  'Shina',\n  'Shir',\n  'Shirl',\n  'Shirlee',\n  'Shirleen',\n  'Shirlene',\n  'Shirley',\n  'Shirline',\n  'Shoshana',\n  'Shoshanna',\n  'Siana',\n  'Sianna',\n  'Sib',\n  'Sibbie',\n  'Sibby',\n  'Sibeal',\n  'Sibel',\n  'Sibella',\n  'Sibelle',\n  'Sibilla',\n  'Sibley',\n  'Sibyl',\n  'Sibylla',\n  'Sibylle',\n  'Sidoney',\n  'Sidonia',\n  'Sidonnie',\n  'Sigrid',\n  'Sile',\n  'Sileas',\n  'Silva',\n  'Silvana',\n  'Silvia',\n  'Silvie',\n  'Simona',\n  'Simone',\n  'Simonette',\n  'Simonne',\n  'Sindee',\n  'Siobhan',\n  'Sioux',\n  'Siouxie',\n  'Sisely',\n  'Sisile',\n  'Sissie',\n  'Sissy',\n  'Siusan',\n  'Sofia',\n  'Sofie',\n  'Sondra',\n  'Sonia',\n  'Sonja',\n  'Sonni',\n  'Sonnie',\n  'Sonnnie',\n  'Sonny',\n  'Sonya',\n  'Sophey',\n  'Sophi',\n  'Sophia',\n  'Sophie',\n  'Sophronia',\n  'Sorcha',\n  'Sosanna',\n  'Stace',\n  'Stacee',\n  'Stacey',\n  'Staci',\n  'Stacia',\n  'Stacie',\n  'Stacy',\n  'Stafani',\n  'Star',\n  'Starla',\n  'Starlene',\n  'Starlin',\n  'Starr',\n  'Stefa',\n  'Stefania',\n  'Stefanie',\n  'Steffane',\n  'Steffi',\n  'Steffie',\n  'Stella',\n  'Stepha',\n  'Stephana',\n  'Stephani',\n  'Stephanie',\n  'Stephannie',\n  'Stephenie',\n  'Stephi',\n  'Stephie',\n  'Stephine',\n  'Stesha',\n  'Stevana',\n  'Stevena',\n  'Stoddard',\n  'Storm',\n  'Stormi',\n  'Stormie',\n  'Stormy',\n  'Sue',\n  'Suellen',\n  'Sukey',\n  'Suki',\n  'Sula',\n  'Sunny',\n  'Sunshine',\n  'Susan',\n  'Susana',\n  'Susanetta',\n  'Susann',\n  'Susanna',\n  'Susannah',\n  'Susanne',\n  'Susette',\n  'Susi',\n  'Susie',\n  'Susy',\n  'Suzann',\n  'Suzanna',\n  'Suzanne',\n  'Suzette',\n  'Suzi',\n  'Suzie',\n  'Suzy',\n  'Sybil',\n  'Sybila',\n  'Sybilla',\n  'Sybille',\n  'Sybyl',\n  'Sydel',\n  'Sydelle',\n  'Sydney',\n  'Sylvia',\n  'Tabatha',\n  'Tabbatha',\n  'Tabbi',\n  'Tabbie',\n  'Tabbitha',\n  'Tabby',\n  'Tabina',\n  'Tabitha',\n  'Taffy',\n  'Talia',\n  'Tallia',\n  'Tallie',\n  'Tallou',\n  'Tallulah',\n  'Tally',\n  'Talya',\n  'Talyah',\n  'Tamar',\n  'Tamara',\n  'Tamarah',\n  'Tamarra',\n  'Tamera',\n  'Tami',\n  'Tamiko',\n  'Tamma',\n  'Tammara',\n  'Tammi',\n  'Tammie',\n  'Tammy',\n  'Tamqrah',\n  'Tamra',\n  'Tana',\n  'Tandi',\n  'Tandie',\n  'Tandy',\n  'Tanhya',\n  'Tani',\n  'Tania',\n  'Tanitansy',\n  'Tansy',\n  'Tanya',\n  'Tara',\n  'Tarah',\n  'Tarra',\n  'Tarrah',\n  'Taryn',\n  'Tasha',\n  'Tasia',\n  'Tate',\n  'Tatiana',\n  'Tatiania',\n  'Tatum',\n  'Tawnya',\n  'Tawsha',\n  'Ted',\n  'Tedda',\n  'Teddi',\n  'Teddie',\n  'Teddy',\n  'Tedi',\n  'Tedra',\n  'Teena',\n  'Teirtza',\n  'Teodora',\n  'Tera',\n  'Teresa',\n  'Terese',\n  'Teresina',\n  'Teresita',\n  'Teressa',\n  'Teri',\n  'Teriann',\n  'Terra',\n  'Terri',\n  'Terrie',\n  'Terrijo',\n  'Terry',\n  'Terrye',\n  'Tersina',\n  'Terza',\n  'Tess',\n  'Tessa',\n  'Tessi',\n  'Tessie',\n  'Tessy',\n  'Thalia',\n  'Thea',\n  'Theadora',\n  'Theda',\n  'Thekla',\n  'Thelma',\n  'Theo',\n  'Theodora',\n  'Theodosia',\n  'Theresa',\n  'Therese',\n  'Theresina',\n  'Theresita',\n  'Theressa',\n  'Therine',\n  'Thia',\n  'Thomasa',\n  'Thomasin',\n  'Thomasina',\n  'Thomasine',\n  'Tiena',\n  'Tierney',\n  'Tiertza',\n  'Tiff',\n  'Tiffani',\n  'Tiffanie',\n  'Tiffany',\n  'Tiffi',\n  'Tiffie',\n  'Tiffy',\n  'Tilda',\n  'Tildi',\n  'Tildie',\n  'Tildy',\n  'Tillie',\n  'Tilly',\n  'Tim',\n  'Timi',\n  'Timmi',\n  'Timmie',\n  'Timmy',\n  'Timothea',\n  'Tina',\n  'Tine',\n  'Tiphani',\n  'Tiphanie',\n  'Tiphany',\n  'Tish',\n  'Tisha',\n  'Tobe',\n  'Tobey',\n  'Tobi',\n  'Toby',\n  'Tobye',\n  'Toinette',\n  'Toma',\n  'Tomasina',\n  'Tomasine',\n  'Tomi',\n  'Tommi',\n  'Tommie',\n  'Tommy',\n  'Toni',\n  'Tonia',\n  'Tonie',\n  'Tony',\n  'Tonya',\n  'Tonye',\n  'Tootsie',\n  'Torey',\n  'Tori',\n  'Torie',\n  'Torrie',\n  'Tory',\n  'Tova',\n  'Tove',\n  'Tracee',\n  'Tracey',\n  'Traci',\n  'Tracie',\n  'Tracy',\n  'Trenna',\n  'Tresa',\n  'Trescha',\n  'Tressa',\n  'Tricia',\n  'Trina',\n  'Trish',\n  'Trisha',\n  'Trista',\n  'Trix',\n  'Trixi',\n  'Trixie',\n  'Trixy',\n  'Truda',\n  'Trude',\n  'Trudey',\n  'Trudi',\n  'Trudie',\n  'Trudy',\n  'Trula',\n  'Tuesday',\n  'Twila',\n  'Twyla',\n  'Tybi',\n  'Tybie',\n  'Tyne',\n  'Ula',\n  'Ulla',\n  'Ulrica',\n  'Ulrika',\n  'Ulrikaumeko',\n  'Ulrike',\n  'Umeko',\n  'Una',\n  'Ursa',\n  'Ursala',\n  'Ursola',\n  'Ursula',\n  'Ursulina',\n  'Ursuline',\n  'Uta',\n  'Val',\n  'Valaree',\n  'Valaria',\n  'Vale',\n  'Valeda',\n  'Valencia',\n  'Valene',\n  'Valenka',\n  'Valentia',\n  'Valentina',\n  'Valentine',\n  'Valera',\n  'Valeria',\n  'Valerie',\n  'Valery',\n  'Valerye',\n  'Valida',\n  'Valina',\n  'Valli',\n  'Vallie',\n  'Vally',\n  'Valma',\n  'Valry',\n  'Van',\n  'Vanda',\n  'Vanessa',\n  'Vania',\n  'Vanna',\n  'Vanni',\n  'Vannie',\n  'Vanny',\n  'Vanya',\n  'Veda',\n  'Velma',\n  'Velvet',\n  'Venita',\n  'Venus',\n  'Vera',\n  'Veradis',\n  'Vere',\n  'Verena',\n  'Verene',\n  'Veriee',\n  'Verile',\n  'Verina',\n  'Verine',\n  'Verla',\n  'Verna',\n  'Vernice',\n  'Veronica',\n  'Veronika',\n  'Veronike',\n  'Veronique',\n  'Vevay',\n  'Vi',\n  'Vicki',\n  'Vickie',\n  'Vicky',\n  'Victoria',\n  'Vida',\n  'Viki',\n  'Vikki',\n  'Vikky',\n  'Vilhelmina',\n  'Vilma',\n  'Vin',\n  'Vina',\n  'Vinita',\n  'Vinni',\n  'Vinnie',\n  'Vinny',\n  'Viola',\n  'Violante',\n  'Viole',\n  'Violet',\n  'Violetta',\n  'Violette',\n  'Virgie',\n  'Virgina',\n  'Virginia',\n  'Virginie',\n  'Vita',\n  'Vitia',\n  'Vitoria',\n  'Vittoria',\n  'Viv',\n  'Viva',\n  'Vivi',\n  'Vivia',\n  'Vivian',\n  'Viviana',\n  'Vivianna',\n  'Vivianne',\n  'Vivie',\n  'Vivien',\n  'Viviene',\n  'Vivienne',\n  'Viviyan',\n  'Vivyan',\n  'Vivyanne',\n  'Vonni',\n  'Vonnie',\n  'Vonny',\n  'Vyky',\n  'Wallie',\n  'Wallis',\n  'Walliw',\n  'Wally',\n  'Waly',\n  'Wanda',\n  'Wandie',\n  'Wandis',\n  'Waneta',\n  'Wanids',\n  'Wenda',\n  'Wendeline',\n  'Wendi',\n  'Wendie',\n  'Wendy',\n  'Wendye',\n  'Wenona',\n  'Wenonah',\n  'Whitney',\n  'Wileen',\n  'Wilhelmina',\n  'Wilhelmine',\n  'Wilie',\n  'Willa',\n  'Willabella',\n  'Willamina',\n  'Willetta',\n  'Willette',\n  'Willi',\n  'Willie',\n  'Willow',\n  'Willy',\n  'Willyt',\n  'Wilma',\n  'Wilmette',\n  'Wilona',\n  'Wilone',\n  'Wilow',\n  'Windy',\n  'Wini',\n  'Winifred',\n  'Winna',\n  'Winnah',\n  'Winne',\n  'Winni',\n  'Winnie',\n  'Winnifred',\n  'Winny',\n  'Winona',\n  'Winonah',\n  'Wren',\n  'Wrennie',\n  'Wylma',\n  'Wynn',\n  'Wynne',\n  'Wynnie',\n  'Wynny',\n  'Xaviera',\n  'Xena',\n  'Xenia',\n  'Xylia',\n  'Xylina',\n  'Yalonda',\n  'Yasmeen',\n  'Yasmin',\n  'Yelena',\n  'Yetta',\n  'Yettie',\n  'Yetty',\n  'Yevette',\n  'Ynes',\n  'Ynez',\n  'Yoko',\n  'Yolanda',\n  'Yolande',\n  'Yolane',\n  'Yolanthe',\n  'Yoshi',\n  'Yoshiko',\n  'Yovonnda',\n  'Ysabel',\n  'Yvette',\n  'Yvonne',\n  'Zabrina',\n  'Zahara',\n  'Zandra',\n  'Zaneta',\n  'Zara',\n  'Zarah',\n  'Zaria',\n  'Zarla',\n  'Zea',\n  'Zelda',\n  'Zelma',\n  'Zena',\n  'Zenia',\n  'Zia',\n  'Zilvia',\n  'Zita',\n  'Zitella',\n  'Zoe',\n  'Zola',\n  'Zonda',\n  'Zondra',\n  'Zonnya',\n  'Zora',\n  'Zorah',\n  'Zorana',\n  'Zorina',\n  'Zorine',\n  'Zsazsa',\n  'Zulema',\n  'Zuzana',\n];\n","export default [\n  'Ackbar',\n  'Adi Gallia',\n  'Anakin Skywalker',\n  'Arvel Crynyd',\n  'Ayla Secura',\n  'Bail Prestor Organa',\n  'Barriss Offee',\n  'Ben Quadinaros',\n  'Beru Whitesun lars',\n  'Bib Fortuna',\n  'Biggs Darklighter',\n  'Boba Fett',\n  'Bossk',\n  'C-3PO',\n  'Chewbacca',\n  'Cliegg Lars',\n  'Cordé',\n  'Darth Maul',\n  'Darth Vader',\n  'Dexter Jettster',\n  'Dooku',\n  'Dormé',\n  'Dud Bolt',\n  'Eeth Koth',\n  'Finis Valorum',\n  'Gasgano',\n  'Greedo',\n  'Gregar Typho',\n  'Grievous',\n  'Han Solo',\n  'IG-88',\n  'Jabba Desilijic Tiure',\n  'Jango Fett',\n  'Jar Jar Binks',\n  'Jek Tono Porkins',\n  'Jocasta Nu',\n  'Ki-Adi-Mundi',\n  'Kit Fisto',\n  'Lama Su',\n  'Lando Calrissian',\n  'Leia Organa',\n  'Lobot',\n  'Luke Skywalker',\n  'Luminara Unduli',\n  'Mace Windu',\n  'Mas Amedda',\n  'Mon Mothma',\n  'Nien Nunb',\n  'Nute Gunray',\n  'Obi-Wan Kenobi',\n  'Owen Lars',\n  'Padmé Amidala',\n  'Palpatine',\n  'Plo Koon',\n  'Poggle the Lesser',\n  'Quarsh Panaka',\n  'Qui-Gon Jinn',\n  'R2-D2',\n  'R4-P17',\n  'R5-D4',\n  'Ratts Tyerel',\n  'Raymus Antilles',\n  'Ric Olié',\n  'Roos Tarpals',\n  'Rugor Nass',\n  'Saesee Tiin',\n  'San Hill',\n  'Sebulba',\n  'Shaak Ti',\n  'Shmi Skywalker',\n  'Sly Moore',\n  'Tarfful',\n  'Taun We',\n  'Tion Medon',\n  'Wat Tambor',\n  'Watto',\n  'Wedge Antilles',\n  'Wicket Systri Warrick',\n  'Wilhuff Tarkin',\n  'Yarael Poof',\n  'Yoda',\n  'Zam Wesell',\n];\n","interface Config {\n  min: number;\n  max: number;\n  length?: number;\n}\n\nconst defaultConfig: Config = {\n  min: 1,\n  max: 999,\n};\n\nexport class NumberDictionary {\n  public static generate(config: Partial<Config> = {}): string[] {\n    let min = config.min || defaultConfig.min;\n    let max = config.max || defaultConfig.max;\n\n    if (config.length) {\n      const length = Math.pow(10, config.length);\n      min = length / 10;\n      max = length - 1;\n      return [`${Math.floor(Math.random() * (max - min)) + min}`];\n    }\n\n    return [`${Math.floor(Math.random() * (max - min)) + min}`];\n  }\n}\n","import { type IAgentRuntime, Memory, ModelType, Provider, State } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\n\n/**\n * Formats an array of memories into a single string with each memory content text separated by a new line.\n *\n * @param {Memory[]} facts - An array of Memory objects to be formatted.\n * @returns {string} A single string containing all memory content text with new lines separating each text.\n */\n/**\n * Formats an array of Memory objects into a string, joining them with newlines.\n *\n * @param {Memory[]} facts - An array of Memory objects to format.\n * @returns {string} The formatted string with each Memory object's text joined by newlines.\n */\nfunction formatFacts(facts: Memory[]) {\n  return facts\n    .reverse()\n    .map((fact: Memory) => fact.content.text)\n    .join('\\n');\n}\n\n/**\n * Function to get key facts that the agent knows.\n * @param {IAgentRuntime} runtime - The runtime environment for the agent.\n * @param {Memory} message - The message object containing relevant information.\n * @param {State} [_state] - Optional state information.\n * @returns {Object} An object containing values, data, and text related to the key facts.\n */\nconst factsProvider: Provider = {\n  name: 'FACTS',\n  description: 'Key facts that the agent knows',\n  dynamic: true,\n  get: async (runtime: IAgentRuntime, message: Memory, _state?: State) => {\n    try {\n      // Parallelize initial data fetching operations including recentInteractions\n      const recentMessages = await runtime.getMemories({\n        tableName: 'messages',\n        roomId: message.roomId,\n        count: 10,\n        unique: false,\n      });\n\n      // join the text of the last 5 messages\n      const last5Messages = recentMessages\n        .slice(-5)\n        .map((message) => message.content.text)\n        .join('\\n');\n\n      const embedding = await runtime.useModel(ModelType.TEXT_EMBEDDING, {\n        text: last5Messages,\n      });\n\n      const [relevantFacts, recentFactsData] = await Promise.all([\n        runtime.searchMemories({\n          tableName: 'facts',\n          embedding,\n          roomId: message.roomId,\n          worldId: message.worldId,\n          count: 6,\n          query: message.content.text,\n        }),\n        runtime.searchMemories({\n          embedding,\n          query: message.content.text,\n          tableName: 'facts',\n          roomId: message.roomId,\n          entityId: message.entityId,\n          count: 6,\n        }),\n      ]);\n\n      // join the two and deduplicate\n      const allFacts = [...relevantFacts, ...recentFactsData].filter(\n        (fact, index, self) => index === self.findIndex((t) => t.id === fact.id)\n      );\n\n      if (allFacts.length === 0) {\n        return {\n          values: {\n            facts: '',\n          },\n          data: {\n            facts: allFacts,\n          },\n          text: 'No facts available.',\n        };\n      }\n\n      const formattedFacts = formatFacts(allFacts);\n\n      const text = 'Key facts that {{agentName}} knows:\\n{{formattedFacts}}'\n        .replace('{{agentName}}', runtime.character.name)\n        .replace('{{formattedFacts}}', formattedFacts);\n\n      return {\n        values: {\n          facts: formattedFacts,\n        },\n        data: {\n          facts: allFacts,\n        },\n        text,\n      };\n    } catch (error) {\n      logger.error('Error in factsProvider:', error);\n      return {\n        values: {\n          facts: '',\n        },\n        data: {\n          facts: [],\n        },\n        text: 'Error retrieving facts.',\n      };\n    }\n  },\n};\n\nexport { factsProvider };\n","import type { IAgentRuntime, Memory, Provider, State } from '@elizaos/core';\nimport { addHeader } from '@elizaos/core';\n\n/**\n * Provider for retrieving list of all data providers available for the agent to use.\n * @type { Provider }\n */\n/**\n * Object representing the providersProvider, which contains information about data providers available for the agent.\n *\n * @type {Provider}\n * @property {string} name - The name of the provider (\"PROVIDERS\").\n * @property {string} description - Description of the provider.\n * @property {Function} get - Async function that filters dynamic providers, creates formatted text for each provider, and provides data for potential use.\n * @param {IAgentRuntime} runtime - The runtime of the agent.\n * @param {Memory} _message - The memory message.\n * @returns {Object} An object containing the formatted text and data for potential programmatic use.\n */\nexport const providersProvider: Provider = {\n  name: 'PROVIDERS',\n  description: 'List of all data providers the agent can use to get additional information',\n  get: async (runtime: IAgentRuntime, _message: Memory, _state: State) => {\n    // Filter providers with dynamic: true\n    const dynamicProviders = runtime.providers.filter((provider) => provider.dynamic === true);\n\n    // Create formatted text for each provider\n    const providerDescriptions = dynamicProviders.map((provider) => {\n      return `- **${provider.name}**: ${provider.description || 'No description available'}`;\n    });\n\n    // Create the header text\n    const headerText =\n      '# Providers\\n\\nThese providers are available for the agent to select and use:';\n\n    // If no dynamic providers are found\n    if (providerDescriptions.length === 0) {\n      return {\n        text: addHeader(headerText, 'No dynamic providers are currently available.'),\n      };\n    }\n\n    // Join all provider descriptions\n    const providersText = providerDescriptions.join('\\n');\n\n    // Combine header and provider descriptions\n    const text = addHeader(headerText, providersText);\n\n    // Also provide the data for potential programmatic use\n    const data = {\n      dynamicProviders: dynamicProviders.map((provider) => ({\n        name: provider.name,\n        description: provider.description || '',\n      })),\n    };\n\n    return {\n      text,\n      data,\n    };\n  },\n};\n","import {\n  addHeader,\n  ChannelType,\n  CustomMetadata,\n  formatMessages,\n  formatPosts,\n  getEntityDetails,\n  type Entity,\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  type UUID,\n  logger,\n} from '@elizaos/core';\n\n// Move getRecentInteractions outside the provider\n/**\n * Retrieves the recent interactions between two entities in a specific context.\n *\n * @param {IAgentRuntime} runtime - The agent runtime object.\n * @param {UUID} sourceEntityId - The UUID of the source entity.\n * @param {UUID} targetEntityId - The UUID of the target entity.\n * @param {UUID} excludeRoomId - The UUID of the room to exclude from the search.\n * @returns {Promise<Memory[]>} A promise that resolves to an array of Memory objects representing recent interactions.\n */\n/**\n * Retrieves the recent interactions between two entities in different rooms excluding a specific room.\n * @param {IAgentRuntime} runtime - The agent runtime object.\n * @param {UUID} sourceEntityId - The UUID of the source entity.\n * @param {UUID} targetEntityId - The UUID of the target entity.\n * @param {UUID} excludeRoomId - The UUID of the room to exclude from the search.\n * @returns {Promise<Memory[]>} An array of Memory objects representing recent interactions between the two entities.\n */\nconst getRecentInteractions = async (\n  runtime: IAgentRuntime,\n  sourceEntityId: UUID,\n  targetEntityId: UUID,\n  excludeRoomId: UUID\n): Promise<Memory[]> => {\n  // Find all rooms where sourceEntityId and targetEntityId are participants\n  const rooms = await runtime.getRoomsForParticipants([sourceEntityId, targetEntityId]);\n\n  // Check the existing memories in the database\n  return runtime.getMemoriesByRoomIds({\n    tableName: 'messages',\n    // filter out the current room id from rooms\n    roomIds: rooms.filter((room) => room !== excludeRoomId),\n    limit: 20,\n  });\n};\n\n/**\n * A provider object that retrieves recent messages, interactions, and memories based on a given message.\n * @typedef {object} Provider\n * @property {string} name - The name of the provider (\"RECENT_MESSAGES\").\n * @property {string} description - A description of the provider's purpose (\"Recent messages, interactions and other memories\").\n * @property {number} position - The position of the provider (100).\n * @property {Function} get - Asynchronous function that retrieves recent messages, interactions, and memories.\n * @param {IAgentRuntime} runtime - The runtime context for the agent.\n * @param {Memory} message - The message to retrieve data from.\n * @returns {object} An object containing data, values, and text sections.\n */\nexport const recentMessagesProvider: Provider = {\n  name: 'RECENT_MESSAGES',\n  description: 'Recent messages, interactions and other memories',\n  position: 100,\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    try {\n      const { roomId } = message;\n      const conversationLength = runtime.getConversationLength();\n\n      // Parallelize initial data fetching operations including recentInteractions\n      const [entitiesData, room, recentMessagesData, recentInteractionsData] = await Promise.all([\n        getEntityDetails({ runtime, roomId }),\n        runtime.getRoom(roomId),\n        runtime.getMemories({\n          tableName: 'messages',\n          roomId,\n          count: conversationLength,\n          unique: false,\n        }),\n        message.entityId !== runtime.agentId\n          ? getRecentInteractions(runtime, message.entityId, runtime.agentId, roomId)\n          : Promise.resolve([]),\n      ]);\n\n      // Separate action results from regular messages\n      const actionResultMessages = recentMessagesData.filter(\n        (msg) => msg.content?.type === 'action_result' && msg.metadata?.type === 'action_result'\n      );\n\n      const dialogueMessages = recentMessagesData.filter(\n        (msg) => !(msg.content?.type === 'action_result' && msg.metadata?.type === 'action_result')\n      );\n\n      // Default to message format if room is not found or type is undefined\n      const isPostFormat = room?.type\n        ? room.type === ChannelType.FEED || room.type === ChannelType.THREAD\n        : false;\n\n      // Format recent messages and posts in parallel, using only dialogue messages\n      const [formattedRecentMessages, formattedRecentPosts] = await Promise.all([\n        formatMessages({\n          messages: dialogueMessages,\n          entities: entitiesData,\n        }),\n        formatPosts({\n          messages: dialogueMessages,\n          entities: entitiesData,\n          conversationHeader: false,\n        }),\n      ]);\n\n      // Format action results separately\n      let actionResultsText = '';\n      if (actionResultMessages.length > 0) {\n        // Group by runId using Map\n        const groupedByRun = new Map<string, Memory[]>();\n\n        for (const mem of actionResultMessages) {\n          const runId: string = String(mem.content?.runId || 'unknown');\n          if (!groupedByRun.has(runId)) {\n            groupedByRun.set(runId, []);\n          }\n          const memories = groupedByRun.get(runId);\n          if (memories) {\n            memories.push(mem);\n          }\n        }\n\n        const formattedActionResults = Array.from(groupedByRun.entries())\n          .slice(-3) // Show last 3 runs\n          .map(([runId, memories]) => {\n            const sortedMemories = memories.sort(\n              (a: Memory, b: Memory) => (a.createdAt || 0) - (b.createdAt || 0)\n            );\n\n            const thought = sortedMemories[0]?.content?.planThought || '';\n            const runText = sortedMemories\n              .map((mem: Memory) => {\n                const actionName = mem.content?.actionName || 'Unknown';\n                const status = mem.content?.actionStatus || 'unknown';\n                const planStep = mem.content?.planStep || '';\n                const text = mem.content?.text || '';\n                const error = mem.content?.error || '';\n\n                let memText = `  - ${actionName} (${status})`;\n                if (planStep) memText += ` [${planStep}]`;\n                if (error) {\n                  memText += `: Error - ${error}`;\n                } else if (text && text !== `Executed action: ${actionName}`) {\n                  memText += `: ${text}`;\n                }\n\n                return memText;\n              })\n              .join('\\n');\n\n            return `**Action Run ${runId.slice(0, 8)}**${thought ? ` - \"${thought}\"` : ''}\\n${runText}`;\n          })\n          .join('\\n\\n');\n\n        actionResultsText = formattedActionResults\n          ? addHeader('# Recent Action Executions', formattedActionResults)\n          : '';\n      }\n\n      // Create formatted text with headers\n      const recentPosts =\n        formattedRecentPosts && formattedRecentPosts.length > 0\n          ? addHeader('# Posts in Thread', formattedRecentPosts)\n          : '';\n\n      const recentMessages =\n        formattedRecentMessages && formattedRecentMessages.length > 0\n          ? addHeader('# Conversation Messages', formattedRecentMessages)\n          : '';\n\n      // If there are no messages at all, and no current message to process, return a specific message.\n      // The check for dialogueMessages.length === 0 ensures we only show this if there's truly nothing.\n      if (\n        !recentPosts &&\n        !recentMessages &&\n        dialogueMessages.length === 0 &&\n        !message.content.text\n      ) {\n        return {\n          data: {\n            recentMessages: dialogueMessages,\n            recentInteractions: [],\n            actionResults: actionResultMessages,\n          },\n          values: {\n            recentPosts: '',\n            recentMessages: '',\n            recentMessageInteractions: '',\n            recentPostInteractions: '',\n            recentInteractions: '',\n            recentActionResults: actionResultsText,\n          },\n          text: 'No recent messages available',\n        };\n      }\n\n      const metaData = message.metadata as CustomMetadata;\n      const senderName =\n        entitiesData.find((entity: Entity) => entity.id === message.entityId)?.names[0] ||\n        metaData?.entityName ||\n        'Unknown User';\n      const receivedMessageContent = message.content.text;\n\n      const hasReceivedMessage = !!receivedMessageContent?.trim();\n\n      const receivedMessageHeader = hasReceivedMessage\n        ? addHeader('# Received Message', `${senderName}: ${receivedMessageContent}`)\n        : '';\n\n      const focusHeader = hasReceivedMessage\n        ? addHeader(\n            '# Focus your response',\n            `You are replying to the above message from **${senderName}**. Keep your answer relevant to that message. Do not repeat earlier replies unless the sender asks again.`\n          )\n        : '';\n\n      // Preload all necessary entities for both types of interactions\n      const interactionEntityMap = new Map<UUID, Entity>();\n\n      // Only proceed if there are interactions to process\n      if (recentInteractionsData.length > 0) {\n        // Get unique entity IDs that aren't the runtime agent\n        const uniqueEntityIds = [\n          ...new Set(\n            recentInteractionsData\n              .map((message) => message.entityId)\n              .filter((id) => id !== runtime.agentId)\n          ),\n        ];\n\n        // Create a Set for faster lookup\n        const uniqueEntityIdSet = new Set(uniqueEntityIds);\n\n        // Add entities already fetched in entitiesData to the map\n        const entitiesDataIdSet = new Set<UUID>();\n        entitiesData.forEach((entity) => {\n          if (uniqueEntityIdSet.has(entity.id)) {\n            interactionEntityMap.set(entity.id, entity);\n            entitiesDataIdSet.add(entity.id);\n          }\n        });\n\n        // Get the remaining entities that weren't already loaded\n        // Use Set difference for efficient filtering\n        const remainingEntityIds = uniqueEntityIds.filter((id) => !entitiesDataIdSet.has(id));\n\n        // Only fetch the entities we don't already have\n        if (remainingEntityIds.length > 0) {\n          const entities = await Promise.all(\n            remainingEntityIds.map((entityId) => runtime.getEntityById(entityId))\n          );\n\n          entities.forEach((entity, index) => {\n            if (entity) {\n              interactionEntityMap.set(remainingEntityIds[index], entity);\n            }\n          });\n        }\n      }\n\n      // Format recent message interactions\n      const getRecentMessageInteractions = async (\n        recentInteractionsData: Memory[]\n      ): Promise<string> => {\n        // Format messages using the pre-fetched entities\n        const formattedInteractions = recentInteractionsData.map((message) => {\n          const isSelf = message.entityId === runtime.agentId;\n          let sender: string;\n\n          if (isSelf) {\n            sender = runtime.character.name;\n          } else {\n            sender =\n              (interactionEntityMap.get(message.entityId)?.metadata?.userName as string) ||\n              'unknown';\n          }\n\n          return `${sender}: ${message.content.text}`;\n        });\n\n        return formattedInteractions.join('\\n');\n      };\n\n      // Format recent post interactions\n      const getRecentPostInteractions = async (\n        recentInteractionsData: Memory[],\n        entities: Entity[]\n      ): Promise<string> => {\n        // Combine pre-loaded entities with any other entities\n        const combinedEntities = [...entities];\n\n        // Add entities from interactionEntityMap that aren't already in entities\n        const actorIds = new Set(entities.map((entity) => entity.id));\n        for (const [id, entity] of interactionEntityMap.entries()) {\n          if (!actorIds.has(id)) {\n            combinedEntities.push(entity);\n          }\n        }\n\n        const formattedInteractions = formatPosts({\n          messages: recentInteractionsData,\n          entities: combinedEntities,\n          conversationHeader: true,\n        });\n\n        return formattedInteractions;\n      };\n\n      // Process both types of interactions in parallel\n      const [recentMessageInteractions, recentPostInteractions] = await Promise.all([\n        getRecentMessageInteractions(recentInteractionsData),\n        getRecentPostInteractions(recentInteractionsData, entitiesData),\n      ]);\n\n      const data = {\n        recentMessages: dialogueMessages,\n        recentInteractions: recentInteractionsData,\n        actionResults: actionResultMessages,\n      };\n\n      const values = {\n        recentPosts,\n        recentMessages,\n        recentMessageInteractions,\n        recentPostInteractions,\n        recentInteractions: isPostFormat ? recentPostInteractions : recentMessageInteractions,\n        recentActionResults: actionResultsText,\n      };\n\n      // Combine all text sections\n      const text = [\n        isPostFormat ? recentPosts : recentMessages,\n        actionResultsText, // Include action results in the text output\n        // Only add received message and focus headers if there are messages or a current message to process\n        recentMessages || recentPosts || message.content.text ? receivedMessageHeader : '',\n        recentMessages || recentPosts || message.content.text ? focusHeader : '',\n      ]\n        .filter(Boolean)\n        .join('\\n\\n');\n\n      return {\n        data,\n        values,\n        text,\n      };\n    } catch (error) {\n      logger.error('Error in recentMessagesProvider:', error);\n      // Return a default state in case of error, similar to the empty message list\n      return {\n        data: {\n          recentMessages: [],\n          recentInteractions: [],\n          actionResults: [],\n        },\n        values: {\n          recentPosts: '',\n          recentMessages: '',\n          recentMessageInteractions: '',\n          recentPostInteractions: '',\n          recentInteractions: '',\n          recentActionResults: '',\n        },\n        text: 'Error retrieving recent messages.', // Or 'No recent messages available' as the test expects\n      };\n    }\n  },\n};\n","import type { Entity, IAgentRuntime, Memory, Provider, Relationship, UUID } from '@elizaos/core';\n/**\n * Formats the provided relationships based on interaction strength and returns a string.\n * @param {IAgentRuntime} runtime - The runtime object to interact with the agent.\n * @param {Relationship[]} relationships - The relationships to format.\n * @returns {string} The formatted relationships as a string.\n */\n/**\n * Asynchronously formats relationships based on their interaction strength.\n *\n * @param {IAgentRuntime} runtime The runtime instance.\n * @param {Relationship[]} relationships The relationships to be formatted.\n * @returns {Promise<string>} A formatted string of the relationships.\n */\nasync function formatRelationships(runtime: IAgentRuntime, relationships: Relationship[]) {\n  // Sort relationships by interaction strength (descending)\n  const sortedRelationships = relationships\n    .filter((rel) => rel.metadata?.interactions)\n    .sort(\n      (a, b) =>\n        ((b.metadata?.interactions as number | undefined) || 0) -\n        ((a.metadata?.interactions as number | undefined) || 0)\n    )\n    .slice(0, 30); // Get top 30\n\n  if (sortedRelationships.length === 0) {\n    return '';\n  }\n\n  // Deduplicate target entity IDs to avoid redundant fetches\n  const uniqueEntityIds = Array.from(\n    new Set(sortedRelationships.map((rel) => rel.targetEntityId as UUID))\n  );\n\n  // Fetch all required entities in a single batch operation\n  const entities = await Promise.all(uniqueEntityIds.map((id) => runtime.getEntityById(id)));\n\n  // Create a lookup map for efficient access\n  const entityMap = new Map<string, Entity | null>();\n  entities.forEach((entity, index) => {\n    if (entity) {\n      entityMap.set(uniqueEntityIds[index], entity);\n    }\n  });\n\n  const formatMetadata = (metadata: any) => {\n    return JSON.stringify(\n      Object.entries(metadata)\n        .map(\n          ([key, value]) => `${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`\n        )\n        .join('\\n')\n    );\n  };\n\n  // Format relationships using the entity map\n  const formattedRelationships = sortedRelationships\n    .map((rel) => {\n      const targetEntityId = rel.targetEntityId as UUID;\n      const entity = entityMap.get(targetEntityId);\n\n      if (!entity) {\n        return null;\n      }\n\n      const names = entity.names.join(' aka ');\n      return `${names}\\n${\n        rel.tags ? rel.tags.join(', ') : ''\n      }\\n${formatMetadata(entity.metadata)}\\n`;\n    })\n    .filter(Boolean);\n\n  return formattedRelationships.join('\\n');\n}\n\n/**\n * Provider for fetching relationships data.\n *\n * @type {Provider}\n * @property {string} name - The name of the provider (\"RELATIONSHIPS\").\n * @property {string} description - Description of the provider.\n * @property {Function} get - Asynchronous function to fetch relationships data.\n * @param {IAgentRuntime} runtime - The agent runtime object.\n * @param {Memory} message - The message object containing entity ID.\n * @returns {Promise<Object>} Object containing relationships data or error message.\n */\nconst relationshipsProvider: Provider = {\n  name: 'RELATIONSHIPS',\n  description:\n    'Relationships between {{agentName}} and other people, or between other people that {{agentName}} has observed interacting with',\n  dynamic: true,\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    // Get all relationships for the current user\n    const relationships = await runtime.getRelationships({\n      entityId: message.entityId,\n    });\n\n    if (!relationships || relationships.length === 0) {\n      return {\n        data: {\n          relationships: [],\n        },\n        values: {\n          relationships: 'No relationships found.',\n        },\n        text: 'No relationships found.',\n      };\n    }\n\n    const formattedRelationships = await formatRelationships(runtime, relationships);\n\n    if (!formattedRelationships) {\n      return {\n        data: {\n          relationships: [],\n        },\n        values: {\n          relationships: 'No relationships found.',\n        },\n        text: 'No relationships found.',\n      };\n    }\n    return {\n      data: {\n        relationships: formattedRelationships,\n      },\n      values: {\n        relationships: formattedRelationships,\n      },\n      text: `# ${runtime.character.name} has observed ${message.content.senderName || message.content.name} interacting with these people:\\n${formattedRelationships}`,\n    };\n  },\n};\n\nexport { relationshipsProvider };\n","import {\n  ChannelType,\n  createUniqueUuid,\n  logger,\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  type ProviderResult,\n  type State,\n  type UUID,\n} from '@elizaos/core';\n\n/**\n * Role provider that retrieves roles in the server based on the provided runtime, message, and state.\n * * @type { Provider }\n * @property { string } name - The name of the role provider.\n * @property { string } description - A brief description of the role provider.\n * @property { Function } get - Asynchronous function that retrieves and processes roles in the server.\n * @param { IAgentRuntime } runtime - The agent runtime object.\n * @param { Memory } message - The message memory object.\n * @param { State } state - The state object.\n * @returns {Promise<ProviderResult>} The result containing roles data, values, and text.\n */\n/**\n * A provider for retrieving and formatting the role hierarchy in a server.\n * @type {Provider}\n */\nexport const roleProvider: Provider = {\n  name: 'ROLES',\n  description: 'Roles in the server, default are OWNER, ADMIN and MEMBER (as well as NONE)',\n  get: async (runtime: IAgentRuntime, message: Memory, state: State): Promise<ProviderResult> => {\n    const room = state.data.room ?? (await runtime.getRoom(message.roomId));\n    if (!room) {\n      throw new Error('No room found');\n    }\n\n    if (room.type !== ChannelType.GROUP) {\n      return {\n        data: {\n          roles: [],\n        },\n        values: {\n          roles:\n            'No access to role information in DMs, the role provider is only available in group scenarios.',\n        },\n        text: 'No access to role information in DMs, the role provider is only available in group scenarios.',\n      };\n    }\n\n    const serverId = room.serverId;\n\n    if (!serverId) {\n      throw new Error('No server ID found');\n    }\n\n    logger.info(`Using server ID: ${serverId}`);\n\n    // Get world data instead of using cache\n    const worldId = createUniqueUuid(runtime, serverId);\n    const world = await runtime.getWorld(worldId);\n\n    if (!world || !world.metadata?.ownership?.ownerId) {\n      logger.info(\n        `No ownership data found for server ${serverId}, initializing empty role hierarchy`\n      );\n      return {\n        data: {\n          roles: [],\n        },\n        values: {\n          roles: 'No role information available for this server.',\n        },\n        text: 'No role information available for this server.',\n      };\n    }\n    // Get roles from world metadata\n    const roles = world.metadata.roles || {};\n\n    if (Object.keys(roles).length === 0) {\n      logger.info(`No roles found for server ${serverId}`);\n      return {\n        data: {\n          roles: [],\n        },\n        values: {\n          roles: 'No role information available for this server.',\n        },\n        text: 'No role information available for this server.',\n      };\n    }\n\n    logger.info(`Found ${Object.keys(roles).length} roles`);\n\n    // Group users by role\n    const owners: { name: string; username: string; names: string[] }[] = [];\n    const admins: { name: string; username: string; names: string[] }[] = [];\n    const members: { name: string; username: string; names: string[] }[] = [];\n\n    // Process roles\n    for (const entityId of Object.keys(roles) as UUID[]) {\n      const userRole = roles[entityId];\n\n      // get the user from the database\n      const user = await runtime.getEntityById(entityId);\n\n      const name = user?.metadata?.name as string;\n      const username = user?.metadata?.username as string;\n      const names = user?.names as string[];\n\n      // Skip duplicates (we store both UUID and original ID)\n      if (\n        owners.some((owner) => owner.username === username) ||\n        admins.some((admin) => admin.username === username) ||\n        members.some((member) => member.username === username)\n      ) {\n        continue;\n      }\n\n      if (!name || !username || !names) {\n        logger.warn(`User ${entityId} has no name or username, skipping`);\n        continue;\n      }\n\n      // Add to appropriate group\n      switch (userRole) {\n        case 'OWNER':\n          owners.push({ name, username, names });\n          break;\n        case 'ADMIN':\n          admins.push({ name, username, names });\n          break;\n        default:\n          members.push({ name, username, names });\n          break;\n      }\n    }\n\n    // Format the response\n    let response = '# Server Role Hierarchy\\n\\n';\n\n    if (owners.length > 0) {\n      response += '## Owners\\n';\n      owners.forEach((owner) => {\n        response += `${owner.name} (${owner.names.join(', ')})\\n`;\n      });\n      response += '\\n';\n    }\n\n    if (admins.length > 0) {\n      response += '## Administrators\\n';\n      admins.forEach((admin) => {\n        response += `${admin.name} (${admin.names.join(', ')}) (${admin.username})\\n`;\n      });\n      response += '\\n';\n    }\n\n    if (members.length > 0) {\n      response += '## Members\\n';\n      members.forEach((member) => {\n        response += `${member.name} (${member.names.join(', ')}) (${member.username})\\n`;\n      });\n    }\n\n    if (owners.length === 0 && admins.length === 0 && members.length === 0) {\n      return {\n        data: {\n          roles: [],\n        },\n        values: {\n          roles: 'No role information available for this server.',\n        },\n        text: 'No role information available for this server.',\n      };\n    }\n\n    return {\n      data: {\n        roles: response,\n      },\n      values: {\n        roles: response,\n      },\n      text: response,\n    };\n  },\n};\n\nexport default roleProvider;\n","// File: /swarm/shared/settings/provider.ts\n// Updated to use world metadata instead of cache\n\nimport {\n  ChannelType,\n  findWorldsForOwner,\n  getWorldSettings,\n  logger,\n  World,\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  type ProviderResult,\n  type Setting,\n  type State,\n  type WorldSettings,\n} from '@elizaos/core';\n\n/**\n * Formats a setting value for display, respecting privacy flags\n */\nconst formatSettingValue = (setting: Setting, isOnboarding: boolean): string => {\n  if (setting.value === null) return 'Not set';\n  if (setting.secret && !isOnboarding) return '****************';\n  return String(setting.value);\n};\n\n/**\n * Generates a status message based on the current settings state\n */\nfunction generateStatusMessage(\n  runtime: IAgentRuntime,\n  worldSettings: WorldSettings,\n  isOnboarding: boolean,\n  state?: State\n): string {\n  try {\n    // Format settings for display\n    const formattedSettings = Object.entries(worldSettings)\n      .map(([key, setting]) => {\n        if (typeof setting !== 'object' || !setting.name) return null;\n\n        const description = setting.description || '';\n        const usageDescription = setting.usageDescription || '';\n\n        // Skip settings that should be hidden based on visibility function\n        if (setting.visibleIf && !setting.visibleIf(worldSettings)) {\n          return null;\n        }\n\n        return {\n          key,\n          name: setting.name,\n          value: formatSettingValue(setting, isOnboarding),\n          description,\n          usageDescription,\n          required: setting.required,\n          configured: setting.value !== null,\n        };\n      })\n      .filter(Boolean);\n\n    // Count required settings that are not configured\n    const requiredUnconfigured = formattedSettings.filter(\n      (s) => s?.required && !s.configured\n    ).length;\n\n    // Generate appropriate message\n    if (isOnboarding) {\n      const settingsList = formattedSettings\n        .map((s) => {\n          const label = s?.required ? '(Required)' : '(Optional)';\n          return `${s?.key}: ${s?.value} ${label}\\n(${s?.name}) ${s?.usageDescription}`;\n        })\n        .join('\\n\\n');\n\n      const validKeys = `Valid setting keys: ${Object.keys(worldSettings).join(', ')}`;\n\n      const commonInstructions = `Instructions for ${runtime.character.name}:\n      - Only update settings if the user is clearly responding to a setting you are currently asking about.\n      - If the user's reply clearly maps to a setting and a valid value, you **must** call the UPDATE_SETTINGS action with the correct key and value. Do not just respond with a message saying it's updated — it must be an action.\n      - Never hallucinate settings or respond with values not listed above.\n      - Do not call UPDATE_SETTINGS just because the user has started onboarding or you think a setting needs to be configured. Only update when the user clearly provides a specific value for a setting you are currently asking about.\n      - Answer setting-related questions using only the name, description, and value from the list.`;\n\n      if (requiredUnconfigured > 0) {\n        return `# PRIORITY TASK: Onboarding with ${state?.senderName}\n\n        ${runtime.character.name} needs to help the user configure ${requiredUnconfigured} required settings:\n        \n        ${settingsList}\n        \n        ${validKeys}\n        \n        ${commonInstructions}\n        \n        - Prioritize configuring required settings before optional ones.`;\n      }\n\n      return `All required settings have been configured. Here's the current configuration:\n      \n        ${settingsList}\n        \n        ${validKeys}\n        \n        ${commonInstructions}`;\n    }\n\n    // Non-onboarding context - list all public settings with values and descriptions\n    return `## Current Configuration\\n\\n${\n      requiredUnconfigured > 0\n        ? `IMPORTANT!: ${requiredUnconfigured} required settings still need configuration. ${runtime.character.name} should get onboarded with the OWNER as soon as possible.\\n\\n`\n        : 'All required settings are configured.\\n\\n'\n    }${formattedSettings\n      .map((s) => `### ${s?.name}\\n**Value:** ${s?.value}\\n**Description:** ${s?.description}`)\n      .join('\\n\\n')}`;\n  } catch (error) {\n    logger.error(`Error generating status message: ${error}`);\n    return 'Error generating configuration status.';\n  }\n}\n\n/**\n * Creates an settings provider with the given configuration\n * Updated to use world metadata instead of cache\n */\nexport const settingsProvider: Provider = {\n  name: 'SETTINGS',\n  description: 'Current settings for the server',\n  get: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<ProviderResult> => {\n    try {\n      // Parallelize the initial database operations to improve performance\n      // These operations can run simultaneously as they don't depend on each other\n      const [room, userWorlds] = await Promise.all([\n        runtime.getRoom(message.roomId),\n        findWorldsForOwner(runtime, message.entityId),\n      ]).catch((error) => {\n        logger.error(`Error fetching initial data: ${error}`);\n        throw new Error('Failed to retrieve room or user world information');\n      });\n\n      if (!room) {\n        logger.error('No room found for settings provider');\n        return {\n          data: {\n            settings: [],\n          },\n          values: {\n            settings: 'Error: Room not found',\n          },\n          text: 'Error: Room not found',\n        };\n      }\n\n      if (!room.worldId) {\n        logger.debug('No world found for settings provider -- settings provider will be skipped');\n        return {\n          data: {\n            settings: [],\n          },\n          values: {\n            settings: 'Room does not have a worldId -- settings provider will be skipped',\n          },\n          text: 'Room does not have a worldId -- settings provider will be skipped',\n        };\n      }\n\n      const type = room.type;\n      const isOnboarding = type === ChannelType.DM;\n\n      let world: World | null | undefined = null;\n      let serverId: string | undefined = undefined;\n      let worldSettings: WorldSettings | null = null;\n\n      if (isOnboarding) {\n        // In onboarding mode, use the user's world directly\n        // Look for worlds with settings metadata, or create one if none exists\n        world = userWorlds?.find((world) => world.metadata?.settings !== undefined);\n\n        if (!world && userWorlds && userWorlds.length > 0) {\n          // If user has worlds but none have settings, use the first one and initialize settings\n          world = userWorlds[0];\n          if (!world.metadata) {\n            world.metadata = {};\n          }\n          world.metadata.settings = {};\n          await runtime.updateWorld(world);\n          logger.info(`Initialized settings for user's world ${world.id}`);\n        }\n\n        if (!world) {\n          logger.error('No world found for user during onboarding');\n          throw new Error('No server ownership found for onboarding');\n        }\n\n        serverId = world.serverId;\n\n        // Fetch world settings based on the server ID\n        try {\n          worldSettings = await getWorldSettings(runtime, serverId);\n        } catch (error) {\n          logger.error(`Error fetching world settings: ${error}`);\n          throw new Error(`Failed to retrieve settings for server ${serverId}`);\n        }\n      } else {\n        // For non-onboarding, we need to get the world associated with the room\n        try {\n          world = await runtime.getWorld(room.worldId);\n\n          if (!world) {\n            logger.error(`No world found for room ${room.worldId}`);\n            throw new Error(`No world found for room ${room.worldId}`);\n          }\n\n          serverId = world.serverId;\n\n          // Once we have the serverId, get the settings\n          if (serverId) {\n            worldSettings = await getWorldSettings(runtime, serverId);\n          } else {\n            logger.error(`No server ID found for world ${room.worldId}`);\n          }\n        } catch (error) {\n          logger.error(`Error processing world data: ${error}`);\n          throw new Error('Failed to process world information');\n        }\n      }\n\n      // If no server found after recovery attempts\n      if (!serverId) {\n        logger.info(\n          `No server ownership found for user ${message.entityId} after recovery attempt`\n        );\n        return isOnboarding\n          ? {\n              data: {\n                settings: [],\n              },\n              values: {\n                settings:\n                  \"The user doesn't appear to have ownership of any servers. They should make sure they're using the correct account.\",\n              },\n              text: \"The user doesn't appear to have ownership of any servers. They should make sure they're using the correct account.\",\n            }\n          : {\n              data: {\n                settings: [],\n              },\n              values: {\n                settings: 'Error: No configuration access',\n              },\n              text: 'Error: No configuration access',\n            };\n      }\n\n      if (!worldSettings) {\n        logger.info(`No settings state found for server ${serverId}`);\n        return isOnboarding\n          ? {\n              data: {\n                settings: [],\n              },\n              values: {\n                settings:\n                  \"The user doesn't appear to have any settings configured for this server. They should configure some settings for this server.\",\n              },\n              text: \"The user doesn't appear to have any settings configured for this server. They should configure some settings for this server.\",\n            }\n          : {\n              data: {\n                settings: [],\n              },\n              values: {\n                settings: 'Configuration has not been completed yet.',\n              },\n              text: 'Configuration has not been completed yet.',\n            };\n      }\n\n      // Generate the status message based on the settings\n      const output = generateStatusMessage(runtime, worldSettings, isOnboarding, state);\n\n      return {\n        data: {\n          settings: worldSettings,\n        },\n        values: {\n          settings: output,\n        },\n        text: output,\n      };\n    } catch (error) {\n      logger.error(`Critical error in settings provider: ${error}`);\n      return {\n        data: {\n          settings: [],\n        },\n        values: {\n          settings: 'Error retrieving configuration information. Please try again later.',\n        },\n        text: 'Error retrieving configuration information. Please try again later.',\n      };\n    }\n  },\n};\n","import type { IAgentRuntime, Memory, Provider } from '@elizaos/core';\n\n/**\n * Time provider function that retrieves the current date and time in UTC\n * for use in time-based operations or responses.\n *\n * @param _runtime - The runtime environment of the bot agent.\n * @param _message - The memory object containing message data.\n * @returns An object containing the current date and time data, human-readable date and time string,\n * and a text response with the current date and time information.\n */\n/**\n * Represents a time provider for retrieving current date and time information.\n * @type {Provider}\n */\nexport const timeProvider: Provider = {\n  name: 'TIME',\n  get: async (_runtime: IAgentRuntime, _message: Memory) => {\n    const currentDate = new Date();\n\n    // Get UTC time since bots will be communicating with users around the global\n    const options = {\n      timeZone: 'UTC',\n      dateStyle: 'full' as const,\n      timeStyle: 'long' as const,\n    };\n    const humanReadable = new Intl.DateTimeFormat('en-US', options).format(currentDate);\n    return {\n      data: {\n        time: currentDate,\n      },\n      values: {\n        time: humanReadable,\n      },\n      text: `The current date and time is ${humanReadable}. Please use this as your reference for any time-based operations or responses.`,\n    };\n  },\n};\n","import {\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  logger,\n  addHeader,\n  ChannelType,\n} from '@elizaos/core';\n\n/**\n * Provider that exposes relevant world/environment information to agents.\n * Includes details like channel list, world name, and other world metadata.\n */\nexport const worldProvider: Provider = {\n  name: 'WORLD',\n  description: 'World and environment information',\n  dynamic: true,\n\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    try {\n      logger.debug('[🌐] World provider activated for roomId:', message.roomId);\n\n      // Get the current room from the message\n      const currentRoom = await runtime.getRoom(message.roomId);\n\n      if (!currentRoom) {\n        logger.warn(`World provider: Room not found for roomId ${message.roomId}`);\n        return {\n          data: {\n            world: {\n              info: 'Unable to retrieve world information - room not found',\n            },\n          },\n          text: 'Unable to retrieve world information - room not found',\n        };\n      }\n\n      logger.debug(`[🌐] World provider: Found room \"${currentRoom.name}\" (${currentRoom.type})`);\n\n      // Get the world for the current room\n      const worldId = currentRoom.worldId;\n\n      if (!worldId) {\n        logger.warn(`World provider: World ID not found for roomId ${message.roomId}`);\n        return {\n          data: {\n            world: {\n              info: 'Unable to retrieve world information - world ID not found',\n            },\n          },\n          text: 'Unable to retrieve world information - world ID not found',\n        };\n      }\n\n      const world = await runtime.getWorld(worldId);\n\n      if (!world) {\n        logger.warn(`World provider: World not found for worldId ${worldId}`);\n        return {\n          data: {\n            world: {\n              info: 'Unable to retrieve world information - world not found',\n            },\n          },\n          text: 'Unable to retrieve world information - world not found',\n        };\n      }\n\n      logger.debug(`[🌐] World provider: Found world \"${world.name}\" (ID: ${world.id})`);\n\n      // Get all rooms in the current world\n      const worldRooms = await runtime.getRooms(worldId);\n      logger.debug(\n        `[🌐] World provider: Found ${worldRooms.length} rooms in world \"${world.name}\"`\n      );\n\n      // Get participants for the current room\n      const participants = await runtime.getParticipantsForRoom(message.roomId);\n      logger.debug(\n        `[🌐] World provider: Found ${participants.length} participants in room \"${currentRoom.name}\"`\n      );\n\n      // Format rooms by type\n      type RoomInfo = {\n        id: string;\n        name: string;\n        isCurrentChannel: boolean;\n        type?: string;\n      };\n\n      const channelsByType: Record<string, RoomInfo[]> = {\n        text: [],\n        voice: [],\n        dm: [],\n        feed: [],\n        thread: [],\n        other: [],\n      };\n\n      // Categorize rooms by type\n      for (const room of worldRooms) {\n        if (!room?.id || !room.name) {\n          logger.warn(`World provider: Room ID or name is missing for room ${room.id}`);\n          continue; // Skip if room is null or undefined\n        }\n        const roomInfo: RoomInfo = {\n          id: room.id,\n          name: room.name,\n          isCurrentChannel: room.id === message.roomId,\n        };\n\n        // Group channels by their purpose\n        if (\n          room.type === ChannelType.GROUP ||\n          room.type === ChannelType.WORLD ||\n          room.type === ChannelType.FORUM\n        ) {\n          channelsByType.text.push(roomInfo);\n        } else if (room.type === ChannelType.VOICE_GROUP || room.type === ChannelType.VOICE_DM) {\n          channelsByType.voice.push(roomInfo);\n        } else if (room.type === ChannelType.DM || room.type === ChannelType.SELF) {\n          channelsByType.dm.push(roomInfo);\n        } else if (room.type === ChannelType.FEED) {\n          channelsByType.feed.push(roomInfo);\n        } else if (room.type === ChannelType.THREAD) {\n          channelsByType.thread.push(roomInfo);\n        } else {\n          channelsByType.other.push({\n            ...roomInfo,\n            type: room.type,\n          });\n        }\n      }\n\n      // Create formatted text for display\n      const worldInfoText = [\n        `# World: ${world.name}`,\n        `Current Channel: ${currentRoom.name} (${currentRoom.type})`,\n        `Total Channels: ${worldRooms.length}`,\n        `Participants in current channel: ${participants.length}`,\n        '',\n        `Text channels: ${channelsByType.text.length}`,\n        `Voice channels: ${channelsByType.voice.length}`,\n        `DM channels: ${channelsByType.dm.length}`,\n        `Feed channels: ${channelsByType.feed.length}`,\n        `Thread channels: ${channelsByType.thread.length}`,\n        `Other channels: ${channelsByType.other.length}`,\n      ].join('\\n');\n\n      // Build the world information object with formatted data\n      const data = {\n        world: {\n          id: world.id,\n          name: world.name,\n          serverId: world.serverId,\n          metadata: world.metadata || {},\n          currentRoom: {\n            id: currentRoom.id,\n            name: currentRoom.name,\n            type: currentRoom.type,\n            channelId: currentRoom.channelId,\n            participantCount: participants.length,\n          },\n          channels: channelsByType,\n          channelStats: {\n            total: worldRooms.length,\n            text: channelsByType.text.length,\n            voice: channelsByType.voice.length,\n            dm: channelsByType.dm.length,\n            feed: channelsByType.feed.length,\n            thread: channelsByType.thread.length,\n            other: channelsByType.other.length,\n          },\n        },\n      };\n\n      const values = {\n        worldName: world.name,\n        currentChannelName: currentRoom.name,\n        worldInfo: worldInfoText,\n      };\n\n      // Use addHeader like in entitiesProvider\n      const formattedText = addHeader('# World Information', worldInfoText);\n\n      logger.debug('[🌐] World provider completed successfully');\n\n      return {\n        data,\n        values,\n        text: formattedText,\n      };\n    } catch (error) {\n      logger.error(\n        `Error in world provider: ${error instanceof Error ? error.message : String(error)}`\n      );\n      return {\n        data: {\n          world: {\n            info: 'Error retrieving world information',\n            error: error instanceof Error ? error.message : 'Unknown error',\n          },\n        },\n        text: 'Error retrieving world information',\n      };\n    }\n  },\n};\n\nexport default worldProvider;\n","// registered to runtime through plugin\n\nimport {\n  logger,\n  Service,\n  ServiceType,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type Task,\n} from '@elizaos/core';\n\n/**\n * TaskService class representing a service that schedules and executes tasks.\n * @extends Service\n * @property {NodeJS.Timeout|null} timer - Timer for executing tasks\n * @property {number} TICK_INTERVAL - Interval in milliseconds to check for tasks\n * @property {ServiceTypeName} serviceType - Service type of TASK\n * @property {string} capabilityDescription - Description of the service's capability\n * @static\n * @method start - Static method to start the TaskService\n * @method createTestTasks - Method to create test tasks\n * @method startTimer - Private method to start the timer for checking tasks\n * @method validateTasks - Private method to validate tasks\n * @method checkTasks - Private method to check tasks and execute them\n * @method executeTask - Private method to execute a task\n * @static\n * @method stop - Static method to stop the TaskService\n * @method stop - Method to stop the TaskService\n */\n/**\n * Start the TaskService with the given runtime.\n * @param {IAgentRuntime} runtime - The runtime for the TaskService.\n */\nexport class TaskService extends Service {\n  private timer: NodeJS.Timeout | null = null;\n  private readonly TICK_INTERVAL = 1000; // Check every second\n  static serviceType = ServiceType.TASK;\n  capabilityDescription = 'The agent is able to schedule and execute tasks';\n\n  /**\n   * Start the TaskService with the given runtime.\n   * @param {IAgentRuntime} runtime - The runtime for the TaskService.\n   * @returns {Promise<Service>} A promise that resolves with the TaskService instance.\n   */\n  static async start(runtime: IAgentRuntime): Promise<Service> {\n    const service = new TaskService(runtime);\n    await service.startTimer();\n    // await service.createTestTasks();\n    return service;\n  }\n\n  /**\n   * Asynchronously creates test tasks by registering task workers for repeating and one-time tasks,\n   * validates the tasks, executes the tasks, and creates the tasks if they do not already exist.\n   */\n  async createTestTasks() {\n    // Register task worker for repeating task\n    this.runtime.registerTaskWorker({\n      name: 'REPEATING_TEST_TASK',\n      validate: async (_runtime, _message, _state) => {\n        logger.debug('[Bootstrap] Validating repeating test task');\n        return true;\n      },\n      execute: async (_runtime, _options) => {\n        logger.debug('[Bootstrap] Executing repeating test task');\n      },\n    });\n\n    // Register task worker for one-time task\n    this.runtime.registerTaskWorker({\n      name: 'ONETIME_TEST_TASK',\n      validate: async (_runtime, _message, _state) => {\n        logger.debug('[Bootstrap] Validating one-time test task');\n        return true;\n      },\n      execute: async (_runtime, _options) => {\n        logger.debug('[Bootstrap] Executing one-time test task');\n      },\n    });\n\n    // check if the task exists\n    const tasks = await this.runtime.getTasksByName('REPEATING_TEST_TASK');\n\n    if (tasks.length === 0) {\n      // Create repeating task\n      await this.runtime.createTask({\n        name: 'REPEATING_TEST_TASK',\n        description: 'A test task that repeats every minute',\n        metadata: {\n          updatedAt: Date.now(), // Use timestamp instead of Date object\n          updateInterval: 1000 * 60, // 1 minute\n        },\n        tags: ['queue', 'repeat', 'test'],\n      });\n    }\n\n    // Create one-time task\n    await this.runtime.createTask({\n      name: 'ONETIME_TEST_TASK',\n      description: 'A test task that runs once',\n      metadata: {\n        updatedAt: Date.now(),\n      },\n      tags: ['queue', 'test'],\n    });\n  }\n\n  /**\n   * Starts a timer that runs a function to check tasks at a specified interval.\n   */\n  private startTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.timer = setInterval(async () => {\n      try {\n        await this.checkTasks();\n      } catch (error) {\n        logger.error('[Bootstrap] Error checking tasks:', error);\n      }\n    }, this.TICK_INTERVAL) as unknown as NodeJS.Timeout;\n  }\n\n  /**\n   * Validates an array of Task objects.\n   * Skips tasks without IDs or if no worker is found for the task.\n   * If a worker has a `validate` function, it will run the validation using the `runtime`, `Memory`, and `State` parameters.\n   * If the validation fails, the task will be skipped and the error will be logged.\n   * @param {Task[]} tasks - An array of Task objects to validate.\n   * @returns {Promise<Task[]>} - A Promise that resolves with an array of validated Task objects.\n   */\n  private async validateTasks(tasks: Task[]): Promise<Task[]> {\n    const validatedTasks: Task[] = [];\n\n    for (const task of tasks) {\n      // Skip tasks without IDs\n      if (!task.id) {\n        continue;\n      }\n\n      const worker = this.runtime.getTaskWorker(task.name);\n\n      // Skip if no worker found for task\n      if (!worker) {\n        continue;\n      }\n\n      // If worker has validate function, run validation\n      if (worker.validate) {\n        try {\n          // Pass empty message and state since validation is time-based\n          const isValid = await worker.validate(this.runtime, {} as Memory, {} as State);\n          if (!isValid) {\n            continue;\n          }\n        } catch (error) {\n          logger.error(`[Bootstrap] Error validating task ${task.name}:`, error);\n          continue;\n        }\n      }\n\n      validatedTasks.push(task);\n    }\n\n    return validatedTasks;\n  }\n\n  /**\n   * Asynchronous method that checks tasks with \"queue\" tag, validates and sorts them, then executes them based on interval and tags.\n   *\n   * @returns {Promise<void>} Promise that resolves once all tasks are checked and executed\n   */\n  private async checkTasks() {\n    try {\n      // Get all tasks with \"queue\" tag\n      const allTasks = await this.runtime.getTasks({\n        tags: ['queue'],\n      });\n\n      // validate the tasks and sort them\n      const tasks = await this.validateTasks(allTasks);\n\n      const now = Date.now();\n\n      for (const task of tasks) {\n        // First check task.updatedAt (for newer task format)\n        // Then fall back to task.metadata.updatedAt (for older tasks)\n        // Finally default to 0 if neither exists\n        let taskStartTime: number;\n\n        // if tags does not contain \"repeat\", execute immediately\n        if (!task.tags?.includes('repeat')) {\n          // does not contain repeat\n          await this.executeTask(task);\n          continue;\n        }\n\n        if (typeof task.updatedAt === 'number') {\n          taskStartTime = task.updatedAt;\n        } else if (task.metadata?.updatedAt && typeof task.metadata.updatedAt === 'number') {\n          taskStartTime = task.metadata.updatedAt;\n        } else if (task.updatedAt) {\n          taskStartTime = new Date(task.updatedAt).getTime();\n        } else {\n          taskStartTime = 0; // Default to immediate execution if no timestamp found\n        }\n\n        // Get updateInterval from metadata\n        const updateIntervalMs = task.metadata?.updateInterval ?? 0; // update immediately\n\n        // if tags does not contain \"repeat\", execute immediately\n        if (!task.tags?.includes('repeat')) {\n          await this.executeTask(task);\n          continue;\n        }\n\n        if (task.metadata?.updatedAt === task.metadata?.createdAt) {\n          if (task.tags?.includes('immediate')) {\n            logger.debug('[Bootstrap] Immediately running task', task.name);\n            await this.executeTask(task);\n            continue;\n          }\n        }\n\n        // Check if enough time has passed since last update\n        if (now - taskStartTime >= updateIntervalMs) {\n          logger.debug(\n            `[Bootstrap] Executing task ${task.name} - interval of ${updateIntervalMs}ms has elapsed`\n          );\n          await this.executeTask(task);\n        }\n      }\n    } catch (error) {\n      logger.error('[Bootstrap] Error checking tasks:', error);\n    }\n  }\n\n  /**\n   * Executes a given task asynchronously.\n   *\n   * @param {Task} task - The task to be executed.\n   */\n  private async executeTask(task: Task) {\n    try {\n      if (!task || !task.id) {\n        logger.debug(`[Bootstrap] Task not found`);\n        return;\n      }\n\n      const worker = this.runtime.getTaskWorker(task.name);\n      if (!worker) {\n        logger.debug(`[Bootstrap] No worker found for task type: ${task.name}`);\n        return;\n      }\n\n      // Handle repeating vs non-repeating tasks\n      if (task.tags?.includes('repeat')) {\n        // For repeating tasks, update the updatedAt timestamp\n        await this.runtime.updateTask(task.id, {\n          metadata: {\n            ...task.metadata,\n            updatedAt: Date.now(),\n          },\n        });\n        logger.debug(\n          `[Bootstrap] Updated repeating task ${task.name} (${task.id}) with new timestamp`\n        );\n      }\n\n      logger.debug(`[Bootstrap] Executing task ${task.name} (${task.id})`);\n      await worker.execute(this.runtime, task.metadata || {}, task);\n      //logger.debug('task.tags are', task.tags);\n\n      // Handle repeating vs non-repeating tasks\n      if (!task.tags?.includes('repeat')) {\n        // For non-repeating tasks, delete the task after execution\n        await this.runtime.deleteTask(task.id);\n        logger.debug(\n          `[Bootstrap] Deleted non-repeating task ${task.name} (${task.id}) after execution`\n        );\n      }\n    } catch (error) {\n      logger.error(`[Bootstrap] Error executing task ${task.id}:`, error);\n    }\n  }\n\n  /**\n   * Stops the TASK service in the given agent runtime.\n   *\n   * @param {IAgentRuntime} runtime - The agent runtime containing the service.\n   * @returns {Promise<void>} - A promise that resolves once the service has been stopped.\n   */\n  static async stop(runtime: IAgentRuntime) {\n    const service = runtime.getService(ServiceType.TASK);\n    if (service) {\n      await service.stop();\n    }\n  }\n\n  /**\n   * Stops the timer if it is currently running.\n   */\n\n  async stop() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n}\n"],"mappings":"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OoB,IAAAA,GAAgBC,EAAAA,IAAQH,EAAKR,MAAM,EAAA;AAC1CQ,YAAOE,GAAYE,YAAAA,IAAgBD,GAAKE,KAAK,EAAA;MAAA,MACrB,iBAAftB,KAAKD,UACdkB,IAAOA,EAAKI,YAAAA;AAGd,aAAOhB,KAAAA,GAASA,EAAAA,GAAML,KAAKF,SAAAA,GAAYmB,CAAAA,KAAAA,GAAYA,CAAAA;IAAAA,GAClD,EAAA;EAAA;AAAA;ACrEP,IAAMM,IAAwB,EAC5BzB,WAAW,KACXF,cAAc,CAAA,EAAA;AAFhB,IAKa4B,IAAwBC,CAAAA,OAAAA;AACnC,QAAM7B,KAAe,CAAA,GACd6B,MAAgBA,GAAa7B,gBAAiB2B,EAAc3B,YAAAA,GAG7DD,IAAiB,EAAA,GAClB4B,GAAAA,GACAE,IACH5B,QAAS4B,MAAgBA,GAAa5B,UAAWD,GAAaC,QAC9DD,cAAAA,GAAAA;AAGF,MAAA,CAAK6B,MAAAA,CAAiBA,GAAa7B,gBAAAA,CAAiB6B,GAAa7B,aAAaC,OAC5E,OAAA,IAAUK,MACR,yOAAA;AAMJ,SAFkC,IAAIT,EAAqBE,CAAAA,EAEhDM,SAAAA;AAAAA;AChCb,IIgGE,IChGa,CACb,SACA,UACA,WACA,WACA,QACA,SACA,QACA,SACA,QACA,SACA,WACA,WACA,WACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,QACA,SACA,SACA,QACA,QACA,SACA,YACA,YACA,SACA,YACA,WACA,WACA,WACA,WACA,UACA,UACA,SACA,QACA,OACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,YACA,UACA,WACA,WACA,YACA,YACA,WACA,YACA,UACA,WACA,WACA,SACA,MACA,SACA,SACA,UACA,UACA,QACA,SACA,QACA,QACA,WACA,SACA,UACA,WACA,UACA,UACA,WACA,QACA,SACA,WACA,QACA,QACA,SACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,SACA,QACA,SACA,SACA,WACA,WACA,WACA,WACA,QACA,UACA,WACA,SACA,UACA,SACA,UACA,UACA,WACA,aACA,aACA,UACA,UACA,SACA,UACA,SACA,aACA,eACA,SACA,SACA,cACA,SACA,WACA,QACA,SACA,aACA,eACA,SACA,UACA,WACA,WACA,UACA,QACA,SACA,WACA,QACA,OACA,QACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,SACA,UACA,SACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,QACA,SACA,QACA,UACA,WACA,UACA,QACA,aACA,SACA,UACA,SACA,WACA,WACA,SACA,UACA,QACA,QACA,UACA,SACA,SACA,WACA,QACA,UACA,WACA,UACA,UACA,UACA,UACA,WACA,WACA,QACA,UACA,UACA,WACA,UACA,WACA,UACA,SACA,SACA,QACA,SACA,SACA,UACA,UACA,SACA,UACA,UACA,YACA,UACA,UACA,WACA,UACA,UACA,WACA,UACA,UACA,UACA,WACA,UACA,SACA,UACA,SACA,SACA,WACA,SACA,OACA,UACA,UACA,WACA,WACA,WACA,OACA,QACA,QACA,QACA,UACA,SACA,aACA,OACA,QACA,OACA,UACA,UACA,YACA,YACA,YACA,WACA,YACA,YACA,aACA,aACA,cACA,WACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,YACA,UACA,UACA,UACA,YACA,aACA,cACA,QACA,cACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,UACA,WACA,YACA,YACA,YACA,YACA,aACA,YACA,WACA,SACA,SACA,QACA,QACA,SACA,UACA,SACA,UACA,aACA,UACA,OACA,aACA,QACA,cACA,cACA,cACA,WACA,WACA,YACA,YACA,aACA,aACA,aACA,aACA,WACA,aACA,YACA,aACA,aACA,QACA,gBACA,cACA,eACA,aACA,YACA,aACA,WACA,WACA,QACA,UACA,SACA,SACA,WACA,YACA,YACA,WACA,UACA,QACA,WACA,UACA,WACA,SACA,UACA,UACA,cACA,cACA,aACA,aACA,WACA,WACA,cACA,YACA,QACA,aACA,SACA,aACA,OACA,UACA,WACA,WACA,YACA,YACA,QACA,UACA,UACA,WACA,WACA,WACA,WACA,SACA,UACA,WACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,WACA,UACA,YACA,SACA,UACA,WACA,WACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,WACA,WACA,SACA,WACA,UACA,WACA,UACA,WACA,QACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,UACA,YACA,UACA,UACA,SACA,UACA,SACA,QACA,SACA,UACA,UACA,YACA,UACA,UACA,WACA,WACA,WACA,UACA,UACA,YACA,UACA,UACA,SACA,QACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,WACA,WACA,aACA,aACA,WACA,QACA,SACA,SACA,WACA,WACA,WACA,SACA,SACA,WACA,UACA,WACA,UACA,UACA,UACA,WACA,WACA,OACA,WACA,UACA,UACA,QACA,QACA,SACA,UACA,SACA,SACA,OACA,OACA,UACA,QACA,YACA,UACA,WACA,UACA,QACA,SACA,UACA,SACA,QACA,YACA,WACA,gBACA,eACA,SACA,UACA,YACA,UACA,SACA,UACA,UACA,SACA,QACA,UACA,SACA,SACA,aACA,YACA,OACA,YACA,YACA,WACA,WACA,QACA,SACA,SACA,SACA,UACA,SACA,OACA,UACA,WACA,SACA,OACA,SACA,WACA,WACA,UACA,QACA,SACA,YACA,SACA,WACA,SACA,UACA,WACA,aACA,aACA,aACA,WACA,UACA,SACA,UACA,SACA,WACA,YACA,SACA,UACA,SACA,aACA,cACA,aACA,aACA,cACA,cACA,YACA,WACA,YACA,YACA,SACA,WACA,UACA,WACA,SACA,SACA,UACA,SACA,QACA,SACA,SACA,UACA,UACA,SACA,UACA,WACA,WACA,SACA,SACA,UACA,QACA,UACA,SACA,QACA,YACA,WACA,WACA,WACA,UACA,SACA,SACA,SACA,aACA,YACA,aACA,SACA,WACA,WACA,SACA,UACA,UACA,OACA,WACA,YACA,YACA,YACA,WACA,SACA,UACA,UACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,QACA,SACA,UACA,SACA,UACA,SACA,UACA,SACA,QACA,UACA,UACA,YACA,SACA,UACA,SACA,YACA,YACA,UACA,UACA,WACA,WACA,UACA,WACA,UACA,SACA,UACA,UACA,YACA,aACA,WACA,UACA,UACA,SACA,UACA,YACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,aACA,UACA,UACA,SACA,cACA,UACA,SACA,SACA,YACA,UACA,WACA,UACA,YACA,WACA,YACA,UACA,WACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,UACA,SACA,QACA,UACA,WACA,WACA,SACA,WACA,aACA,UACA,SACA,WACA,UACA,WACA,UACA,YACA,YACA,SACA,UACA,SACA,UACA,SACA,QACA,SACA,WACA,UACA,SACA,UACA,WACA,aACA,YACA,YACA,UACA,YACA,WACA,YACA,WACA,SACA,UACA,UACA,aACA,aACA,UACA,QACA,SACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,WACA,WACA,SACA,eACA,WACA,WACA,OACA,UACA,SACA,UACA,SACA,WACA,UACA,SACA,WACA,OACA,UACA,SACA,WACA,YACA,QACA,UACA,UACA,WACA,WACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,WACA,UACA,UACA,UACA,SACA,WACA,QACA,WACA,SACA,UACA,UACA,WACA,WACA,SACA,QACA,SACA,SACA,SACA,WACA,SACA,UACA,UACA,YACA,WACA,UACA,WACA,SACA,UACA,WACA,UACA,WACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,YACA,SACA,UACA,UACA,WACA,YACA,SACA,UACA,WACA,YACA,aACA,aACA,YACA,YACA,UACA,cACA,WACA,WACA,WACA,UACA,QACA,SACA,cACA,UACA,WACA,YACA,UACA,WACA,WACA,YACA,YACA,aACA,WACA,YACA,YACA,SACA,UACA,SACA,UACA,YACA,WACA,SACA,QACA,SACA,SACA,YACA,SACA,QACA,SACA,QACA,aACA,aACA,aACA,cACA,UACA,SACA,UACA,aACA,SACA,YACA,QACA,YACA,SACA,aACA,aACA,SACA,UACA,YACA,aACA,aACA,SACA,UACA,YACA,YACA,WACA,YACA,WACA,SACA,aACA,QACA,SACA,UACA,YACA,UACA,UACA,WACA,YACA,QACA,QACA,SACA,WACA,SACA,UACA,WACA,WACA,WACA,UACA,QACA,QACA,UACA,WACA,WACA,YACA,aACA,aACA,YACA,aACA,SACA,SACA,UACA,WACA,UACA,WACA,WACA,SACA,SACA,SACA,QACA,UACA,WACA,WACA,UACA,WACA,aACA,UACA,UACA,UACA,YACA,YACA,WACA,WACA,UACA,YACA,YACA,YACA,YACA,YACA,WACA,aACA,aACA,YACA,aACA,YACA,YACA,YACA,YACA,SACA,UACA,YACA,WACA,WACA,WACA,WACA,UACA,QACA,SACA,UACA,SACA,aACA,WACA,WACA,UACA,YACA,aACA,UACA,WACA,WACA,WACA,UACA,YACA,UACA,SACA,UACA,UACA,WACA,WACA,WACA,UACA,WACA,YACA,QACA,SACA,YACA,WACA,SACA,YACA,WACA,WACA,cACA,gBACA,YACA,cACA,YACA,aACA,YACA,YACA,WACA,aACA,cACA,cACA,YACA,YACA,aACA,aACA,WACA,YACA,aACA,UACA,YACA,YACA,WACA,YACA,UACA,UACA,QACA,SACA,SACA,UACA,YACA,cACA,SACA,UACA,UACA,SACA,YACA,WACA,SACA,SACA,UACA,SACA,cACA,SACA,YACA,WACA,YACA,YACA,UACA,SACA,YACA,WACA,UACA,YACA,WACA,YACA,YACA,WACA,SACA,UACA,aACA,aACA,aACA,WACA,WACA,YACA,YACA,QACA,QACA,YACA,aACA,cACA,cACA,WACA,UACA,QACA,aACA,YACA,QACA,OACA,QACA,UACA,YACA,UACA,SACA,QACA,SACA,QACA,UACA,UACA,WACA,WACA,WACA,UACA,WACA,YACA,UACA,WACA,SACA,OACA,cACA,YACA,aACA,SACA,UACA,SACA,aACA,aACA,cACA,aACA,aACA,cACA,eACA,eACA,YACA,YACA,UACA,QACA,WACA,aACA,aACA,SACA,WACA,YACA,WACA,YACA,YACA,UACA,SACA,UACA,WACA,SACA,UACA,WACA,WACA,UACA,WACA,WACA,SACA,QACA,SACA,WACA,UACA,UACA,WACA,WACA,UACA,WACA,WACA,SACA,WACA,YACA,YACA,UACA,SACA,WACA,UACA,SACA,aACA,UACA,WACA,WACA,YACA,SACA,WACA,QACA,WACA,WACA,YACA,aACA,YACA,YACA,QACA,QACA,WACA,UACA,UACA,aACA,WACA,WACA,UACA,WACA,WACA,YACA,YACA,cACA,UACA,UACA,WACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,SACA,UACA,UACA,SACA,WACA,WACA,WACA,UACA,SACA,SACA,SACA,QACA,QACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,WACA,UACA,WACA,UACA,QACA,UACA,WACA,WACA,QACA,SACA,UACA,UACA,WACA,WACA,YACA,YACA,UACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,YACA,YACA,WACA,UACA,UACA,QACA,QACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,QACA,SACA,UACA,SACA,WACA,WACA,WACA,YACA,SACA,YACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,QACA,SACA,SACA,SACA,SACA,MACA,SACA,SACA,UACA,UACA,OACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,UACA,WACA,SACA,QACA,SACA,SACA,OACA,UACA,WACA,UACA,SACA,WACA,SACA,UACA,UACA,SACA,WACA,OACA,QACA,WACA,WACA,SACA,UACA,WACA,WACA,QACA,SACA,SACA,UACA,WACA,WACA,WACA,YACA,aACA,WACA,WACA,YACA,YACA,QACA,QACA,UACA,UACA,SACA,SACA,UACA,SACA,QACA,SACA,UACA,UACA,aACA,WACA,WACA,UACA,QACA,SACA,QACA,SACA,UACA,WACA,SACA,YACA,WACA,WACA,UACA,MACA,WACA,QACA,SACA,WACA,SACA,eACA,cACA,SACA,UACA,UACA,WACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,OACA,SACA,UACA,QACA,QACA,SACA,QACA,OACA,QACA,UACA,SACA,UACA,SACA,WACA,YACA,aACA,YACA,WACA,UACA,YACA,aACA,QACA,WACA,WACA,WACA,SACA,UACA,YACA,SACA,cACA,SACA,UACA,SACA,QACA,WACA,WACA,WACA,YACA,aACA,QACA,UACA,WACA,WACA,WACA,UACA,UACA,WACA,WACA,SACA,QACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,YACA,YACA,WACA,YACA,YACA,YACA,WACA,UACA,SACA,UACA,UACA,SACA,WACA,UACA,QACA,QACA,OACA,QACA,SACA,UACA,SACA,OACA,UACA,SACA,SACA,OACA,SACA,UACA,WACA,SACA,SACA,UACA,YACA,SACA,SACA,UACA,SACA,UACA,YACA,UACA,WACA,YACA,SACA,UACA,SACA,QACA,SACA,SACA,SACA,UACA,UACA,QACA,SACA,YACA,QACA,SACA,UACA,YACA,UACA,UACA,OACA,QACA,UACA,SACA,OACA,QACA,SACA,QACA,OACA,QACA,WACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,SACA,QACA,UACA,OACA,SACA,UACA,SACA,UACA,SACA,UACA,UACA,aACA,UACA,UACA,SACA,SACA,UACA,WACA,aACA,aACA,WACA,YACA,YACA,WACA,SACA,SACA,SACA,SACA,WACA,YACA,YACA,SACA,WACA,WACA,YACA,QACA,YACA,YACA,UACA,QACA,UACA,WACA,SACA,YACA,aACA,cACA,SACA,UACA,UACA,SACA,SACA,YACA,aACA,QACA,QACA,QACA,YACA,QACA,SACA,UACA,WACA,QACA,SACA,WACA,QACA,SACA,UACA,UACA,QACA,UACA,UACA,UACA,UACA,WACA,SACA,QACA,WACA,QACA,SACA,SACA,QACA,SACA,YACA,WACA,QACA,QACA,UACA,UACA,UACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,MACA,OACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,SACA,UACA,SACA,UACA,UACA,WACA,SACA,SACA,UACA,WACA,QACA,WACA,YACA,WACA,YACA,aACA,YACA,SACA,QACA,SACA,QACA,SACA,WACA,SACA,UACA,YACA,QACA,UACA,cACA,UACA,aACA,WACA,WACA,QACA,QACA,SACA,SACA,UACA,UACA,SACA,QACA,SACA,SACA,UACA,QACA,cACA,cACA,UACA,WACA,WACA,QACA,YACA,WACA,aACA,SACA,QACA,QACA,WACA,QACA,aACA,QACA,SACA,QACA,QACA,SACA,UACA,UACA,WACA,WACA,SACA,UACA,YACA,cACA,SACA,WACA,WACA,YACA,YACA,WACA,SACA,QACA,QACA,SACA,QACA,UACA,WACA,WACA,UACA,QACA,WACA,UACA,YACA,YACA,OACA,WACA,aACA,aACA,cACA,cACA,UACA,UACA,OACA,WACA,WACA,WACA,UACA,QACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,aACA,OACA,SACA,SACA,UACA,OACA,aACA,WACA,UACA,SACA,YACA,SACA,SACA,UACA,SACA,SACA,QACA,SACA,UACA,UACA,SACA,UACA,WACA,QACA,UACA,YACA,YACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,UACA,SACA,SACA,UACA,YACA,UACA,WACA,YACA,UACA,WACA,YACA,WACA,UACA,WACA,UACA,UACA,WACA,WACA,cACA,cACA,QACA,YACA,YACA,cACA,SACA,OACA,SACA,UACA,UACA,WACA,YACA,QACA,UACA,SACA,UACA,WACA,QACA,SACA,UACA,YACA,YACA,SACA,aACA,OACA,QACA,SACA,YACA,SACA,YACA,YACA,aACA,aACA,YACA,YACA,SACA,UACA,WACA,UACA,WACA,YACA,UACA,UACA,WACA,UACA,SACA,UACA,WACA,UACA,QACA,QACA,YACA,WACA,aACA,YACA,aACA,aACA,aACA,YACA,SACA,WACA,UACA,UACA,WACA,UACA,UACA,QACA,SACA,UACA,WACA,UACA,YACA,aACA,cACA,cACA,SACA,UACA,UACA,YACA,UACA,UACA,cACA,UACA,UACA,SACA,UACA,SACA,QACA,SACA,WACA,YACA,YACA,aACA,aACA,cACA,WACA,QACA,OACA,QACA,QACA,QACA,UACA,WACA,UACA,YACA,SACA,SACA,aACA,OACA,QACA,SACA,SACA,SACA,WACA,WACA,UACA,SACA,QACA,QACA,UACA,aACA,WACA,SACA,SACA,SACA,UACA,YACA,SACA,YACA,YACA,UACA,cACA,cACA,YACA,YACA,aACA,aACA,WACA,aACA,cACA,cACA,WACA,YACA,YACA,WACA,aACA,SACA,cACA,QACA,YACA,YACA,aACA,WACA,YACA,WACA,SACA,UACA,YACA,SACA,QACA,SACA,SACA,UACA,WACA,YACA,YACA,aACA,SACA,YACA,SACA,WACA,UACA,QACA,YACA,YACA,cACA,cACA,SACA,aACA,QACA,UACA,SACA,WACA,UACA,YACA,SACA,QACA,WACA,WACA,UACA,SACA,UACA,YACA,SACA,WACA,YACA,SACA,WACA,UACA,UACA,WACA,WACA,YACA,UACA,aACA,YACA,UACA,QACA,SACA,UACA,SACA,QACA,UACA,WACA,SACA,UACA,WACA,WACA,SACA,UACA,YACA,YACA,SACA,QACA,UACA,UACA,WACA,QACA,UACA,SACA,aACA,SACA,UACA,UACA,WACA,SACA,SACA,UACA,UACA,SACA,UACA,YACA,QACA,UACA,UACA,SACA,SACA,UACA,YACA,SACA,UACA,WACA,UACA,UACA,SACA,YACA,WACA,aACA,aACA,UACA,aACA,OACA,YACA,eACA,aACA,UACA,WACA,OACA,WACA,SACA,UACA,SACA,SACA,SACA,UACA,SACA,QACA,aACA,aACA,aACA,WACA,YACA,YACA,UACA,WACA,UACA,WACA,WACA,QACA,WACA,UACA,SACA,UACA,UACA,SACA,WACA,WACA,SACA,QACA,SACA,YACA,UACA,SACA,UACA,SACA,QACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,WACA,UACA,SACA,UACA,YACA,YACA,WACA,SACA,UACA,WACA,YACA,aACA,aACA,WACA,YACA,SACA,UACA,SACA,UACA,SACA,SACA,WACA,QACA,SACA,SACA,UACA,QACA,UACA,WACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,WACA,SACA,mBACA,UACA,UACA,WACA,SACA,SACA,SACA,WACA,SACA,SACA,YACA,SACA,UACA,YACA,aACA,aACA,aACA,aACA,UACA,WACA,WACA,YACA,YACA,SACA,UACA,UACA,WACA,UACA,SACA,UACA,SACA,UACA,SACA,aACA,cACA,SACA,cACA,cACA,SACA,WACA,YACA,SACA,SACA,UACA,SACA,cACA,aACA,SACA,SACA,WACA,QACA,WACA,YACA,aACA,SACA,YACA,aACA,aACA,cACA,cACA,SACA,UACA,SACA,QACA,OACA,UACA,WACA,WACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,QACA,QACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACA,OACA,UACA,QACA,WACA,UACA,QACA,QACA,YACA,YACA,QACA,YACA,YACA,SACA,UACA,WACA,QACA,WACA,YACA,QACA,WACA,OACA,SACA,SACA,SACA,QACA,SACA,QACA,OACA,UACA,aACA,YACA,YACA,WACA,YACA,WACA,WACA,QACA,UACA,QACA,SACA,QACA,SACA,UACA,QACA,UACA,SACA,OACA,UACA,WACA,WACA,WACA,YACA,YACA,YACA,SACA,UACA,WACA,WACA,cACA,eACA,SACA,UACA,UACA,aACA,cACA,aACA,cACA,eACA,eACA,aACA,aACA,UACA,WACA,WACA,QACA,QACA,SACA,UACA,SACA,QACA,SACA,UACA,UACA,OACA,QACA,UACA,UACA,SACA,QACA,UACA,YACA,UACA,SACA,UACA,WACA,WACA,UACA,WACA,WACA,SACA,UACA,WACA,WACA,UACA,SACA,SACA,UACA,SACA,WACA,UACA,UACA,SACA,UACA,SACA,SACA,UACA,YACA,SACA,QACA,YACA,YACA,cACA,cACA,WACA,UACA,WACA,WACA,SACA,UACA,SACA,WACA,UACA,QACA,SACA,SACA,YACA,YACA,UACA,WACA,UACA,UACA,aACA,WACA,YACA,WACA,UACA,SACA,UACA,WACA,UACA,SACA,OACA,QACA,SACA,WACA,QACA,UACA,WACA,WACA,YACA,WACA,UACA,QACA,SACA,UACA,YACA,SACA,WACA,UACA,YACA,YACA,WACA,SACA,WACA,QACA,QACA,YACA,UACA,YACA,YACA,WACA,SACA,YACA,QACA,SACA,YACA,YACA,aACA,YACA,SACA,YACA,SACA,WACA,UACA,WACA,SACA,SACA,UACA,WACA,QACA,WACA,WACA,YACA,WACA,WACA,SACA,WACA,UACA,SACA,SACA,MACA,UACA,WACA,QACA,SACA,SACA,UACA,SACA,UACA,UACA,WACA,SACA,QACA,SACA,UACA,QACA,SACA,UACA,WACA,YACA,WACA,YACA,SACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,UACA,UACA,WACA,UACA,WACA,WACA,SACA,QACA,WACA,YACA,SACA,WACA,YACA,UACA,SACA,QACA,SACA,UACA,UACA,WACA,QACA,SACA,UACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,WACA,UACA,WACA,YACA,SACA,QACA,SACA,UACA,SACA,YACA,SACA,UACA,YACA,WACA,aACA,aACA,SACA,QACA,SACA,YACA,QACA,WACA,OACA,QACA,SACA,UACA,SACA,YACA,QACA,WACA,SACA,WACA,QACA,SACA,UACA,WACA,QACA,SACA,UACA,SACA,QACA,SACA,WACA,WACA,WACA,YACA,YACA,SACA,YACA,UACA,WACA,YACA,YACA,UACA,UACA,WACA,UACA,QACA,WACA,SACA,SACA,UACA,WACA,WACA,WACA,SACA,SACA,SACA,QACA,SACA,OACA,QACA,SACA,SACA,UACA,WACA,WACA,YACA,QACA,YACA,QACA,WACA,QACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,UACA,UACA,WACA,YACA,WACA,SACA,SACA,SACA,QACA,aACA,WACA,YACA,QACA,SACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,YACA,SACA,UACA,UACA,YACA,UACA,WACA,UACA,SACA,UACA,WACA,UACA,WACA,UACA,YACA,YACA,SACA,UACA,UACA,SACA,SACA,UACA,UACA,YACA,YACA,UACA,SACA,UACA,UACA,SACA,QACA,SACA,WACA,SACA,SACA,QACA,aACA,UACA,SACA,UACA,UACA,OACA,QACA,WACA,QACA,SACA,YACA,YACA,SACA,QACA,SACA,aACA,aACA,YACA,SACA,aACA,aACA,YACA,SACA,UACA,YACA,WACA,YACA,WACA,YACA,SACA,UACA,QACA,SACA,UACA,UACA,WACA,WACA,UACA,WACA,WACA,YACA,SACA,UACA,YACA,WACA,QACA,SACA,OACA,UACA,QACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,UACA,UACA,WACA,WACA,SACA,YACA,UACA,SACA,SACA,UACA,UACA,SACA,QACA,WACA,YACA,SACA,UACA,WACA,UACA,SACA,WACA,UACA,UACA,UACA,WACA,SACA,UACA,SACA,UACA,SACA,MACA,QACA,QACA,SACA,YACA,WACA,SACA,OACA,aACA,aACA,YACA,YACA,aACA,UACA,SACA,UACA,SACA,SACA,OACA,QACA,UACA,SACA,QACA,UACA,UACA,SACA,QACA,WACA,YACA,UACA,WACA,WACA,UACA,WACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,SACA,WACA,YACA,aACA,aACA,OACA,QACA,SACA,WACA,WACA,QACA,WACA,SACA,WACA,QACA,SACA,UACA,UACA,SACA,QACA,WACA,UACA,UACA,WACA,WACA,UACA,WACA,WACA,UACA,YACA,WACA,YACA,YACA,UACA,WACA,UACA,WACA,aACA,WACA,YACA,QACA,QACA,SACA,SACA,UACA,UACA,OACA,WACA,WACA,SACA,SACA,SACA,QACA,WACA,YACA,SACA,UACA,QACA,SACA,QACA,WACA,SACA,QACA,SACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,UACA,UACA,WACA,QACA,WACA,YACA,SACA,WACA,WACA,WACA,SACA,YACA,UACA,YACA,SACA,UACA,WACA,UACA,YACA,UACA,WACA,WACA,YACA,YACA,SACA,aACA,WACA,UACA,UACA,UACA,WACA,WACA,UACA,WACA,WACA,SACA,SACA,UACA,OACA,QACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,OACA,UACA,WACA,SACA,UACA,SACA,SACA,SACA,SACA,QACA,SACA,UACA,SACA,UACA,UACA,QACA,SACA,UACA,SACA,QACA,SACA,WACA,SACA,SACA,UACA,UACA,WACA,UACA,SACA,WACA,SACA,YACA,SACA,YACA,UACA,WACA,WACA,YACA,YACA,SACA,UACA,UACA,SACA,UACA,SACA,SACA,QACA,UACA,WACA,WACA,WACA,WACA,SACA,SACA,UACA,SACA,QACA,SACA,UACA,SACA,QACA,SACA,UACA,OACA,QACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,UACA,SACA,SACA,QACA,SACA,SACA,OACA,QACA,SACA,SACA,SACA,UACA,WACA,UACA,UACA,SACA,SACA,WACA,UACA,WACA,SACA,QACA,UACA,OACA,QACA,QACA,SACA,SACA,UACA,WACA,WACA,UACA,SACA,SACA,UACA,SACA,WACA,QACA,UACA,WACA,UACA,UACA,SACA,QACA,QACA,YACA,WACA,QACA,WACA,WACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,SACA,OACA,QACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,YACA,WACA,WACA,UACA,SACA,UACA,QACA,SACA,QACA,UACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,QACA,UACA,WACA,WACA,WACA,WACA,SACA,UACA,WACA,WACA,SACA,UACA,UACA,WACA,WACA,WACA,QACA,SACA,YACA,YACA,SACA,WACA,WACA,WACA,UACA,UACA,SACA,SACA,YACA,YACA,SACA,UACA,UACA,SACA,QACA,SACA,SACA,SACA,UACA,SACA,OACA,WACA,UACA,UACA,aACA,YACA,MACA,QACA,QACA,SACA,WACA,SACA,YACA,UACA,WACA,WACA,UACA,WACA,UACA,UACA,SACA,YACA,QACA,YACA,UACA,UACA,SACA,SACA,QACA,UACA,QACA,QACA,WACA,WACA,WACA,WACA,QACA,OACA,QACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,WACA,WACA,WACA,SACA,SACA,WACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,YACA,UACA,WACA,YACA,UACA,SACA,OACA,SACA,WACA,SACA,QACA,YACA,WACA,aACA,SACA,UACA,SACA,SACA,aACA,aACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,WACA,SACA,UACA,UACA,WACA,QACA,OACA,UACA,OACA,SACA,WACA,YACA,aACA,aACA,UACA,SACA,UACA,SACA,UACA,WACA,QACA,UACA,SACA,aACA,QACA,SACA,UACA,UACA,YACA,QACA,WACA,UACA,SACA,UACA,WACA,WACA,WACA,YACA,YACA,YACA,WACA,WACA,UACA,SACA,WACA,WACA,QACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,QACA,WACA,WACA,YACA,YACA,YACA,cACA,cACA,aACA,SACA,UACA,UACA,WACA,YACA,SACA,UACA,SACA,UACA,WACA,SACA,YACA,WACA,YACA,aACA,aACA,cACA,cACA,cACA,cACA,aACA,WACA,SACA,YACA,WACA,UACA,YACA,SACA,UACA,UACA,SACA,UACA,WACA,cACA,SACA,QACA,SACA,UACA,UACA,WACA,WACA,YACA,YACA,WACA,aACA,YACA,UACA,WACA,SACA,aACA,gBACA,YACA,eACA,UACA,WACA,YACA,aACA,YACA,YACA,YACA,UACA,UACA,WACA,WACA,YACA,WACA,SACA,UACA,WACA,UACA,cACA,SACA,UACA,WACA,WACA,UACA,WACA,UACA,QACA,SACA,SACA,SACA,UACA,YACA,WACA,SACA,WACA,SACA,WACA,WACA,UACA,WACA,WACA,WACA,UACA,UACA,WACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,UACA,YACA,YACA,UACA,YACA,UACA,aACA,SACA,YACA,eACA,UACA,UACA,YACA,SACA,WACA,UACA,WACA,WACA,SACA,YACA,QACA,SACA,WACA,YACA,YACA,aACA,YACA,aACA,YACA,UACA,SACA,WACA,WACA,aACA,WACA,aACA,YACA,SACA,UACA,SACA,WACA,YACA,YACA,WACA,WACA,SACA,UACA,SACA,QACA,SACA,UACA,SACA,SACA,WACA,YACA,WACA,WACA,WACA,WACA,YACA,SACA,SACA,OACA,QACA,SACA,UACA,QACA,OACA,YACA,QACA,QACA,SACA,UACA,WACA,SACA,YACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,WACA,aACA,OACA,OACA,QACA,WACA,WACA,WACA,YACA,UACA,SACA,UACA,WACA,YACA,UACA,WACA,WACA,UACA,aACA,cACA,aACA,YACA,WACA,WACA,UACA,WACA,SACA,SACA,aACA,UACA,WACA,aACA,YACA,SACA,WACA,WACA,UACA,WACA,UACA,UACA,SACA,YACA,SACA,UACA,SACA,YACA,aACA,WACA,YACA,UACA,WACA,WACA,SACA,WACA,QACA,SACA,SACA,WACA,WACA,SACA,UACA,YACA,YACA,UACA,aACA,WACA,YACA,WACA,WACA,WACA,SACA,UACA,SACA,QACA,OACA,WACA,YACA,cACA,cACA,aACA,UACA,UACA,WACA,aACA,aACA,WACA,YACA,SACA,UACA,SACA,SACA,UACA,YACA,WACA,aACA,WACA,OACA,WACA,WACA,UACA,YACA,aACA,SACA,SACA,aACA,UACA,aACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,WACA,WACA,WACA,SACA,eACA,SACA,SACA,UACA,WACA,SACA,SACA,WACA,QACA,WACA,aACA,aACA,SACA,WACA,aACA,YACA,WACA,WACA,UACA,WACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,WACA,YACA,aACA,WACA,SACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,QACA,SACA,UACA,UACA,WACA,QACA,UACA,UACA,UACA,WACA,aACA,YACA,UACA,SACA,WACA,SACA,WACA,SACA,SACA,WACA,UACA,QACA,aACA,SACA,UACA,UACA,UACA,YACA,QACA,SACA,WACA,UACA,WACA,SACA,WACA,SACA,SACA,UACA,WACA,UACA,UACA,QACA,UACA,UACA,SACA,UACA,UACA,QACA,SACA,UACA,OACA,QACA,WACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,WACA,QACA,UACA,UACA,YACA,SACA,UACA,SACA,SACA,SACA,SACA,QACA,QACA,UACA,OACA,QACA,UACA,WACA,WACA,YACA,YACA,WACA,WACA,YACA,YACA,YACA,aACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,QACA,SACA,SACA,UACA,SACA,WACA,UACA,QACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,UACA,WACA,YACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,aACA,UACA,YACA,YACA,WACA,YACA,QACA,QACA,SACA,UACA,aACA,WACA,QACA,WACA,WACA,YACA,YACA,SACA,SACA,SACA,UACA,SACA,QACA,SACA,SACA,QACA,WACA,SACA,UACA,UACA,WACA,UACA,SACA,QACA,UACA,SACA,UACA,QACA,QACA,SACA,QACA,SACA,SACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,SACA,UACA,SACA,WACA,SACA,SACA,WACA,SACA,UACA,YACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,OACA,UACA,QACA,QACA,WACA,SACA,YACA,UACA,UACA,QACA,SACA,QACA,QACA,SACA,UACA,WACA,WACA,UACA,UACA,SACA,QACA,QACA,WACA,WACA,WACA,WACA,OACA,UACA,UACA,UACA,UACA,UACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,UACA,YACA,QACA,WACA,WACA,WACA,WACA,WACA,QACA,SACA,UACA,OACA,UACA,YACA,WACA,SACA,UACA,SACA,WACA,UACA,SACA,SACA,WACA,YACA,OACA,YACA,WACA,WACA,YACA,YACA,SACA,SACA,UACA,SACA,SACA,SACA,YACA,YACA,SACA,UACA,WACA,WACA,WACA,SACA,SACA,SACA,SACA,UACA,UACA,YACA,OACA,UACA,SACA,UACA,SACA,OACA,YACA,YACA,SACA,UACA,SACA,QACA,UACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,SACA,UACA,OACA,QACA,SACA,WACA,cACA,YACA,cACA,cACA,WACA,WACA,WACA,SACA,UACA,UACA,QACA,WACA,YACA,YACA,cACA,UACA,YACA,WACA,WACA,UACA,aACA,UACA,UACA,YACA,WACA,WACA,UACA,OACA,QACA,YACA,aACA,UACA,SACA,SACA,SACA,SACA,aACA,QACA,SACA,UACA,QACA,UACA,aACA,aACA,WACA,OACA,YACA,SACA,SACA,QACA,WACA,WACA,WACA,SACA,UACA,YACA,aACA,YACA,WACA,UACA,WACA,YACA,OACA,UACA,OACA,QACA,WACA,YACA,aACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,WACA,QACA,SACA,UACA,WACA,SACA,UACA,SACA,SACA,QACA,SACA,UACA,WACA,SACA,YACA,UACA,WACA,SACA,SACA,SACA,OACA,WACA,QACA,SACA,WACA,YACA,OACA,QACA,YACA,QACA,UACA,WACA,WACA,UACA,WACA,YACA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,SACA,SACA,SACA,QACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,WACA,SACA,UACA,QACA,SACA,UACA,OACA,SACA,QACA,SACA,SACA,UACA,WACA,WACA,WACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,WACA,UACA,QACA,SACA,QACA,SACA,UACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,WACA,QACA,UACA,QACA,SACA,UACA,UACA,SACA,UACA,UACA,SACA,UACA,UACA,WACA,WACA,SACA,UACA,WACA,YACA,aACA,aACA,WACA,QACA,SACA,QACA,WACA,YACA,YACA,YACA,QACA,QACA,SACA,UACA,QACA,UACA,UACA,WACA,QACA,QACA,WACA,SACA,UACA,SACA,SACA,WACA,UACA,SACA,WACA,QACA,QACA,SACA,QACA,OACA,QACA,WACA,aACA,aACA,YACA,WACA,WACA,YACA,aACA,aACA,YACA,WACA,YACA,YACA,YACA,UACA,WACA,WACA,QACA,WACA,YACA,YACA,WACA,WACA,YACA,WACA,WACA,aACA,aACA,YACA,aACA,UACA,WACA,WACA,YACA,SACA,UACA,UACA,UACA,YACA,QACA,OACA,QACA,UACA,UACA,UACA,WACA,WACA,QACA,SACA,UACA,QACA,OACA,WACA,WACA,YACA,WACA,WACA,QACA,UACA,WACA,WACA,UACA,WACA,QACA,SACA,SACA,UACA,QACA,WACA,QACA,WACA,YACA,SACA,SACA,UACA,SACA,SACA,SACA,QACA,UACA,UACA,SACA,WACA,SACA,QACA,WACA,SACA,SACA,UACA,OACA,WACA,UACA,SACA,UACA,SACA,YACA,aACA,UACA,UACA,UACA,OACA,YACA,UACA,WACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,YACA,YACA,QACA,YACA,WACA,SACA,YACA,SACA,UACA,UACA,WACA,QACA,UACA,UACA,UACA,UACA,SACA,YACA,UACA,WACA,UACA,SACA,WACA,YACA,QACA,SACA,QACA,QACA,UACA,UACA,aACA,SACA,SACA,UACA,WACA,UACA,SACA,SACA,SACA,QACA,WACA,UACA,UACA,QACA,UACA,UACA,UACA,UACA,SACA,UACA,WACA,aACA,WACA,WACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,WACA,UACA,UACA,WACA,SACA,UACA,SACA,UACA,WACA,SACA,UACA,YACA,YACA,YACA,UACA,WACA,WACA,UACA,SACA,UACA,SACA,UACA,WACA,QACA,UACA,WACA,WACA,YACA,UACA,UACA,QACA,SACA,UACA,YACA,WACA,UACA,WACA,UACA,kBACA,WACA,QACA,SACA,WACA,UACA,UACA,UACA,UACA,SACA,WACA,UACA,WACA,UACA,SACA,QACA,UACA,SACA,UACA,WACA,YACA,YACA,UACA,WACA,UACA,UACA,UACA,SACA,QACA,SACA,WACA,YACA,YACA,WACA,YACA,YACA,aACA,SACA,UACA,OACA,UACA,SACA,UACA,SACA,WACA,WACA,WACA,UACA,SACA,WACA,WACA,WACA,WACA,YACA,UACA,QACA,UACA,SACA,WACA,UACA,UACA,UACA,UACA,aACA,WACA,UACA,WACA,SACA,WACA,UACA,UACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,WACA,SACA,SACA,UACA,SACA,UACA,UACA,aACA,UACA,WACA,SACA,UACA,UACA,SACA,UACA,UACA,SACA,WACA,QACA,UACA,YACA,WACA,SACA,SACA,YACA,YACA,YACA,UACA,WACA,UACA,UACA,YACA,YACA,aACA,cACA,aACA,UACA,WACA,YACA,UACA,WACA,WACA,YACA,SACA,UACA,WACA,UACA,OACA,WACA,SACA,QACA,QACA,SACA,YACA,SACA,UACA,aACA,UACA,WACA,YACA,WACA,WACA,QACA,SACA,QACA,UACA,WACA,WACA,WACA,QACA,SACA,QACA,SACA,UACA,WACA,WACA,SACA,SACA,WACA,UACA,UACA,WACA,YACA,SACA,UACA,YACA,SACA,UACA,WACA,SACA,SACA,UACA,UACA,UACA,YACA,SACA,SACA,UACA,SACA,UACA,WACA,WACA,UACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,WACA,SACA,QACA,SACA,UACA,SACA,UACA,QACA,SACA,aACA,SACA,SACA,QACA,SACA,SACA,UACA,SACA,SACA,SACA,QACA,WACA,YACA,SACA,UACA,UACA,OACA,SACA,SACA,UACA,SACA,QACA,SACA,SACA,WACA,WACA,QACA,UACA,UACA,YACA,YACA,WACA,QACA,WACA,SACA,SACA,UACA,WACA,SACA,UACA,WACA,SACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,YACA,SACA,UACA,UACA,QACA,YACA,aACA,WACA,WACA,aACA,aACA,YACA,WACA,QACA,WACA,YACA,aACA,aACA,SACA,WACA,WACA,QACA,WACA,YACA,WACA,SACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,OACA,QACA,SACA,UACA,SACA,YACA,QACA,QACA,WACA,YACA,WACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,YACA,QACA,YACA,YACA,QACA,SACA,UACA,SACA,QACA,SACA,SACA,QACA,SACA,SACA,WACA,SACA,QACA,SACA,UACA,QACA,QACA,QACA,UACA,UACA,SACA,UACA,SACA,UACA,SACA,WACA,UACA,UACA,SACA,SACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,WACA,SACA,SACA,QACA,SACA,QACA,OACA,QACA,UACA,UACA,eACA,UACA,SACA,OACA,QACA,UACA,UACA,UACA,YACA,YACA,OACA,OACA,WACA,WACA,QACA,UACA,YACA,UACA,WACA,YACA,aACA,aACA,UACA,WACA,WACA,UACA,WACA,UACA,UACA,SACA,UACA,SACA,SACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,UACA,SACA,SACA,QACA,SACA,UACA,UACA,SACA,QACA,WACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,SACA,WACA,YACA,YACA,YACA,aACA,SACA,MACA,SACA,UACA,SACA,YACA,QACA,QACA,SACA,SACA,cACA,SACA,OACA,QACA,UACA,SACA,UACA,SACA,SACA,YACA,SACA,UACA,YACA,YACA,UACA,WACA,YACA,YACA,QACA,SACA,WACA,YACA,OACA,QACA,QACA,SACA,UACA,WACA,YACA,YACA,SACA,UACA,WACA,YACA,WACA,UACA,YACA,SACA,UACA,SACA,QACA,UACA,UACA,UACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,SACA,aACA,SACA,UACA,SACA,UACA,UACA,WACA,WACA,UACA,cACA,cACA,SACA,SACA,cACA,aACA,YACA,YACA,SACA,UACA,UACA,SACA,UACA,SACA,YACA,UACA,UACA,SACA,SACA,QACA,YACA,SACA,UACA,SACA,SACA,UACA,aACA,SACA,UACA,WACA,QACA,WACA,SACA,QACA,SACA,UACA,SACA,WACA,QACA,SACA,SACA,UACA,WACA,WACA,UACA,UACA,SACA,UACA,SACA,WACA,QACA,QACA,QACA,WACA,WACA,UACA,YACA,SACA,WACA,YAC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","names":["dedent","i","ChannelType","composePromptFromState","ContentType","createUniqueUuid","logger","ModelType","parseKeyValueXml","Role","i","i","ModelType","parseKeyValueXml","room","userRole","composePromptFromState","logger","ModelType","state","booleanFooter","composePromptFromState","logger","ModelType","state","composePromptFromState","ModelType","logger","parseKeyValueXml","composePrompt","logger","ModelType","parseKeyValueXml","a","e","composePromptFromState","logger","ModelType","parseKeyValueXml","ChannelType","composePrompt","composePromptFromState","logger","ModelType","parseKeyValueXml","dedent","extractValidSettings","worldSettings","world","booleanFooter","composePromptFromState","ModelType","state","booleanFooter","composePromptFromState","logger","ModelType","state","composePromptFromState","findEntityByName","logger","ModelType","parseKeyValueXml","logger","findEntityByName","composePromptFromState","ModelType","parseKeyValueXml","logger","parseKeyValueXml","composePrompt","ModelType","a","n","e","addHeader","logger","a","addHeader","ChannelType","addHeader","logger","addHeader","ChannelType","topic","message","logger","addHeader","getEntityDetails","addHeader","mulberry32","seed","t","Math","imul","UniqueNamesGenerator","constructor","config","dictionaries","length","separator","style","this","generate","Error","slice","reduce","acc","curr","randomFloat","numberFromString","split","map","char","charCodeAt","numericSeed","floor","Number","random","word","toLowerCase","firstLetter","rest","toUpperCase","join","defaultConfig","uniqueNamesGenerator","customConfig","addHeader","ModelType","logger","formatFacts","message","addHeader","addHeader","ChannelType","getEntityDetails","logger","a","text","message","recentInteractionsData","a","ChannelType","createUniqueUuid","logger","ChannelType","findWorldsForOwner","getWorldSettings","logger","world","logger","addHeader","ChannelType","logger","logger","ContentType","ModelType","parseKeyValueXml","ChannelType","composePromptFromState","createUniqueUuid","cleanedText","message","Role"]}